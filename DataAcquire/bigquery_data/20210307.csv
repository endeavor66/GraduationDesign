id,type,public,created_at,actor_id,actor_login,repo_id,repo_name,payload_ref,payload_ref_type,payload_pusher_type,payload_push_id,payload_size,payload_distinct_size,payload_commits,payload_action,payload_pr_number,payload_forkee_full_name,payload_changes,payload_review_state,payload_review_author_association,payload_member_id,payload_member_login,payload_member_type,payload_member_site_admin
15433868014,PushEvent,true,2021-03-07 00:00:33.000000 UTC,659135,htynkn,188775427,htynkn/dubbo,"""refs/heads/master""",,,6657874053,1,1,"[{""sha"":""2062cdb2c537000c86555570c8d6c894f88bb7b7"",""author"":{""name"":""赵延"",""email"":""5ce2568d239a6eae7b30532b978f5499c59afae5@qq.com""},""message"":""[ISSUE-#6904] Fix reflect invoke error in org.apache.dubbo.common.utils.PojoUtils#generalize (#6905)\n\n* fix when the class is not public static, reflect invoke failed\r\n\r\n* add doc"",""distinct"":true,""url"":""https://api.github.com/repos/htynkn/dubbo/commits/2062cdb2c537000c86555570c8d6c894f88bb7b7""}]",,,,,,,,,,
15434004815,PushEvent,true,2021-03-07 00:46:02.000000 UTC,2467434,clayne,284154279,clayne/opencv,"""refs/heads/master""",,,6657963076,19,19,"[{""sha"":""cc22a73d0fb88925617245bd03ed71b9bf358e9c"",""author"":{""name"":""Rachel A"",""email"":""64266c24f0eb35574b62f76a6ea688c33967d3e9@gmail.com""},""message"":""EXR alpha support for 4 channel reading and writing.  Issue https://github.com/opencv/opencv/issues/16115."",""distinct"":true,""url"":""https://api.github.com/repos/clayne/opencv/commits/cc22a73d0fb88925617245bd03ed71b9bf358e9c""},{""sha"":""cbfd38bd41e91433b7a23348ae65d3adff2bc20b"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""core: rework code locality\n\n- to reduce binaries size of FFmpeg Windows wrapper\n- MinGW linker doesn't support -ffunction-sections (used for FFmpeg Windows wrapper)\n- move code to improve locality with its used dependencies\n- move UMat::dot() to matmul.dispatch.cpp (Mat::dot() is already there)\n- move UMat::inv() to lapack.cpp\n- move UMat::mul() to arithm.cpp\n- move UMat:eye() to matrix_operations.cpp (near setIdentity() implementation)\n- move normalize(): convert_scale.cpp => norm.cpp\n- move convertAndUnrollScalar(): arithm.cpp => copy.cpp\n- move scalarToRawData(): array.cpp => copy.cpp\n- move transpose(): matrix_operations.cpp => matrix_transform.cpp\n- move flip(), rotate(): copy.cpp => matrix_transform.cpp (rotate90 uses flip and transpose)\n- add 'OPENCV_CORE_EXCLUDE_C_API' CMake variable to exclude compilation of C-API functions from the core module\n- matrix_wrap.cpp: add compile-time checks for CUDA/OpenGL calls\n- the steps above allow to reduce FFmpeg wrapper size for ~1.5Mb (initial size of OpenCV part is about 3Mb)\n\nbackport is done to improve merge experience (less conflicts)\nbackport of commit: 65eb9467567598c08049bb190a4f3d3cbfabdcd0"",""distinct"":true,""url"":""https://api.github.com/repos/clayne/opencv/commits/cbfd38bd41e91433b7a23348ae65d3adff2bc20b""},{""sha"":""75ad74c893a02728821d8432fe73e89e35f49ec0"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""ffmpeg/3.4: update FFmpeg wrapper 2021.03\n\n- FFmpeg 3.4.8"",""distinct"":true,""url"":""https://api.github.com/repos/clayne/opencv/commits/75ad74c893a02728821d8432fe73e89e35f49ec0""},{""sha"":""0689c70dba067e1539a7ed97d93ab4ddb3141f28"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19665 from alalek:update_ffmpeg_3.4"",""distinct"":true,""url"":""https://api.github.com/repos/clayne/opencv/commits/0689c70dba067e1539a7ed97d93ab4ddb3141f28""},{""sha"":""a42d4da003357751a3579bef1568dcbf803f8bb7"",""author"":{""name"":""SamFC10"",""email"":""698de89357824e9e1a6b901f367c9eb7db76d8bf@gmail.com""},""message"":""Added Spatial Attention Module in Darknet Importer"",""distinct"":true,""url"":""https://api.github.com/repos/clayne/opencv/commits/a42d4da003357751a3579bef1568dcbf803f8bb7""},{""sha"":""a0008de281eeeb1d933deb47fc3f3580698af583"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19607 from alalek:backport_19606"",""distinct"":true,""url"":""https://api.github.com/repos/clayne/opencv/commits/a0008de281eeeb1d933deb47fc3f3580698af583""},{""sha"":""94533e12ebd6e131723a53e2d31e97986fea6e5b"",""author"":{""name"":""Liubov Batanina"",""email"":""e31e9421dee8ae251952f0c15777e23a2fd06308@yandex.ru""},""message"":""Determine layout"",""distinct"":true,""url"":""https://api.github.com/repos/clayne/opencv/commits/94533e12ebd6e131723a53e2d31e97986fea6e5b""},{""sha"":""2a808aeec0fd8f59693a14ce928f7e7f6faf994e"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19674 from l-bat:lb/fix_ie_tests"",""distinct"":true,""url"":""https://api.github.com/repos/clayne/opencv/commits/2a808aeec0fd8f59693a14ce928f7e7f6faf994e""},{""sha"":""125cc79c179f364eeecda72b24e6bb2da2f1bd1e"",""author"":{""name"":""APrigarina"",""email"":""abf344ab534beba5b17e17161e13390076563c5e@gmail.com""},""message"":""fix false positive detection"",""distinct"":true,""url"":""https://api.github.com/repos/clayne/opencv/commits/125cc79c179f364eeecda72b24e6bb2da2f1bd1e""},{""sha"":""7894cd3c73df5b90139c54c664225b913c5f049c"",""author"":{""name"":""Anastasia Murzova"",""email"":""8bc365a45af96f6305a79f5acc72147e62a77709@xperience.ai""},""message"":""Aligned TF Reshape layer behaviour"",""distinct"":true,""url"":""https://api.github.com/repos/clayne/opencv/commits/7894cd3c73df5b90139c54c664225b913c5f049c""},{""sha"":""f821530eb020322b203326fd632ff0b3dbe6663d"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19677 from APrigarina:detection_fix"",""distinct"":true,""url"":""https://api.github.com/repos/clayne/opencv/commits/f821530eb020322b203326fd632ff0b3dbe6663d""},{""sha"":""625d4fc8843435a505adeec752d5f17e1c153cef"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""cmake: update Python linters handling\n\n- exclude from getBuildInformation()\n- fix pylint version"",""distinct"":true,""url"":""https://api.github.com/repos/clayne/opencv/commits/625d4fc8843435a505adeec752d5f17e1c153cef""},{""sha"":""a1e2c4f338cb295813bd7081acb170195d359340"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19655 from raaldrid:EXR_rw_alpha_support_16115"",""distinct"":true,""url"":""https://api.github.com/repos/clayne/opencv/commits/a1e2c4f338cb295813bd7081acb170195d359340""},{""sha"":""640f188ca269c7cc7134c70725789e556a7a9733"",""author"":{""name"":""Mradul Agrawal"",""email"":""01a8833d44168c9f10b70fd514a30c995d450d2b@users.noreply.github.com""},""message"":""Merge pull request #19583 from theroyalpekka:patch-1\n\n* Update polynom_solver.cpp\r\n\r\nThis pull request is in the response to Issue  #19526. I have fixed the problem with the cube root calculation of 2*R. The Issue was in the usage of pow function with negative values of R, but if it is calculated for only positive values of R then changing x0 according to the parity of R, the Issue is resolved. Kindly consider it, Thanks!\r\n\r\n* add cv::cubeRoot(double)\r\n\r\nCo-authored-by: Alexander Alekhin <alexander.a.alekhin@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/clayne/opencv/commits/640f188ca269c7cc7134c70725789e556a7a9733""},{""sha"":""358878caf7563d2e02f21ea68da9fe9c2633c8bd"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19671 from SamFC10:sam-darknet"",""distinct"":true,""url"":""https://api.github.com/repos/clayne/opencv/commits/358878caf7563d2e02f21ea68da9fe9c2633c8bd""},{""sha"":""d2cc63e7791c38424b9a625f7fb773baaa65662a"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19680 from alalek:cmake_update_python_linters"",""distinct"":true,""url"":""https://api.github.com/repos/clayne/opencv/commits/d2cc63e7791c38424b9a625f7fb773baaa65662a""},{""sha"":""dc24663e8da94b9d4a76ee4af05dfd39929d91fa"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19641 from LupusSanctus:am/tf_reshape"",""distinct"":true,""url"":""https://api.github.com/repos/clayne/opencv/commits/dc24663e8da94b9d4a76ee4af05dfd39929d91fa""},{""sha"":""04a9ff88d80fd2757b0545e7420884a4394394af"",""author"":{""name"":""Vitaly Tuzov"",""email"":""c906dfd627a0bfac42039000d8b1f1350c86c6a1@intel.com""},""message"":""Merge pull request #19622 from terfendail:ref_doc\n\n* Updated cpp reference implementations for a few intrinsics to address wide universal intrinsics as well\r\n\r\n* Updated cpp reference implementations for a few more universal intrinsics"",""distinct"":true,""url"":""https://api.github.com/repos/clayne/opencv/commits/04a9ff88d80fd2757b0545e7420884a4394394af""},{""sha"":""d643a90efa643f10b1426028acaa97aecef54bdf"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge remote-tracking branch 'upstream/3.4' into merge-3.4"",""distinct"":true,""url"":""https://api.github.com/repos/clayne/opencv/commits/d643a90efa643f10b1426028acaa97aecef54bdf""}]",,,,,,,,,,
15434005548,PushEvent,true,2021-03-07 00:46:18.000000 UTC,2467434,clayne,263766029,clayne/tensorflow,"""refs/heads/master""",,,6657963574,1,1,"[{""sha"":""99b1fa6a15a6c82eb5ac2642d93fee810a2c766d"",""author"":{""name"":""Jiri Simsa"",""email"":""b53bfee97ac78a1d2afd0ef6138945f352c1fa9d@google.com""},""message"":""[tf.data] Make error message more informative.\n\nPiperOrigin-RevId: 361352108\nChange-Id: Ib4ffb578da274df1accb615f7fe1c04bd58b321d"",""distinct"":true,""url"":""https://api.github.com/repos/clayne/tensorflow/commits/99b1fa6a15a6c82eb5ac2642d93fee810a2c766d""}]",,,,,,,,,,
15433882776,PushEvent,true,2021-03-07 00:04:53.000000 UTC,19911444,swarupsrini,338179606,swarupsrini/scikit-learn,"""refs/heads/main""",,,6657884088,63,63,"[{""sha"":""f4ed4c17b4d49ff4a1511fcb7e0d56a1d248ddaa"",""author"":{""name"":""Thomas J. Fan"",""email"":""5e8796a332fafc9c261437cd1787ae2709a896a7@gmail.com""},""message"":""TST Fixes logistic & partial_dependence test for 32bit wheels (#19402)"",""distinct"":true,""url"":""https://api.github.com/repos/swarupsrini/scikit-learn/commits/f4ed4c17b4d49ff4a1511fcb7e0d56a1d248ddaa""},{""sha"":""abd1597e6679eb4fc56fc370064a6d33d964a365"",""author"":{""name"":""Fortune Uwha"",""email"":""399c4bc8f868f6a8677eb357e2f3fe4fd71b1ae7@gmail.com""},""message"":""FIX Converted output to int64 in random_projection *_min_dim (#19374)"",""distinct"":true,""url"":""https://api.github.com/repos/swarupsrini/scikit-learn/commits/abd1597e6679eb4fc56fc370064a6d33d964a365""},{""sha"":""769da3d51feef52b97b8129bf4700cf088a247b2"",""author"":{""name"":""Zito Relova"",""email"":""ed80fc6cb728f6f2deac814b2331756f446f8d28@gmail.com""},""message"":""FIX CountVectorizer does not check for lowercase in vocabulary (#19401)"",""distinct"":true,""url"":""https://api.github.com/repos/swarupsrini/scikit-learn/commits/769da3d51feef52b97b8129bf4700cf088a247b2""},{""sha"":""e6e543bb077d8e10b2ab7e5a847c1a1b9e6b4974"",""author"":{""name"":""Albert Thomas"",""email"":""bfadbefc1d6798df359ef3e718bc4bff23b4619e@centraliens.net""},""message"":""ENH Better err messages for contamination in outlier detectors (#18780)\n\nCo-authored-by: Olivier Grisel <olivier.grisel@ensta.org>\r\nCo-authored-by: Roman Yurchak <rth.yurchak@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/swarupsrini/scikit-learn/commits/e6e543bb077d8e10b2ab7e5a847c1a1b9e6b4974""},{""sha"":""95fa18f2782c3fcebd7a8388cde85323104f22b0"",""author"":{""name"":""Thomas J. Fan"",""email"":""5e8796a332fafc9c261437cd1787ae2709a896a7@gmail.com""},""message"":""TST Fixes docstring ordering and test_docstring_parameters (#19048)"",""distinct"":true,""url"":""https://api.github.com/repos/swarupsrini/scikit-learn/commits/95fa18f2782c3fcebd7a8388cde85323104f22b0""},{""sha"":""31b34b560de57a049dd435dccc55112271322370"",""author"":{""name"":""Atsushi Nukariya"",""email"":""245821414ed7a23204c2474a27970e504bc7e14c@jp.fujitsu.com""},""message"":""Fix: RuntimeWarning by dividing by zero in test_radius_neighbors_classifier_zero_distance (#19395)\n\n\r\nCo-authored-by: Olivier Grisel <olivier.grisel@ensta.org>"",""distinct"":true,""url"":""https://api.github.com/repos/swarupsrini/scikit-learn/commits/31b34b560de57a049dd435dccc55112271322370""},{""sha"":""dac560551c5767d9a8608f86e3f253e706026189"",""author"":{""name"":""Yasmeen Alsaedy"",""email"":""eeb70b878460fdb6653e07171a66a32ee50d2c7e@gmail.com""},""message"":""TST replace assert_raise_* by pytest.raises in linear_model (#19440)"",""distinct"":true,""url"":""https://api.github.com/repos/swarupsrini/scikit-learn/commits/dac560551c5767d9a8608f86e3f253e706026189""},{""sha"":""a0ba256dbe9380b5d2cf9cee133482fc87768267"",""author"":{""name"":""Martin Hirzel"",""email"":""9c93f81cbfa1145017c0eedf08f5063692020d98@gmail.com""},""message"":""DOC oob_score is only available when bootstrap=True (#19444)"",""distinct"":true,""url"":""https://api.github.com/repos/swarupsrini/scikit-learn/commits/a0ba256dbe9380b5d2cf9cee133482fc87768267""},{""sha"":""8c059196ede469f050cb8a278213e0294c46230b"",""author"":{""name"":""Guillaume Lemaitre"",""email"":""e5e78d384e205244ed69377c80930de68a2732ec@gmail.com""},""message"":""DOC update copyright year forever (#19463)"",""distinct"":true,""url"":""https://api.github.com/repos/swarupsrini/scikit-learn/commits/8c059196ede469f050cb8a278213e0294c46230b""},{""sha"":""b251f3f818e8d3cdb7ef843006d19da87755d444"",""author"":{""name"":""Thomas J. Fan"",""email"":""5e8796a332fafc9c261437cd1787ae2709a896a7@gmail.com""},""message"":""FIX Gives a unique id to html visualization (#19417)"",""distinct"":true,""url"":""https://api.github.com/repos/swarupsrini/scikit-learn/commits/b251f3f818e8d3cdb7ef843006d19da87755d444""},{""sha"":""4b72b579606ef50524e9c24b1304d4dfc11defbc"",""author"":{""name"":""Benjamin Pedigo"",""email"":""f52bd0ae9859a113982a034744de63a71d529b2a@gmail.com""},""message"":""DOC Fix typo in LDA User Guide (#19468)"",""distinct"":true,""url"":""https://api.github.com/repos/swarupsrini/scikit-learn/commits/4b72b579606ef50524e9c24b1304d4dfc11defbc""},{""sha"":""80d674e3cd2288f8c8c331d44bffa18006db7f46"",""author"":{""name"":""Juan Carlos Alfaro Jiménez"",""email"":""26ee155be2a94d28f82dfce99df9031a1a9dfe18@uclm.es""},""message"":""DOC Fix closing backtick in IterativeImputer (#19476)\n\nCo-authored-by: Nicolas Hug <contact@nicolas-hug.com>"",""distinct"":true,""url"":""https://api.github.com/repos/swarupsrini/scikit-learn/commits/80d674e3cd2288f8c8c331d44bffa18006db7f46""},{""sha"":""4d60a815d84531ba91bf097e9c814460113a7b72"",""author"":{""name"":""Nodar Okroshiashvili"",""email"":""e4caebc1d6812c2a06c2be7ce3262bd95f2bcea2@gmail.com""},""message"":""DOC Remove extra word from LOF docstring (#19477)"",""distinct"":true,""url"":""https://api.github.com/repos/swarupsrini/scikit-learn/commits/4d60a815d84531ba91bf097e9c814460113a7b72""},{""sha"":""66f67dd9362983a1d446ccf752b54c72c30fc090"",""author"":{""name"":""Nigel Bosch"",""email"":""02481abf30c1eaeb9bc7b18483ae7273f1c4a0b9@gmail.com""},""message"":""DOC Fix broken link to wikipedia in semi-supervised UG (#19481)"",""distinct"":true,""url"":""https://api.github.com/repos/swarupsrini/scikit-learn/commits/66f67dd9362983a1d446ccf752b54c72c30fc090""},{""sha"":""cc13313b26852169dff3fdf80c40008c233ce40f"",""author"":{""name"":""Zito Relova"",""email"":""ed80fc6cb728f6f2deac814b2331756f446f8d28@gmail.com""},""message"":""TST remove assert_warns in feature_extraction/tests/ module (#19439)"",""distinct"":true,""url"":""https://api.github.com/repos/swarupsrini/scikit-learn/commits/cc13313b26852169dff3fdf80c40008c233ce40f""},{""sha"":""321799971be8ede64d4603c93687becd5701d30f"",""author"":{""name"":""Zito Relova"",""email"":""ed80fc6cb728f6f2deac814b2331756f446f8d28@gmail.com""},""message"":""TST Replace the use of assert_warns messages in cluster/tests/ module (#19437)"",""distinct"":true,""url"":""https://api.github.com/repos/swarupsrini/scikit-learn/commits/321799971be8ede64d4603c93687becd5701d30f""},{""sha"":""c282d6cdb7647fceb1f73a5e343c112c42a21a04"",""author"":{""name"":""Nicolas Hug"",""email"":""1a73af9e7ae00182733b2292511b814be66f065f@nicolas-hug.com""},""message"":""DOC clarify that n_iter_no_change is not just for early-stopping for SGD (#19462)"",""distinct"":true,""url"":""https://api.github.com/repos/swarupsrini/scikit-learn/commits/c282d6cdb7647fceb1f73a5e343c112c42a21a04""},{""sha"":""eec623a8c5219b293625090e7ea5a01975741e37"",""author"":{""name"":""xavier dupré"",""email"":""6b81eb858cf4bdf0399a7b3effa163cf0fdfe236@users.noreply.github.com""},""message"":""DOC Replace onnxmltools by sklearn-onnx (#19484)"",""distinct"":true,""url"":""https://api.github.com/repos/swarupsrini/scikit-learn/commits/eec623a8c5219b293625090e7ea5a01975741e37""},{""sha"":""bea9211cdbed5f5beb6f7f283831373a642cb0a4"",""author"":{""name"":""Guillaume Lemaitre"",""email"":""e5e78d384e205244ed69377c80930de68a2732ec@gmail.com""},""message"":""DOC update whats new 0.24 for backport (#19434)"",""distinct"":true,""url"":""https://api.github.com/repos/swarupsrini/scikit-learn/commits/bea9211cdbed5f5beb6f7f283831373a642cb0a4""},{""sha"":""6a6217f15f654284d227c27c9179bb02a793e811"",""author"":{""name"":""xavier dupré"",""email"":""6b81eb858cf4bdf0399a7b3effa163cf0fdfe236@users.noreply.github.com""},""message"":""ENH Add mean_pinball_loss metric for quantile regression (#19415)\n\nCo-authored-by: Olivier Grisel <olivier.grisel@ensta.org>\r\nCo-authored-by: Christian Lorentzen <lorentzen.ch@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/swarupsrini/scikit-learn/commits/6a6217f15f654284d227c27c9179bb02a793e811""}]",,,,,,,,,,
15433968462,CreateEvent,true,2021-03-07 00:33:14.000000 UTC,34515761,chinedunsidinanya,345225709,chinedunsidinanya/terraform,,"""repository""","""user""",,,,,,,,,,,,,,
15433968493,CreateEvent,true,2021-03-07 00:33:15.000000 UTC,34515761,chinedunsidinanya,345225709,chinedunsidinanya/terraform,"""main""","""branch""","""user""",,,,,,,,,,,,,,
15433868155,PullRequestEvent,true,2021-03-07 00:00:36.000000 UTC,39814207,pull[bot],95080482,xiaoxiaopingzi/tensorflow,,,,,,,,"""opened""",4488,,,,,,,,
15433868981,PushEvent,true,2021-03-07 00:00:48.000000 UTC,39814207,pull[bot],95080482,xiaoxiaopingzi/tensorflow,"""refs/heads/master""",,,6657874690,1,1,"[{""sha"":""99b1fa6a15a6c82eb5ac2642d93fee810a2c766d"",""author"":{""name"":""Jiri Simsa"",""email"":""b53bfee97ac78a1d2afd0ef6138945f352c1fa9d@google.com""},""message"":""[tf.data] Make error message more informative.\n\nPiperOrigin-RevId: 361352108\nChange-Id: Ib4ffb578da274df1accb615f7fe1c04bd58b321d"",""distinct"":true,""url"":""https://api.github.com/repos/xiaoxiaopingzi/tensorflow/commits/99b1fa6a15a6c82eb5ac2642d93fee810a2c766d""}]",,,,,,,,,,
15433869015,PullRequestEvent,true,2021-03-07 00:00:49.000000 UTC,39814207,pull[bot],95080482,xiaoxiaopingzi/tensorflow,,,,,,,,"""closed""",4488,,,,,,,,
15433871692,PullRequestEvent,true,2021-03-07 00:01:32.000000 UTC,39814207,pull[bot],83310415,NeatNerdPrime/tensorflow,,,,,,,,"""opened""",4480,,,,,,,,
15433872146,PushEvent,true,2021-03-07 00:01:41.000000 UTC,39814207,pull[bot],83310415,NeatNerdPrime/tensorflow,"""refs/heads/master""",,,6657876882,1,1,"[{""sha"":""99b1fa6a15a6c82eb5ac2642d93fee810a2c766d"",""author"":{""name"":""Jiri Simsa"",""email"":""b53bfee97ac78a1d2afd0ef6138945f352c1fa9d@google.com""},""message"":""[tf.data] Make error message more informative.\n\nPiperOrigin-RevId: 361352108\nChange-Id: Ib4ffb578da274df1accb615f7fe1c04bd58b321d"",""distinct"":true,""url"":""https://api.github.com/repos/NeatNerdPrime/tensorflow/commits/99b1fa6a15a6c82eb5ac2642d93fee810a2c766d""}]",,,,,,,,,,
15433872162,PullRequestEvent,true,2021-03-07 00:01:41.000000 UTC,39814207,pull[bot],83310415,NeatNerdPrime/tensorflow,,,,,,,,"""closed""",4480,,,,,,,,
15433873115,PullRequestEvent,true,2021-03-07 00:01:59.000000 UTC,39814207,pull[bot],130050312,Rachelmorrell/tensorflow,,,,,,,,"""opened""",5248,,,,,,,,
15433873773,PushEvent,true,2021-03-07 00:02:11.000000 UTC,39814207,pull[bot],130050312,Rachelmorrell/tensorflow,"""refs/heads/master""",,,6657877983,1,1,"[{""sha"":""99b1fa6a15a6c82eb5ac2642d93fee810a2c766d"",""author"":{""name"":""Jiri Simsa"",""email"":""b53bfee97ac78a1d2afd0ef6138945f352c1fa9d@google.com""},""message"":""[tf.data] Make error message more informative.\n\nPiperOrigin-RevId: 361352108\nChange-Id: Ib4ffb578da274df1accb615f7fe1c04bd58b321d"",""distinct"":true,""url"":""https://api.github.com/repos/Rachelmorrell/tensorflow/commits/99b1fa6a15a6c82eb5ac2642d93fee810a2c766d""}]",,,,,,,,,,
15433873784,PullRequestEvent,true,2021-03-07 00:02:11.000000 UTC,39814207,pull[bot],130050312,Rachelmorrell/tensorflow,,,,,,,,"""closed""",5248,,,,,,,,
15433926268,PullRequestEvent,true,2021-03-07 00:19:13.000000 UTC,39814207,pull[bot],163274816,kokizzu/tensorflow,,,,,,,,"""opened""",3474,,,,,,,,
15433930327,PushEvent,true,2021-03-07 00:20:31.000000 UTC,39814207,pull[bot],163274816,kokizzu/tensorflow,"""refs/heads/master""",,,6657915614,1,1,"[{""sha"":""99b1fa6a15a6c82eb5ac2642d93fee810a2c766d"",""author"":{""name"":""Jiri Simsa"",""email"":""b53bfee97ac78a1d2afd0ef6138945f352c1fa9d@google.com""},""message"":""[tf.data] Make error message more informative.\n\nPiperOrigin-RevId: 361352108\nChange-Id: Ib4ffb578da274df1accb615f7fe1c04bd58b321d"",""distinct"":true,""url"":""https://api.github.com/repos/kokizzu/tensorflow/commits/99b1fa6a15a6c82eb5ac2642d93fee810a2c766d""}]",,,,,,,,,,
15433930377,PullRequestEvent,true,2021-03-07 00:20:31.000000 UTC,39814207,pull[bot],163274816,kokizzu/tensorflow,,,,,,,,"""closed""",3474,,,,,,,,
15433956845,PullRequestEvent,true,2021-03-07 00:29:25.000000 UTC,39814207,pull[bot],107213661,Geolem/tensorflow,,,,,,,,"""opened""",23,,,,,,,,
15433959337,PushEvent,true,2021-03-07 00:30:12.000000 UTC,39814207,pull[bot],107213661,Geolem/tensorflow,"""refs/heads/master""",,,6657934364,1,1,"[{""sha"":""99b1fa6a15a6c82eb5ac2642d93fee810a2c766d"",""author"":{""name"":""Jiri Simsa"",""email"":""b53bfee97ac78a1d2afd0ef6138945f352c1fa9d@google.com""},""message"":""[tf.data] Make error message more informative.\n\nPiperOrigin-RevId: 361352108\nChange-Id: Ib4ffb578da274df1accb615f7fe1c04bd58b321d"",""distinct"":true,""url"":""https://api.github.com/repos/Geolem/tensorflow/commits/99b1fa6a15a6c82eb5ac2642d93fee810a2c766d""}]",,,,,,,,,,
15433959361,PullRequestEvent,true,2021-03-07 00:30:13.000000 UTC,39814207,pull[bot],107213661,Geolem/tensorflow,,,,,,,,"""closed""",23,,,,,,,,
15433964421,PullRequestEvent,true,2021-03-07 00:31:52.000000 UTC,39814207,pull[bot],117140827,testkevinbonz/tensorflow,,,,,,,,"""opened""",6915,,,,,,,,
15433965660,PushEvent,true,2021-03-07 00:32:16.000000 UTC,39814207,pull[bot],117140827,testkevinbonz/tensorflow,"""refs/heads/master""",,,6657938270,1,1,"[{""sha"":""99b1fa6a15a6c82eb5ac2642d93fee810a2c766d"",""author"":{""name"":""Jiri Simsa"",""email"":""b53bfee97ac78a1d2afd0ef6138945f352c1fa9d@google.com""},""message"":""[tf.data] Make error message more informative.\n\nPiperOrigin-RevId: 361352108\nChange-Id: Ib4ffb578da274df1accb615f7fe1c04bd58b321d"",""distinct"":true,""url"":""https://api.github.com/repos/testkevinbonz/tensorflow/commits/99b1fa6a15a6c82eb5ac2642d93fee810a2c766d""}]",,,,,,,,,,
15433965680,PullRequestEvent,true,2021-03-07 00:32:17.000000 UTC,39814207,pull[bot],117140827,testkevinbonz/tensorflow,,,,,,,,"""closed""",6915,,,,,,,,
15433997550,PullRequestEvent,true,2021-03-07 00:43:27.000000 UTC,39814207,pull[bot],190277211,KabirKwatra/tensorflow,,,,,,,,"""opened""",5519,,,,,,,,
15433998491,PushEvent,true,2021-03-07 00:43:47.000000 UTC,39814207,pull[bot],190277211,KabirKwatra/tensorflow,"""refs/heads/master""",,,6657959038,1,1,"[{""sha"":""99b1fa6a15a6c82eb5ac2642d93fee810a2c766d"",""author"":{""name"":""Jiri Simsa"",""email"":""b53bfee97ac78a1d2afd0ef6138945f352c1fa9d@google.com""},""message"":""[tf.data] Make error message more informative.\n\nPiperOrigin-RevId: 361352108\nChange-Id: Ib4ffb578da274df1accb615f7fe1c04bd58b321d"",""distinct"":true,""url"":""https://api.github.com/repos/KabirKwatra/tensorflow/commits/99b1fa6a15a6c82eb5ac2642d93fee810a2c766d""}]",,,,,,,,,,
15433998534,PullRequestEvent,true,2021-03-07 00:43:48.000000 UTC,39814207,pull[bot],190277211,KabirKwatra/tensorflow,,,,,,,,"""closed""",5519,,,,,,,,
15434017363,PullRequestEvent,true,2021-03-07 00:50:39.000000 UTC,39814207,pull[bot],340715557,KaycoinsInc/tensorflow,,,,,,,,"""opened""",36,,,,,,,,
15434017822,PushEvent,true,2021-03-07 00:50:50.000000 UTC,39814207,pull[bot],340715557,KaycoinsInc/tensorflow,"""refs/heads/master""",,,6657971659,1,1,"[{""sha"":""99b1fa6a15a6c82eb5ac2642d93fee810a2c766d"",""author"":{""name"":""Jiri Simsa"",""email"":""b53bfee97ac78a1d2afd0ef6138945f352c1fa9d@google.com""},""message"":""[tf.data] Make error message more informative.\n\nPiperOrigin-RevId: 361352108\nChange-Id: Ib4ffb578da274df1accb615f7fe1c04bd58b321d"",""distinct"":true,""url"":""https://api.github.com/repos/KaycoinsInc/tensorflow/commits/99b1fa6a15a6c82eb5ac2642d93fee810a2c766d""}]",,,,,,,,,,
15434017832,PullRequestEvent,true,2021-03-07 00:50:50.000000 UTC,39814207,pull[bot],340715557,KaycoinsInc/tensorflow,,,,,,,,"""closed""",36,,,,,,,,
15434030342,IssueCommentEvent,true,2021-03-07 00:55:18.000000 UTC,29597,bvaughn,10270250,facebook/react,,,,,,,,"""created""",,,,,,,,,
15434010184,IssueCommentEvent,true,2021-03-07 00:48:00.000000 UTC,341319,dharkness,10270250,facebook/react,,,,,,,,"""created""",,,,,,,,,
15433952900,IssueCommentEvent,true,2021-03-07 00:28:04.000000 UTC,793565,bgirard,10270250,facebook/react,,,,,,,,"""created""",,,,,,,,,
15433973411,ForkEvent,true,2021-03-07 00:34:57.000000 UTC,7123136,betterRunner,10270250,facebook/react,,,,,,,,,,"""betterRunner/react""",,,,,,,
15433934452,WatchEvent,true,2021-03-07 00:21:50.000000 UTC,16278453,frednora,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15433973107,WatchEvent,true,2021-03-07 00:34:51.000000 UTC,30073450,dotel,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15433884487,ForkEvent,true,2021-03-07 00:05:16.000000 UTC,3019722,AlekLefebvre,843222,scikit-learn/scikit-learn,,,,,,,,,,"""AlekLefebvre/scikit-learn""",,,,,,,
15433883554,PullRequestEvent,true,2021-03-07 00:05:06.000000 UTC,5402633,thomasjpfan,843222,scikit-learn/scikit-learn,,,,,,,,"""opened""",19633,,,,,,,,
15433901848,IssueCommentEvent,true,2021-03-07 00:10:59.000000 UTC,19911444,swarupsrini,843222,scikit-learn/scikit-learn,,,,,,,,"""created""",,,,,,,,,
15433902082,IssueCommentEvent,true,2021-03-07 00:11:04.000000 UTC,19911444,swarupsrini,843222,scikit-learn/scikit-learn,,,,,,,,"""created""",,,,,,,,,
15433978127,IssueCommentEvent,true,2021-03-07 00:36:29.000000 UTC,47971445,yoni2k,843222,scikit-learn/scikit-learn,,,,,,,,"""created""",,,,,,,,,
15434018295,WatchEvent,true,2021-03-07 00:51:00.000000 UTC,57928054,Haroldg94,843222,scikit-learn/scikit-learn,,,,,,,,"""started""",,,,,,,,,
15433970075,WatchEvent,true,2021-03-07 00:33:48.000000 UTC,59517260,Morojs,843222,scikit-learn/scikit-learn,,,,,,,,"""started""",,,,,,,,,
15433970188,ForkEvent,true,2021-03-07 00:33:50.000000 UTC,59517260,Morojs,843222,scikit-learn/scikit-learn,,,,,,,,,,"""Morojs/scikit-learn""",,,,,,,
15433929527,WatchEvent,true,2021-03-07 00:20:15.000000 UTC,5494704,jonasjberg,17728164,hashicorp/terraform,,,,,,,,"""started""",,,,,,,,,
15433896367,ForkEvent,true,2021-03-07 00:09:10.000000 UTC,72634600,ingraep1,17728164,hashicorp/terraform,,,,,,,,,,"""ingraep1/terraform""",,,,,,,
15433924651,ForkEvent,true,2021-03-07 00:18:40.000000 UTC,72827063,nirkoren1,5108051,opencv/opencv,,,,,,,,,,"""nirkoren1/opencv""",,,,,,,
15433908187,WatchEvent,true,2021-03-07 00:13:10.000000 UTC,77286027,LexingtonWhalen,5108051,opencv/opencv,,,,,,,,"""started""",,,,,,,,,
15433919891,WatchEvent,true,2021-03-07 00:17:10.000000 UTC,6209605,makifay,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15433894313,ForkEvent,true,2021-03-07 00:08:29.000000 UTC,37569051,tom00ti,45717250,tensorflow/tensorflow,,,,,,,,,,"""tom00ti/tensorflow""",,,,,,,
15433895577,WatchEvent,true,2021-03-07 00:08:55.000000 UTC,37569051,tom00ti,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15433890588,IssuesEvent,true,2021-03-07 00:07:16.000000 UTC,42785357,ymodak,45717250,tensorflow/tensorflow,,,,,,,,"""closed""",,,,,,,,,
15433871891,PullRequestEvent,true,2021-03-07 00:01:36.000000 UTC,51521378,CyangXu,45717250,tensorflow/tensorflow,,,,,,,,"""opened""",47612,,,,,,,,
15433873419,PullRequestEvent,true,2021-03-07 00:02:05.000000 UTC,51521378,CyangXu,45717250,tensorflow/tensorflow,,,,,,,,"""closed""",47612,,,,,,,,
15434032683,IssueCommentEvent,true,2021-03-07 00:56:06.000000 UTC,56610014,tensorflow-butler[bot],45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15434032736,IssuesEvent,true,2021-03-07 00:56:06.000000 UTC,56610014,tensorflow-butler[bot],45717250,tensorflow/tensorflow,,,,,,,,"""closed""",,,,,,,,,
15434032791,IssueCommentEvent,true,2021-03-07 00:56:08.000000 UTC,56610014,tensorflow-butler[bot],45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15433892616,IssuesEvent,true,2021-03-07 00:07:57.000000 UTC,79701538,Hassan92Wa,45717250,tensorflow/tensorflow,,,,,,,,"""opened""",,,,,,,,,
15433865860,WatchEvent,true,2021-03-07 00:00:06.000000 UTC,46185148,aishwarya257,135786093,typescript-cheatsheets/react,,,,,,,,"""started""",,,,,,,,,
15434253587,PushEvent,true,2021-03-07 02:13:58.000000 UTC,2623618,scottcressi,187102906,scottcressi/terraform,"""refs/heads/master""",,,6658123449,1,1,"[{""sha"":""862dc3d9273d7381e0ba3281f93d8d637f2a614a"",""author"":{""name"":""Scott Cressi"",""email"":""933a6f803099f35a222151b583ad055d04bd99c5@gmail.com""},""message"":""version"",""distinct"":true,""url"":""https://api.github.com/repos/scottcressi/terraform/commits/862dc3d9273d7381e0ba3281f93d8d637f2a614a""}]",,,,,,,,,,
15434293587,PushEvent,true,2021-03-07 02:28:25.000000 UTC,19911444,swarupsrini,338179606,swarupsrini/scikit-learn,"""refs/heads/bug/19538""",,,6658149732,1,1,"[{""sha"":""8f0de183e10b22cd10deb23cd94e168e98fd9ab6"",""author"":{""name"":""Swarup Srini"",""email"":""3fa825aace9fd3f4ad075cda4c4bced3f74d3d7a@gmail.com""},""message"":""Completed bug fix"",""distinct"":true,""url"":""https://api.github.com/repos/swarupsrini/scikit-learn/commits/8f0de183e10b22cd10deb23cd94e168e98fd9ab6""}]",,,,,,,,,,
15434298090,PushEvent,true,2021-03-07 02:30:03.000000 UTC,19911444,swarupsrini,338179606,swarupsrini/scikit-learn,"""refs/heads/bug/19538""",,,6658152591,1,1,"[{""sha"":""d5f9b6581ce1c163d6f4c02974851e21a17db952"",""author"":{""name"":""Swarup Srini"",""email"":""3fa825aace9fd3f4ad075cda4c4bced3f74d3d7a@gmail.com""},""message"":""Completed test case"",""distinct"":true,""url"":""https://api.github.com/repos/swarupsrini/scikit-learn/commits/d5f9b6581ce1c163d6f4c02974851e21a17db952""}]",,,,,,,,,,
15434334825,DeleteEvent,true,2021-03-07 02:43:18.000000 UTC,19911444,swarupsrini,338179606,swarupsrini/scikit-learn,"""bug/19538""","""branch""","""user""",,,,,,,,,,,,,,
15434338644,CreateEvent,true,2021-03-07 02:44:42.000000 UTC,19911444,swarupsrini,338179606,swarupsrini/scikit-learn,"""bug/19538""","""branch""","""user""",,,,,,,,,,,,,,
15434342774,PullRequestEvent,true,2021-03-07 02:46:09.000000 UTC,19911444,swarupsrini,338179606,swarupsrini/scikit-learn,,,,,,,,"""opened""",8,,,,,,,,
15434355250,PullRequestReviewEvent,true,2021-03-07 02:50:44.000000 UTC,19911444,swarupsrini,338179606,swarupsrini/scikit-learn,,,,,,,,"""created""",7,,,"""approved""","""OWNER""",,,,
15434362069,IssuesEvent,true,2021-03-07 02:53:15.000000 UTC,19911444,swarupsrini,338179606,swarupsrini/scikit-learn,,,,,,,,"""closed""",,,,,,,,,
15434362074,IssuesEvent,true,2021-03-07 02:53:15.000000 UTC,19911444,swarupsrini,338179606,swarupsrini/scikit-learn,,,,,,,,"""closed""",,,,,,,,,
15434362091,PullRequestEvent,true,2021-03-07 02:53:16.000000 UTC,19911444,swarupsrini,338179606,swarupsrini/scikit-learn,,,,,,,,"""closed""",8,,,,,,,,
15434362672,PushEvent,true,2021-03-07 02:53:29.000000 UTC,19911444,swarupsrini,338179606,swarupsrini/scikit-learn,"""refs/heads/main""",,,6658194399,3,1,"[{""sha"":""8f0de183e10b22cd10deb23cd94e168e98fd9ab6"",""author"":{""name"":""Swarup Srini"",""email"":""3fa825aace9fd3f4ad075cda4c4bced3f74d3d7a@gmail.com""},""message"":""Completed bug fix"",""distinct"":false,""url"":""https://api.github.com/repos/swarupsrini/scikit-learn/commits/8f0de183e10b22cd10deb23cd94e168e98fd9ab6""},{""sha"":""d5f9b6581ce1c163d6f4c02974851e21a17db952"",""author"":{""name"":""Swarup Srini"",""email"":""3fa825aace9fd3f4ad075cda4c4bced3f74d3d7a@gmail.com""},""message"":""Completed test case"",""distinct"":false,""url"":""https://api.github.com/repos/swarupsrini/scikit-learn/commits/d5f9b6581ce1c163d6f4c02974851e21a17db952""},{""sha"":""2b76fb938f100e4042f807d0974c8897479918ce"",""author"":{""name"":""Swarup Srini"",""email"":""3fa825aace9fd3f4ad075cda4c4bced3f74d3d7a@gmail.com""},""message"":""Merge pull request #8 from swarupsrini/bug/19538\n\nFixed Sequential Feature Selector - unsupervised fit issue with docs and test update"",""distinct"":true,""url"":""https://api.github.com/repos/swarupsrini/scikit-learn/commits/2b76fb938f100e4042f807d0974c8897479918ce""}]",,,,,,,,,,
15434351736,PullRequestReviewEvent,true,2021-03-07 02:49:26.000000 UTC,45012745,HuIsJason,338179606,swarupsrini/scikit-learn,,,,,,,,"""created""",8,,,"""approved""","""COLLABORATOR""",,,,
15434353162,PullRequestReviewEvent,true,2021-03-07 02:49:59.000000 UTC,45012745,HuIsJason,338179606,swarupsrini/scikit-learn,,,,,,,,"""created""",7,,,"""approved""","""COLLABORATOR""",,,,
15434361440,PullRequestReviewEvent,true,2021-03-07 02:53:01.000000 UTC,46734523,hemant3434,338179606,swarupsrini/scikit-learn,,,,,,,,"""created""",8,,,"""approved""","""COLLABORATOR""",,,,
15434363907,PullRequestReviewEvent,true,2021-03-07 02:53:56.000000 UTC,46734523,hemant3434,338179606,swarupsrini/scikit-learn,,,,,,,,"""created""",7,,,"""approved""","""COLLABORATOR""",,,,
15434350394,IssueCommentEvent,true,2021-03-07 02:48:55.000000 UTC,46760451,ObaidaSaleh,338179606,swarupsrini/scikit-learn,,,,,,,,"""created""",,,,,,,,,
15434351111,PullRequestReviewEvent,true,2021-03-07 02:49:11.000000 UTC,46760451,ObaidaSaleh,338179606,swarupsrini/scikit-learn,,,,,,,,"""created""",8,,,"""approved""","""COLLABORATOR""",,,,
15434352112,IssueCommentEvent,true,2021-03-07 02:49:35.000000 UTC,46760451,ObaidaSaleh,338179606,swarupsrini/scikit-learn,,,,,,,,"""created""",,,,,,,,,
15434352471,PullRequestReviewEvent,true,2021-03-07 02:49:44.000000 UTC,46760451,ObaidaSaleh,338179606,swarupsrini/scikit-learn,,,,,,,,"""created""",7,,,"""approved""","""COLLABORATOR""",,,,
15434264581,CreateEvent,true,2021-03-07 02:17:54.000000 UTC,50694001,howardleung,338179606,swarupsrini/scikit-learn,"""bug/19551""","""branch""","""user""",,,,,,,,,,,,,,
15434287120,PullRequestEvent,true,2021-03-07 02:26:05.000000 UTC,50694001,howardleung,338179606,swarupsrini/scikit-learn,,,,,,,,"""opened""",7,,,,,,,,
15434352665,PullRequestReviewEvent,true,2021-03-07 02:49:48.000000 UTC,50694001,howardleung,338179606,swarupsrini/scikit-learn,,,,,,,,"""created""",8,,,"""approved""","""COLLABORATOR""",,,,
15434366852,IssuesEvent,true,2021-03-07 02:54:59.000000 UTC,50694001,howardleung,338179606,swarupsrini/scikit-learn,,,,,,,,"""closed""",,,,,,,,,
15434366859,IssuesEvent,true,2021-03-07 02:54:59.000000 UTC,50694001,howardleung,338179606,swarupsrini/scikit-learn,,,,,,,,"""closed""",,,,,,,,,
15434366867,PullRequestEvent,true,2021-03-07 02:54:59.000000 UTC,50694001,howardleung,338179606,swarupsrini/scikit-learn,,,,,,,,"""closed""",7,,,,,,,,
15434366970,PushEvent,true,2021-03-07 02:55:01.000000 UTC,50694001,howardleung,338179606,swarupsrini/scikit-learn,"""refs/heads/main""",,,6658197093,2,1,"[{""sha"":""7004711c55798df2ca6b1a141a82b4fa81daefa4"",""author"":{""name"":""Howard Leung"",""email"":""2238aa27848f977230164ed10cd8d129847aa9af@hotmail.com""},""message"":""Fixed issue with complete documentation and acceptance test suite"",""distinct"":false,""url"":""https://api.github.com/repos/swarupsrini/scikit-learn/commits/7004711c55798df2ca6b1a141a82b4fa81daefa4""},{""sha"":""62707f5d24adcbc02f3d8ed18dace9b88ea7070e"",""author"":{""name"":""Howard Leung"",""email"":""26277428d3289101d8c74b4f8da0e9cec467fa09@users.noreply.github.com""},""message"":""Merge pull request #7 from swarupsrini/bug/19551\n\n[19551] Bugfix: PolynomialFeatures doesn't work correctly when degree=0"",""distinct"":true,""url"":""https://api.github.com/repos/swarupsrini/scikit-learn/commits/62707f5d24adcbc02f3d8ed18dace9b88ea7070e""}]",,,,,,,,,,
15434359680,PullRequestReviewEvent,true,2021-03-07 02:52:20.000000 UTC,53287158,jasond20,338179606,swarupsrini/scikit-learn,,,,,,,,"""created""",8,,,"""approved""","""COLLABORATOR""",,,,
15434361423,PullRequestReviewEvent,true,2021-03-07 02:53:00.000000 UTC,53287158,jasond20,338179606,swarupsrini/scikit-learn,,,,,,,,"""created""",7,,,"""approved""","""COLLABORATOR""",,,,
15434236367,PushEvent,true,2021-03-07 02:08:03.000000 UTC,53463432,yzwang-13,340279848,yzwang-13/react,"""refs/heads/master""",,,6658112629,1,1,"[{""sha"":""aef7d04e68e4ca4c73d74bf12628d2d2625894a4"",""author"":{""name"":""yingzhengwang"",""email"":""d9c462caadca115298d8f36ae09324bacec867ee@gmail.com""},""message"":""add inline style"",""distinct"":true,""url"":""https://api.github.com/repos/yzwang-13/react/commits/aef7d04e68e4ca4c73d74bf12628d2d2625894a4""}]",,,,,,,,,,
15434341723,PushEvent,true,2021-03-07 02:45:47.000000 UTC,53463432,yzwang-13,340279848,yzwang-13/react,"""refs/heads/master""",,,6658180962,1,1,"[{""sha"":""23bb5feae7f3b94b2bf03ab1083261dd2656e9c9"",""author"":{""name"":""yingzhengwang"",""email"":""d9c462caadca115298d8f36ae09324bacec867ee@gmail.com""},""message"":""assignment1-init"",""distinct"":true,""url"":""https://api.github.com/repos/yzwang-13/react/commits/23bb5feae7f3b94b2bf03ab1083261dd2656e9c9""}]",,,,,,,,,,
15434356925,PushEvent,true,2021-03-07 02:51:20.000000 UTC,53463432,yzwang-13,340279848,yzwang-13/react,"""refs/heads/master""",,,6658190626,1,1,"[{""sha"":""8e79d655eb300b8209d5ca3c3834ba94b528d067"",""author"":{""name"":""yingzhengwang"",""email"":""d9c462caadca115298d8f36ae09324bacec867ee@gmail.com""},""message"":""restructure files"",""distinct"":true,""url"":""https://api.github.com/repos/yzwang-13/react/commits/8e79d655eb300b8209d5ca3c3834ba94b528d067""}]",,,,,,,,,,
15434360096,PushEvent,true,2021-03-07 02:52:29.000000 UTC,53463432,yzwang-13,340279848,yzwang-13/react,"""refs/heads/master""",,,6658192694,1,1,"[{""sha"":""5dc8fca4f169815780dc9c18904723a1b07ee6ff"",""author"":{""name"":""yingzhengwang"",""email"":""d9c462caadca115298d8f36ae09324bacec867ee@gmail.com""},""message"":""add assignment1 instructions"",""distinct"":true,""url"":""https://api.github.com/repos/yzwang-13/react/commits/5dc8fca4f169815780dc9c18904723a1b07ee6ff""}]",,,,,,,,,,
15434297156,PushEvent,true,2021-03-07 02:29:43.000000 UTC,58434091,tanakachitete,312238581,tanakachitete/helix,"""refs/heads/master""",,,6658151992,1,1,"[{""sha"":""b36d8e83162ff15c3e181ae65f34d4929759d098"",""author"":{""name"":""Tanaka Chitete"",""email"":""3040841f40b64d34cde1b92748b393a7be49d3d8@gmail.com""},""message"":""Updated README.md"",""distinct"":true,""url"":""https://api.github.com/repos/tanakachitete/helix/commits/b36d8e83162ff15c3e181ae65f34d4929759d098""}]",,,,,,,,,,
15434301249,PushEvent,true,2021-03-07 02:31:05.000000 UTC,58434091,tanakachitete,312238581,tanakachitete/helix,"""refs/heads/master""",,,6658154682,1,1,"[{""sha"":""bb121071cfa3d329e2d762f65c8208393339bd57"",""author"":{""name"":""Tanaka Chitete"",""email"":""3040841f40b64d34cde1b92748b393a7be49d3d8@gmail.com""},""message"":""Updated README.md"",""distinct"":true,""url"":""https://api.github.com/repos/tanakachitete/helix/commits/bb121071cfa3d329e2d762f65c8208393339bd57""}]",,,,,,,,,,
15434271239,PushEvent,true,2021-03-07 02:20:24.000000 UTC,59533451,aiemag,232118007,aiemag/tensorflow,"""refs/heads/master""",,,6658134974,1,1,"[{""sha"":""9bff333ec41473d32c5e41d89fdc8d36975980f5"",""author"":{""name"":""lhh"",""email"":""ff1811917d4a4d5f8c801f25e2c8fea5684c1092@localhost.localdomain""},""message"":""source updated"",""distinct"":true,""url"":""https://api.github.com/repos/aiemag/tensorflow/commits/9bff333ec41473d32c5e41d89fdc8d36975980f5""}]",,,,,,,,,,
15434304489,CreateEvent,true,2021-03-07 02:32:15.000000 UTC,64328220,kouakepn,345241734,kouakepn/terraform,,"""repository""","""user""",,,,,,,,,,,,,,
15434304531,CreateEvent,true,2021-03-07 02:32:16.000000 UTC,64328220,kouakepn,345241734,kouakepn/terraform,"""main""","""branch""","""user""",,,,,,,,,,,,,,
15434358553,PushEvent,true,2021-03-07 02:51:56.000000 UTC,64328220,kouakepn,345241734,kouakepn/terraform,"""refs/heads/main""",,,6658191711,1,1,"[{""sha"":""97ca49eb35ca9574e5e99c0e366ab86d62e49193"",""author"":{""name"":""Gislaine"",""email"":""964722245a4626a8bd82b7e980905add9872b07b@yahoo.fr""},""message"":""terraform"",""distinct"":true,""url"":""https://api.github.com/repos/kouakepn/terraform/commits/97ca49eb35ca9574e5e99c0e366ab86d62e49193""}]",,,,,,,,,,
15434327500,PushEvent,true,2021-03-07 02:40:36.000000 UTC,72196131,RichardScottOZ,345242603,RichardScottOZ/scikit-learn,"""refs/heads/patch-1""",,,6658171797,1,1,"[{""sha"":""2e1fb9169355bda6c1503f180cb4824726daf43c"",""author"":{""name"":""RichardScottOZ"",""email"":""692992d3c21418ff3c357ad9583d54643054d025@users.noreply.github.com""},""message"":""Update _kmeans.py\n\nCompatibility typo"",""distinct"":true,""url"":""https://api.github.com/repos/RichardScottOZ/scikit-learn/commits/2e1fb9169355bda6c1503f180cb4824726daf43c""}]",,,,,,,,,,
15434229416,PushEvent,true,2021-03-07 02:05:28.000000 UTC,79403380,madangtrus,340886467,madangtrus/tensorflow,"""refs/heads/circleci-project-setup""",,,6658108194,1,1,"[{""sha"":""c099a22eaca7468b6f8d61d419e03e8020e01dc3"",""author"":{""name"":""madangtrus"",""email"":""f73ebb3595da7ae0f313b978d4f8d8e43909a83b@users.noreply.github.com""},""message"":""Add .circleci/config.yml"",""distinct"":true,""url"":""https://api.github.com/repos/madangtrus/tensorflow/commits/c099a22eaca7468b6f8d61d419e03e8020e01dc3""}]",,,,,,,,,,
15434229637,WatchEvent,true,2021-03-07 02:05:33.000000 UTC,14153399,GoNorth,4710920,apache/dubbo,,,,,,,,"""started""",,,,,,,,,
15434248796,IssueCommentEvent,true,2021-03-07 02:12:15.000000 UTC,16916670,cbaker,10270250,facebook/react,,,,,,,,"""created""",,,,,,,,,
15434289040,WatchEvent,true,2021-03-07 02:26:47.000000 UTC,17072333,LeQuint,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15434220332,WatchEvent,true,2021-03-07 02:02:18.000000 UTC,39639167,kelvinlam07071990,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15434305813,ForkEvent,true,2021-03-07 02:32:43.000000 UTC,44863878,zhourengui,10270250,facebook/react,,,,,,,,,,"""zhourengui/react""",,,,,,,
15434305822,WatchEvent,true,2021-03-07 02:32:44.000000 UTC,44863878,zhourengui,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15434349764,WatchEvent,true,2021-03-07 02:48:42.000000 UTC,48249505,SeojinSeojin,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15434266712,WatchEvent,true,2021-03-07 02:18:42.000000 UTC,54359257,sohhamm,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15434378206,ForkEvent,true,2021-03-07 02:59:07.000000 UTC,80184700,WebDevCPP,10270250,facebook/react,,,,,,,,,,"""WebDevCPP/react""",,,,,,,
15434329526,PullRequestEvent,true,2021-03-07 02:41:20.000000 UTC,19911444,swarupsrini,843222,scikit-learn/scikit-learn,,,,,,,,"""opened""",19635,,,,,,,,
15434333726,PullRequestEvent,true,2021-03-07 02:42:56.000000 UTC,19911444,swarupsrini,843222,scikit-learn/scikit-learn,,,,,,,,"""closed""",19635,,,,,,,,
15434322363,ForkEvent,true,2021-03-07 02:38:44.000000 UTC,72196131,RichardScottOZ,843222,scikit-learn/scikit-learn,,,,,,,,,,"""RichardScottOZ/scikit-learn""",,,,,,,
15434328135,PullRequestEvent,true,2021-03-07 02:40:49.000000 UTC,72196131,RichardScottOZ,843222,scikit-learn/scikit-learn,,,,,,,,"""opened""",19634,,,,,,,,
15434366858,WatchEvent,true,2021-03-07 02:54:59.000000 UTC,20571,dirceup,17728164,hashicorp/terraform,,,,,,,,"""started""",,,,,,,,,
15434320627,WatchEvent,true,2021-03-07 02:38:05.000000 UTC,22040348,chandoo1986,17728164,hashicorp/terraform,,,,,,,,"""started""",,,,,,,,,
15434356865,WatchEvent,true,2021-03-07 02:51:18.000000 UTC,25860291,leavesnight,5108051,opencv/opencv,,,,,,,,"""started""",,,,,,,,,
15434357038,ForkEvent,true,2021-03-07 02:51:23.000000 UTC,25860291,leavesnight,5108051,opencv/opencv,,,,,,,,,,"""leavesnight/opencv""",,,,,,,
15434367387,PullRequestReviewEvent,true,2021-03-07 02:55:08.000000 UTC,1309817,yyoon,45717250,tensorflow/tensorflow,,,,,,,,"""created""",47605,,,"""changes_requested""","""MEMBER""",,,,
15434362740,IssueCommentEvent,true,2021-03-07 02:53:30.000000 UTC,3395998,freedomtan,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15434323391,WatchEvent,true,2021-03-07 02:39:07.000000 UTC,42903383,winsonrich,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15434288566,WatchEvent,true,2021-03-07 02:26:37.000000 UTC,80164235,9SIR,7691631,moby/moby,,,,,,,,"""started""",,,,,,,,,
15434282251,WatchEvent,true,2021-03-07 02:24:20.000000 UTC,8212881,rp4rk,135786093,typescript-cheatsheets/react,,,,,,,,"""started""",,,,,,,,,
15434279592,WatchEvent,true,2021-03-07 02:23:22.000000 UTC,62035389,CaioAugustoo,135786093,typescript-cheatsheets/react,,,,,,,,"""started""",,,,,,,,,
15434302296,PushEvent,true,2021-03-07 02:31:28.000000 UTC,1736354,Yikun,313282941,Ascend/tensorflow,"""refs/heads/master""",,,6658155350,7,7,"[{""sha"":""0b4319f9c38763994814b54ea4de108d75d1b8bf"",""author"":{""name"":""lilianlin"",""email"":""4c898daf7ecbe82a3aa6020246e02004ddef0156@huawei.com""},""message"":""[fix]modify HcomReduceScatter and HcomAllGather op's infershape to support unknown shape."",""distinct"":true,""url"":""https://api.github.com/repos/Ascend/tensorflow/commits/0b4319f9c38763994814b54ea4de108d75d1b8bf""},{""sha"":""cdc086793b21922277571f27fc58df4e969528b4"",""author"":{""name"":""lilianlin"",""email"":""4c898daf7ecbe82a3aa6020246e02004ddef0156@huawei.com""},""message"":""[fix]modify HcomReduceScatter and HcomAllGather op's infershape to support unknown shape"",""distinct"":true,""url"":""https://api.github.com/repos/Ascend/tensorflow/commits/cdc086793b21922277571f27fc58df4e969528b4""},{""sha"":""724ea96d6a6a5bcad4eef165e0f6f2a9fccbf7a9"",""author"":{""name"":""huanruizhi"",""email"":""7cb0653cd943f8a06afc649449cf0f4104b0028d@hisilicon.com""},""message"":""cmetrics"",""distinct"":true,""url"":""https://api.github.com/repos/Ascend/tensorflow/commits/724ea96d6a6a5bcad4eef165e0f6f2a9fccbf7a9""},{""sha"":""eaaaacac4094f443cc8f30c192417b8f2e649438"",""author"":{""name"":""huanruizhi"",""email"":""7cb0653cd943f8a06afc649449cf0f4104b0028d@hisilicon.com""},""message"":""keras and hvd config"",""distinct"":true,""url"":""https://api.github.com/repos/Ascend/tensorflow/commits/eaaaacac4094f443cc8f30c192417b8f2e649438""},{""sha"":""4e5dff8c5434bc468e94a693f962710107027d60"",""author"":{""name"":""i-robot"",""email"":""80a2adccff32164ff3e811ce2bba677a8a754d9c@163.com""},""message"":""!258 迁移工具hvd网络以及keras网络添加npu配置项\nMerge pull request !258 from 宦睿智/master"",""distinct"":true,""url"":""https://api.github.com/repos/Ascend/tensorflow/commits/4e5dff8c5434bc468e94a693f962710107027d60""},{""sha"":""ca693c4dda2078a631e33762ff5a5046f127b96d"",""author"":{""name"":""i-robot"",""email"":""80a2adccff32164ff3e811ce2bba677a8a754d9c@163.com""},""message"":""!262 静态检查修改\nMerge pull request !262 from 宦睿智/dev"",""distinct"":true,""url"":""https://api.github.com/repos/Ascend/tensorflow/commits/ca693c4dda2078a631e33762ff5a5046f127b96d""},{""sha"":""0155a7774cfbf9e7530bb209dacc04271514ab94"",""author"":{""name"":""i-robot"",""email"":""80a2adccff32164ff3e811ce2bba677a8a754d9c@163.com""},""message"":""!259  [fix]modify HcomReduceScatter and HcomAllGather op's infershape to support unknown shape.\nMerge pull request !259 from lilianlin/master"",""distinct"":true,""url"":""https://api.github.com/repos/Ascend/tensorflow/commits/0155a7774cfbf9e7530bb209dacc04271514ab94""}]",,,,,,,,,,
15434835858,CreateEvent,true,2021-03-07 05:38:55.000000 UTC,3624098,acdlite,45281256,acdlite/react,"""suspenselist-bugfix""","""branch""","""user""",,,,,,,,,,,,,,
15434839495,PullRequestEvent,true,2021-03-07 05:40:12.000000 UTC,3624098,acdlite,10270250,facebook/react,,,,,,,,"""opened""",20948,,,,,,,,
15434841358,PullRequestReviewEvent,true,2021-03-07 05:40:51.000000 UTC,3624098,acdlite,10270250,facebook/react,,,,,,,,"""created""",20942,,,"""commented""","""MEMBER""",,,,
15434869067,PullRequestReviewEvent,true,2021-03-07 05:51:06.000000 UTC,3624098,acdlite,10270250,facebook/react,,,,,,,,"""created""",20890,,,"""commented""","""MEMBER""",,,,
15434841362,PullRequestReviewCommentEvent,true,2021-03-07 05:40:51.000000 UTC,3624098,acdlite,10270250,facebook/react,,,,,,,,"""created""",20942,,,,,,,,
15434869074,PullRequestReviewCommentEvent,true,2021-03-07 05:51:05.000000 UTC,3624098,acdlite,10270250,facebook/react,,,,,,,,"""created""",20890,,,,,,,,
15434711861,WatchEvent,true,2021-03-07 05:01:21.000000 UTC,7417274,ethanjkessler,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15434713011,WatchEvent,true,2021-03-07 05:01:47.000000 UTC,7417274,ethanjkessler,843222,scikit-learn/scikit-learn,,,,,,,,"""started""",,,,,,,,,
15434857916,PullRequestEvent,true,2021-03-07 05:46:56.000000 UTC,12539730,xiaoheng1,4710920,apache/dubbo,,,,,,,,"""opened""",7334,,,,,,,,
15434854852,WatchEvent,true,2021-03-07 05:45:49.000000 UTC,17072333,LeQuint,17728164,hashicorp/terraform,,,,,,,,"""started""",,,,,,,,,
15434716282,CreateEvent,true,2021-03-07 05:02:51.000000 UTC,18180859,kevinlang,345259208,kevinlang/phoenix,"""tailwinds""","""branch""","""user""",,,,,,,,,,,,,,
15434712345,PullRequestEvent,true,2021-03-07 05:01:33.000000 UTC,18180859,kevinlang,345259208,kevinlang/phoenix,,,,,,,,"""opened""",1,,,,,,,,
15434769523,IssueCommentEvent,true,2021-03-07 05:18:27.000000 UTC,18180859,kevinlang,16072585,phoenixframework/phoenix,,,,,,,,"""created""",,,,,,,,,
15434731548,WatchEvent,true,2021-03-07 05:08:04.000000 UTC,18697559,SameerManjrekar,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15434861655,IssuesEvent,true,2021-03-07 05:48:20.000000 UTC,21212505,tjysdsg,843222,scikit-learn/scikit-learn,,,,,,,,"""opened""",,,,,,,,,
15434727002,WatchEvent,true,2021-03-07 05:06:29.000000 UTC,26681768,lvwenhao2017,5108051,opencv/opencv,,,,,,,,"""started""",,,,,,,,,
15434850570,PushEvent,true,2021-03-07 05:44:21.000000 UTC,31196226,kevinw66,324349848,kevinw66/dubbo,"""refs/heads/3.0""",,,6658500839,4,4,"[{""sha"":""2c51f683a8537f0408c1b297a8f8758d83ff1475"",""author"":{""name"":""GuoHao"",""email"":""067abb41da1be0af1b794eb4671f67e9cd7f560e@gmail.com""},""message"":""Fix first connect failed (#7306)"",""distinct"":true,""url"":""https://api.github.com/repos/kevinw66/dubbo/commits/2c51f683a8537f0408c1b297a8f8758d83ff1475""},{""sha"":""346cd716d3672d8a192ca1002a6ac596f9e9070d"",""author"":{""name"":""GuoHao"",""email"":""067abb41da1be0af1b794eb4671f67e9cd7f560e@gmail.com""},""message"":""Fix codestyle (#7307)"",""distinct"":true,""url"":""https://api.github.com/repos/kevinw66/dubbo/commits/346cd716d3672d8a192ca1002a6ac596f9e9070d""},{""sha"":""f6a24f770ae9be1d89a6fafcc2f096df77d33138"",""author"":{""name"":""ken.lj"",""email"":""822a448a2ec5862faf82fc0d0933a9bdefde0f49@gmail.com""},""message"":""fix attachments override (#7311)"",""distinct"":true,""url"":""https://api.github.com/repos/kevinw66/dubbo/commits/f6a24f770ae9be1d89a6fafcc2f096df77d33138""},{""sha"":""8c24a48d56ad5011ad596b7e27606bf680909b2b"",""author"":{""name"":""GuoHao"",""email"":""067abb41da1be0af1b794eb4671f67e9cd7f560e@gmail.com""},""message"":""Fix reconnect bug (#7329)"",""distinct"":true,""url"":""https://api.github.com/repos/kevinw66/dubbo/commits/8c24a48d56ad5011ad596b7e27606bf680909b2b""}]",,,,,,,,,,
15434745336,ForkEvent,true,2021-03-07 05:12:15.000000 UTC,31699402,fightingting,4710920,apache/dubbo,,,,,,,,,,"""fightingting/dubbo""",,,,,,,
15434851015,PushEvent,true,2021-03-07 05:44:31.000000 UTC,32109466,justkw,78224733,Intel-tensorflow/tensorflow,"""refs/heads/master""",,,6658501151,43,43,"[{""sha"":""df0f5b91367599903113e9950628eb824e71b71d"",""author"":{""name"":""ddavis-2015"",""email"":""5b8653757017bd3cc7e685baf14c87ba905cb88d@xtech.com""},""message"":""micro: port operator LEAKY_RELU kernel from lite with test\n\nComplete implementation of TFLM operator LEAKY_RELU and associated TFLM test code.\n\nPR step 5 of the work to port operator LEAKY_RELU as tracked in Issue #46161"",""distinct"":true,""url"":""https://api.github.com/repos/Intel-tensorflow/tensorflow/commits/df0f5b91367599903113e9950628eb824e71b71d""},{""sha"":""b5633e6b5f78a897bb04fec5f20c2fc6c51f8752"",""author"":{""name"":""ddavis-2015"",""email"":""5b8653757017bd3cc7e685baf14c87ba905cb88d@bdti.com""},""message"":""micro: prepare to port operator ADD_N kernel from lite with test\n\nImplement skeleton (non-working) code for operator and test.\nHeader files changed.\nNamespaces changed.\nSome original code deleted.\nSome original code modified.\n\nPR step 4 of the work to port operator ADD_N as tracked in Issue #46162"",""distinct"":true,""url"":""https://api.github.com/repos/Intel-tensorflow/tensorflow/commits/b5633e6b5f78a897bb04fec5f20c2fc6c51f8752""},{""sha"":""8c159004d48d1a5cf636467261adda3ff2ae4d34"",""author"":{""name"":""ddavis-2015"",""email"":""5b8653757017bd3cc7e685baf14c87ba905cb88d@bdti.com""},""message"":""Merge branch 'master' into LeakyRelu-pr5"",""distinct"":true,""url"":""https://api.github.com/repos/Intel-tensorflow/tensorflow/commits/8c159004d48d1a5cf636467261adda3ff2ae4d34""},{""sha"":""d267a0605b7beacec0ed7993c103fb2ddb357509"",""author"":{""name"":""ddavis-2015"",""email"":""5b8653757017bd3cc7e685baf14c87ba905cb88d@bdti.com""},""message"":""fix review issues\n\nFlatten namespace\nReorder input/output parameters\nExplicit int/int32_t and float/double conversions"",""distinct"":true,""url"":""https://api.github.com/repos/Intel-tensorflow/tensorflow/commits/d267a0605b7beacec0ed7993c103fb2ddb357509""},{""sha"":""991a10e2f9f4074a3e046889ef30f457c4b9ad7f"",""author"":{""name"":""ddavis-2015"",""email"":""5b8653757017bd3cc7e685baf14c87ba905cb88d@bdti.com""},""message"":""Support only float32/int8"",""distinct"":true,""url"":""https://api.github.com/repos/Intel-tensorflow/tensorflow/commits/991a10e2f9f4074a3e046889ef30f457c4b9ad7f""},{""sha"":""63ff05067602c2b310316b38338b09d8ff660b8e"",""author"":{""name"":""Lukas Geiger"",""email"":""c177b3022030a594aa53debfd3a1bd597e06810a@gmail.com""},""message"":""Simplify Huber Loss implementation"",""distinct"":true,""url"":""https://api.github.com/repos/Intel-tensorflow/tensorflow/commits/63ff05067602c2b310316b38338b09d8ff660b8e""},{""sha"":""98193865046df6247f1a471cb9ac2d99ee2c95a9"",""author"":{""name"":""ddavis-2015"",""email"":""5b8653757017bd3cc7e685baf14c87ba905cb88d@bdti.com""},""message"":""add LEAKY_RELU to AllOpsResolver"",""distinct"":true,""url"":""https://api.github.com/repos/Intel-tensorflow/tensorflow/commits/98193865046df6247f1a471cb9ac2d99ee2c95a9""},{""sha"":""fa8a64fb519884216ed149d9ad98bc6611d21f37"",""author"":{""name"":""ddavis-2015"",""email"":""5b8653757017bd3cc7e685baf14c87ba905cb88d@bdti.com""},""message"":""restore break statement to end of case block"",""distinct"":true,""url"":""https://api.github.com/repos/Intel-tensorflow/tensorflow/commits/fa8a64fb519884216ed149d9ad98bc6611d21f37""},{""sha"":""22ea2bb67ee242aae514044004855a2dd17531be"",""author"":{""name"":""ddavis-2015"",""email"":""5b8653757017bd3cc7e685baf14c87ba905cb88d@bdti.com""},""message"":""Merge branch 'master' into LeakyRelu-pr5"",""distinct"":true,""url"":""https://api.github.com/repos/Intel-tensorflow/tensorflow/commits/22ea2bb67ee242aae514044004855a2dd17531be""},{""sha"":""ee17ca806db95fff7fbf4d774b43ec42f3d9b6c3"",""author"":{""name"":""ddavis-2015"",""email"":""5b8653757017bd3cc7e685baf14c87ba905cb88d@bdti.com""},""message"":""Merge branch 'master' into LeakyRelu-pr5"",""distinct"":true,""url"":""https://api.github.com/repos/Intel-tensorflow/tensorflow/commits/ee17ca806db95fff7fbf4d774b43ec42f3d9b6c3""},{""sha"":""66a300939111fefc8b6885d0decd67f3e4a96403"",""author"":{""name"":""Tzu-Wei Sung"",""email"":""f316c63976b7dfc02c6169d1441ce0da0786fcb6@gmail.com""},""message"":""Optimize ArgMinMax for float when axis=dims-1.\n\nBenchmark on argmax of 1-D float32 tensor on Pixel 3a android 11:\n\n| Size   | Reference (min/max/avg microsecs) | Optimized (min/max/avg microsecs) |\n| ------ | --------------------------------- | --------------------------------- |\n| 10     | 0/63/0.260737                     | 0/49/0.216432                     |\n| 100    | 1/101/1.17919                     | 0/77/0.271518                     |\n| 1000   | 9/98/9.80665                      | 0/65/1.07653                      |\n| 10000  | 95/190/96.2557                    | 8/110/9.63559                     |\n| 100000 | 952/1102/967.445                  | 88/215/94.8766                    |"",""distinct"":true,""url"":""https://api.github.com/repos/Intel-tensorflow/tensorflow/commits/66a300939111fefc8b6885d0decd67f3e4a96403""},{""sha"":""c9228ceab968d79a8b1162bcbbf3abcfb7b6e199"",""author"":{""name"":""Tzu-Wei Sung"",""email"":""f316c63976b7dfc02c6169d1441ce0da0786fcb6@gmail.com""},""message"":""Change condition from < size - 3 to <= size - 4, which follows the same rules in the file."",""distinct"":true,""url"":""https://api.github.com/repos/Intel-tensorflow/tensorflow/commits/c9228ceab968d79a8b1162bcbbf3abcfb7b6e199""},{""sha"":""81ac18a42b476b555f2f084f8559044c2571df4f"",""author"":{""name"":""Tzu-Wei Sung"",""email"":""f316c63976b7dfc02c6169d1441ce0da0786fcb6@gmail.com""},""message"":""Fix TFLite micro build."",""distinct"":true,""url"":""https://api.github.com/repos/Intel-tensorflow/tensorflow/commits/81ac18a42b476b555f2f084f8559044c2571df4f""},{""sha"":""f93aeb46b424b47a62fdc786e94c9cbd5504291d"",""author"":{""name"":""Tzu-Wei Sung"",""email"":""f316c63976b7dfc02c6169d1441ce0da0786fcb6@gmail.com""},""message"":""Add more tests about axis=dims-1. Iterate from 1 to 10 to ensure edge cases are correct."",""distinct"":true,""url"":""https://api.github.com/repos/Intel-tensorflow/tensorflow/commits/f93aeb46b424b47a62fdc786e94c9cbd5504291d""},{""sha"":""3d9e1e7047223fe64eb5227a2c11df760de77ae9"",""author"":{""name"":""Tzu-Wei Sung"",""email"":""f316c63976b7dfc02c6169d1441ce0da0786fcb6@gmail.com""},""message"":""NIT: Pass return value directly"",""distinct"":true,""url"":""https://api.github.com/repos/Intel-tensorflow/tensorflow/commits/3d9e1e7047223fe64eb5227a2c11df760de77ae9""},{""sha"":""25cdd92881ca1d14e06d99662641ff35e7e95097"",""author"":{""name"":""Tzu-Wei Sung"",""email"":""f316c63976b7dfc02c6169d1441ce0da0786fcb6@gmail.com""},""message"":""Move preprocessors and comment"",""distinct"":true,""url"":""https://api.github.com/repos/Intel-tensorflow/tensorflow/commits/25cdd92881ca1d14e06d99662641ff35e7e95097""},{""sha"":""d6a98ae45afa6959bff543692d89bcf754113fc2"",""author"":{""name"":""Tzu-Wei Sung"",""email"":""f316c63976b7dfc02c6169d1441ce0da0786fcb6@gmail.com""},""message"":""Add last axis tests in python as well"",""distinct"":true,""url"":""https://api.github.com/repos/Intel-tensorflow/tensorflow/commits/d6a98ae45afa6959bff543692d89bcf754113fc2""},{""sha"":""7b0a2565b02c5896d1e82953c4c751c1531af0c5"",""author"":{""name"":""Tzu-Wei Sung"",""email"":""f316c63976b7dfc02c6169d1441ce0da0786fcb6@gmail.com""},""message"":""Extract axis from parameters"",""distinct"":true,""url"":""https://api.github.com/repos/Intel-tensorflow/tensorflow/commits/7b0a2565b02c5896d1e82953c4c751c1531af0c5""},{""sha"":""4b26d8e3ff869f21dde80958d2d97107df8de526"",""author"":{""name"":""Tzu-Wei Sung"",""email"":""f316c63976b7dfc02c6169d1441ce0da0786fcb6@gmail.com""},""message"":""Rename n to size for consistency"",""distinct"":true,""url"":""https://api.github.com/repos/Intel-tensorflow/tensorflow/commits/4b26d8e3ff869f21dde80958d2d97107df8de526""},{""sha"":""9f9e52b94f33033e6074b1c3a56c115c311c1bff"",""author"":{""name"":""Tzu-Wei Sung"",""email"":""f316c63976b7dfc02c6169d1441ce0da0786fcb6@gmail.com""},""message"":""Resolve conflicts in legacy_optimized_ops"",""distinct"":true,""url"":""https://api.github.com/repos/Intel-tensorflow/tensorflow/commits/9f9e52b94f33033e6074b1c3a56c115c311c1bff""}]",,,,,,,,,,
15434710162,WatchEvent,true,2021-03-07 05:00:46.000000 UTC,39365143,boorah,135786093,typescript-cheatsheets/react,,,,,,,,"""started""",,,,,,,,,
15434867314,PullRequestEvent,true,2021-03-07 05:50:30.000000 UTC,39814207,pull[bot],211211919,Mu-L/tensorflow,,,,,,,,"""opened""",1253,,,,,,,,
15434867760,PushEvent,true,2021-03-07 05:50:39.000000 UTC,39814207,pull[bot],211211919,Mu-L/tensorflow,"""refs/heads/master""",,,6658511959,1,1,"[{""sha"":""fb7d34de0a7a892d070104aa4e385159817e7ef5"",""author"":{""name"":""Smit Hinsu"",""email"":""0f9dce5f2da36d8473ff9a50fbb0e06a148c5fae@google.com""},""message"":""Add prepare-tpu-computation-for-tf-export pass\n\nThis pass transforms the MLIR module attached to _TpuCompileMlir op to be legal for export to TensorFlow GraphDef. Currently, this pass handles mhlo.sharding attribute on function attributes by passing them through TF XlaSharding ops and dropping tf.aliasing_output attribute.\n\nThis will be used for using the old tf2xla bridge for second phase of the compilation.\n\nPiperOrigin-RevId: 361378341\nChange-Id: Id418212e65f5d177bc4bb8c279824ef8bfc2add2"",""distinct"":true,""url"":""https://api.github.com/repos/Mu-L/tensorflow/commits/fb7d34de0a7a892d070104aa4e385159817e7ef5""}]",,,,,,,,,,
15434867777,PullRequestEvent,true,2021-03-07 05:50:39.000000 UTC,39814207,pull[bot],211211919,Mu-L/tensorflow,,,,,,,,"""closed""",1253,,,,,,,,
15434810021,PushEvent,true,2021-03-07 05:30:05.000000 UTC,39814207,pull[bot],206156535,icpm/tensorflow,"""refs/heads/master""",,,6658475231,1,1,"[{""sha"":""fb7d34de0a7a892d070104aa4e385159817e7ef5"",""author"":{""name"":""Smit Hinsu"",""email"":""0f9dce5f2da36d8473ff9a50fbb0e06a148c5fae@google.com""},""message"":""Add prepare-tpu-computation-for-tf-export pass\n\nThis pass transforms the MLIR module attached to _TpuCompileMlir op to be legal for export to TensorFlow GraphDef. Currently, this pass handles mhlo.sharding attribute on function attributes by passing them through TF XlaSharding ops and dropping tf.aliasing_output attribute.\n\nThis will be used for using the old tf2xla bridge for second phase of the compilation.\n\nPiperOrigin-RevId: 361378341\nChange-Id: Id418212e65f5d177bc4bb8c279824ef8bfc2add2"",""distinct"":true,""url"":""https://api.github.com/repos/icpm/tensorflow/commits/fb7d34de0a7a892d070104aa4e385159817e7ef5""}]",,,,,,,,,,
15434808502,PullRequestEvent,true,2021-03-07 05:29:35.000000 UTC,39814207,pull[bot],206156535,icpm/tensorflow,,,,,,,,"""opened""",4893,,,,,,,,
15434810050,PullRequestEvent,true,2021-03-07 05:30:05.000000 UTC,39814207,pull[bot],206156535,icpm/tensorflow,,,,,,,,"""closed""",4893,,,,,,,,
15434807774,PullRequestEvent,true,2021-03-07 05:29:19.000000 UTC,39814207,pull[bot],164577447,osmaelo/tensorflow,,,,,,,,"""closed""",5124,,,,,,,,
15434806167,PullRequestEvent,true,2021-03-07 05:28:46.000000 UTC,39814207,pull[bot],164577447,osmaelo/tensorflow,,,,,,,,"""opened""",5124,,,,,,,,
15434807742,PushEvent,true,2021-03-07 05:29:18.000000 UTC,39814207,pull[bot],164577447,osmaelo/tensorflow,"""refs/heads/master""",,,6658473835,1,1,"[{""sha"":""fb7d34de0a7a892d070104aa4e385159817e7ef5"",""author"":{""name"":""Smit Hinsu"",""email"":""0f9dce5f2da36d8473ff9a50fbb0e06a148c5fae@google.com""},""message"":""Add prepare-tpu-computation-for-tf-export pass\n\nThis pass transforms the MLIR module attached to _TpuCompileMlir op to be legal for export to TensorFlow GraphDef. Currently, this pass handles mhlo.sharding attribute on function attributes by passing them through TF XlaSharding ops and dropping tf.aliasing_output attribute.\n\nThis will be used for using the old tf2xla bridge for second phase of the compilation.\n\nPiperOrigin-RevId: 361378341\nChange-Id: Id418212e65f5d177bc4bb8c279824ef8bfc2add2"",""distinct"":true,""url"":""https://api.github.com/repos/osmaelo/tensorflow/commits/fb7d34de0a7a892d070104aa4e385159817e7ef5""}]",,,,,,,,,,
15434817749,PullRequestEvent,true,2021-03-07 05:32:29.000000 UTC,39814207,pull[bot],159132812,mark0725/tensorflow,,,,,,,,"""opened""",8180,,,,,,,,
15434819267,PullRequestEvent,true,2021-03-07 05:32:59.000000 UTC,39814207,pull[bot],159132812,mark0725/tensorflow,,,,,,,,"""closed""",8180,,,,,,,,
15434819244,PushEvent,true,2021-03-07 05:32:58.000000 UTC,39814207,pull[bot],159132812,mark0725/tensorflow,"""refs/heads/master""",,,6658480756,1,1,"[{""sha"":""fb7d34de0a7a892d070104aa4e385159817e7ef5"",""author"":{""name"":""Smit Hinsu"",""email"":""0f9dce5f2da36d8473ff9a50fbb0e06a148c5fae@google.com""},""message"":""Add prepare-tpu-computation-for-tf-export pass\n\nThis pass transforms the MLIR module attached to _TpuCompileMlir op to be legal for export to TensorFlow GraphDef. Currently, this pass handles mhlo.sharding attribute on function attributes by passing them through TF XlaSharding ops and dropping tf.aliasing_output attribute.\n\nThis will be used for using the old tf2xla bridge for second phase of the compilation.\n\nPiperOrigin-RevId: 361378341\nChange-Id: Id418212e65f5d177bc4bb8c279824ef8bfc2add2"",""distinct"":true,""url"":""https://api.github.com/repos/mark0725/tensorflow/commits/fb7d34de0a7a892d070104aa4e385159817e7ef5""}]",,,,,,,,,,
15434890936,PushEvent,true,2021-03-07 05:59:10.000000 UTC,39814207,pull[bot],209611938,Alan-love/tensorflow,"""refs/heads/master""",,,6658527037,1,1,"[{""sha"":""fb7d34de0a7a892d070104aa4e385159817e7ef5"",""author"":{""name"":""Smit Hinsu"",""email"":""0f9dce5f2da36d8473ff9a50fbb0e06a148c5fae@google.com""},""message"":""Add prepare-tpu-computation-for-tf-export pass\n\nThis pass transforms the MLIR module attached to _TpuCompileMlir op to be legal for export to TensorFlow GraphDef. Currently, this pass handles mhlo.sharding attribute on function attributes by passing them through TF XlaSharding ops and dropping tf.aliasing_output attribute.\n\nThis will be used for using the old tf2xla bridge for second phase of the compilation.\n\nPiperOrigin-RevId: 361378341\nChange-Id: Id418212e65f5d177bc4bb8c279824ef8bfc2add2"",""distinct"":true,""url"":""https://api.github.com/repos/Alan-love/tensorflow/commits/fb7d34de0a7a892d070104aa4e385159817e7ef5""}]",,,,,,,,,,
15434889909,PullRequestEvent,true,2021-03-07 05:58:47.000000 UTC,39814207,pull[bot],209611938,Alan-love/tensorflow,,,,,,,,"""opened""",1434,,,,,,,,
15434890963,PullRequestEvent,true,2021-03-07 05:59:11.000000 UTC,39814207,pull[bot],209611938,Alan-love/tensorflow,,,,,,,,"""closed""",1434,,,,,,,,
15434873037,PullRequestEvent,true,2021-03-07 05:52:35.000000 UTC,39814207,pull[bot],157488097,greedisgoood/tensorflow,,,,,,,,"""opened""",402,,,,,,,,
15434873865,PushEvent,true,2021-03-07 05:52:53.000000 UTC,39814207,pull[bot],157488097,greedisgoood/tensorflow,"""refs/heads/master""",,,6658515905,1,1,"[{""sha"":""fb7d34de0a7a892d070104aa4e385159817e7ef5"",""author"":{""name"":""Smit Hinsu"",""email"":""0f9dce5f2da36d8473ff9a50fbb0e06a148c5fae@google.com""},""message"":""Add prepare-tpu-computation-for-tf-export pass\n\nThis pass transforms the MLIR module attached to _TpuCompileMlir op to be legal for export to TensorFlow GraphDef. Currently, this pass handles mhlo.sharding attribute on function attributes by passing them through TF XlaSharding ops and dropping tf.aliasing_output attribute.\n\nThis will be used for using the old tf2xla bridge for second phase of the compilation.\n\nPiperOrigin-RevId: 361378341\nChange-Id: Id418212e65f5d177bc4bb8c279824ef8bfc2add2"",""distinct"":true,""url"":""https://api.github.com/repos/greedisgoood/tensorflow/commits/fb7d34de0a7a892d070104aa4e385159817e7ef5""}]",,,,,,,,,,
15434873893,PullRequestEvent,true,2021-03-07 05:52:54.000000 UTC,39814207,pull[bot],157488097,greedisgoood/tensorflow,,,,,,,,"""closed""",402,,,,,,,,
15434849475,IssueCommentEvent,true,2021-03-07 05:43:57.000000 UTC,43185848,sizebot,10270250,facebook/react,,,,,,,,"""created""",,,,,,,,,
15434892037,PushEvent,true,2021-03-07 05:59:35.000000 UTC,48468739,texasroh,321565479,texasroh/tensorflow,"""refs/heads/master""",,,6658527746,1,1,"[{""sha"":""6922bdd2c981ca5208b6169d83c879cec504fd1b"",""author"":{""name"":""June Roh"",""email"":""2614f47b5590941517e809712b4aca0964120c78@streetsmarket.com""},""message"":""Generative - adversarial_fgsm"",""distinct"":true,""url"":""https://api.github.com/repos/texasroh/tensorflow/commits/6922bdd2c981ca5208b6169d83c879cec504fd1b""}]",,,,,,,,,,
15434845120,IssuesEvent,true,2021-03-07 05:42:17.000000 UTC,51634013,LucasColas,45717250,tensorflow/tensorflow,,,,,,,,"""opened""",,,,,,,,,
15434717371,PushEvent,true,2021-03-07 05:03:12.000000 UTC,55107598,shethsh1,337231539,shethsh1/scikit-learn,"""refs/heads/main""",,,6658422547,1,1,"[{""sha"":""ac1f27450ef7ee0f2c2012e7362c0058aebd79a3"",""author"":{""name"":""Shaahid Sheth"",""email"":""a32fd8ea27afc78a8eee86d9c8bf50d75f34301a@users.noreply.github.com""},""message"":""Added multiclass test cases"",""distinct"":true,""url"":""https://api.github.com/repos/shethsh1/scikit-learn/commits/ac1f27450ef7ee0f2c2012e7362c0058aebd79a3""}]",,,,,,,,,,
15434708318,PushEvent,true,2021-03-07 05:00:13.000000 UTC,55107598,shethsh1,337231539,shethsh1/scikit-learn,"""refs/heads/main""",,,6658416830,94,94,"[{""sha"":""819c43cc7a1d7efab855e982a91e15be7aec7db1"",""author"":{""name"":""Vlasovets"",""email"":""12647c8021bcdc795d4c0d87e4b9393f9987c6e3@mail.ru""},""message"":""DOC correct behavior of precompute with sparse input (#19348)"",""distinct"":true,""url"":""https://api.github.com/repos/shethsh1/scikit-learn/commits/819c43cc7a1d7efab855e982a91e15be7aec7db1""},{""sha"":""23d8761615d0417eef5f52cc796518e44d41ca2a"",""author"":{""name"":""Thomas J. Fan"",""email"":""5e8796a332fafc9c261437cd1787ae2709a896a7@gmail.com""},""message"":""ENH Checks n_features_in_ in discriminant_analysis (#19342)"",""distinct"":true,""url"":""https://api.github.com/repos/shethsh1/scikit-learn/commits/23d8761615d0417eef5f52cc796518e44d41ca2a""},{""sha"":""70534d67beb6a6c31e11662dc097f0bf5eb46d68"",""author"":{""name"":""Muhammad Jarir Kanji"",""email"":""ba436cd20f05214d5f605bb54671bcd55b411db1@users.noreply.github.com""},""message"":""FIX Add `with` context manager to open file from OpenML in test file (#19367)"",""distinct"":true,""url"":""https://api.github.com/repos/shethsh1/scikit-learn/commits/70534d67beb6a6c31e11662dc097f0bf5eb46d68""},{""sha"":""28fa8972d32cd84d65e55e1d401ebc090de28678"",""author"":{""name"":""EL-ATEIF Sara"",""email"":""16f26805baae4c0346d46488ebf512c418fc277d@gmail.com""},""message"":""DOC rename Birch to BIRCH in docs (#19368)"",""distinct"":true,""url"":""https://api.github.com/repos/shethsh1/scikit-learn/commits/28fa8972d32cd84d65e55e1d401ebc090de28678""},{""sha"":""a952fbb10e9be8ebe3ca2ff60bf458f51ab2a721"",""author"":{""name"":""Mohamed Haseeb"",""email"":""6b0d31c0d563223024da45691584643ac78c96e8@mohaseeb.com""},""message"":""MAINT Remove the use of assert_raises* in model_selection/tests/test_search (#19371)"",""distinct"":true,""url"":""https://api.github.com/repos/shethsh1/scikit-learn/commits/a952fbb10e9be8ebe3ca2ff60bf458f51ab2a721""},{""sha"":""80c47b01536a97f74a57d39ae4a7bb1645a98d91"",""author"":{""name"":""Amanda Dsouza"",""email"":""e075cd2e01c091ec9b7ff4be601cdf9ae9c6357c@yahoo.com""},""message"":""ENH Adds categories with missing values support to fetch_openml with as_frame=True (#19365)\n\n* MNT Fixes missing value loading into a dataframe from openml\r\n\r\n* FIX Include data files\r\n\r\n* DOC Adds whats new\r\n\r\n* REV Less diffs\r\n\r\n* DOC Uses docstring style comment in test\r\n\r\n* resolved conflict\r\n\r\n* resolve conflict in doc\r\n\r\nCo-authored-by: Thomas J. Fan <thomasjpfan@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/shethsh1/scikit-learn/commits/80c47b01536a97f74a57d39ae4a7bb1645a98d91""},{""sha"":""d6bd7bee8799ea41c456c36a8ccf7780105615e8"",""author"":{""name"":""Terence Honles"",""email"":""1a08d84b050968de913c859c1eecc9e54b677b4f@honles.com""},""message"":""MNT simplify pyproject.toml by using oldest-supported-numpy [cd build] (#18900)"",""distinct"":true,""url"":""https://api.github.com/repos/shethsh1/scikit-learn/commits/d6bd7bee8799ea41c456c36a8ccf7780105615e8""},{""sha"":""e230778f6f1f24de1aa694b52fa9411a1e5c3197"",""author"":{""name"":""Isaack Mungui"",""email"":""8bb90a8ce94394181c998882f6fe5f2146cfc190@users.noreply.github.com""},""message"":""TST replace assert_raises* by pytest.raises in dummy module (#19386)"",""distinct"":true,""url"":""https://api.github.com/repos/shethsh1/scikit-learn/commits/e230778f6f1f24de1aa694b52fa9411a1e5c3197""},{""sha"":""42200437822b370f3a07f3f01d6c75c5fc06502f"",""author"":{""name"":""Muhammad Jarir Kanji"",""email"":""ba436cd20f05214d5f605bb54671bcd55b411db1@users.noreply.github.com""},""message"":""TST Suppress multiple active versions of dataset warnings in `test_openml.py` (#19373)\n\nCo-authored-by: Olivier Grisel <olivier.grisel@ensta.org>"",""distinct"":true,""url"":""https://api.github.com/repos/shethsh1/scikit-learn/commits/42200437822b370f3a07f3f01d6c75c5fc06502f""},{""sha"":""bd67f12b07c3532436dc61d09a8461fba69ac7b4"",""author"":{""name"":""Isaack Mungui"",""email"":""8bb90a8ce94394181c998882f6fe5f2146cfc190@users.noreply.github.com""},""message"":""TST replace assert_raises with the pytest.raises context manager in dummy module (#19372)"",""distinct"":true,""url"":""https://api.github.com/repos/shethsh1/scikit-learn/commits/bd67f12b07c3532436dc61d09a8461fba69ac7b4""},{""sha"":""94337993ef1a29146c67d7e4a51e3053a79e92b7"",""author"":{""name"":""Ogbonna Chibuike Stephen"",""email"":""50172682c18a8de521f62cabfbccf34a31c0b6ce@gmail.com""},""message"":""EXA remove warning when setting yticks in permutation importances examples (#19385)"",""distinct"":true,""url"":""https://api.github.com/repos/shethsh1/scikit-learn/commits/94337993ef1a29146c67d7e4a51e3053a79e92b7""},{""sha"":""c20a309e16a007ce80c992b27c93706bf1f90a3f"",""author"":{""name"":""Jianzhu Guo"",""email"":""5673f661ca8d74531b10ec666f1d66b5e3034b7d@nlpr.ia.ac.cn""},""message"":""DOC fix a typo in _kmeans.py (#19398)"",""distinct"":true,""url"":""https://api.github.com/repos/shethsh1/scikit-learn/commits/c20a309e16a007ce80c992b27c93706bf1f90a3f""},{""sha"":""cf4909eb9206ca94f1e9ad5a0dcbba31dd2536b5"",""author"":{""name"":""Amanda Dsouza"",""email"":""e075cd2e01c091ec9b7ff4be601cdf9ae9c6357c@yahoo.com""},""message"":""DOC simplify SVM margin illustration by chaging plotting style (#19387)"",""distinct"":true,""url"":""https://api.github.com/repos/shethsh1/scikit-learn/commits/cf4909eb9206ca94f1e9ad5a0dcbba31dd2536b5""},{""sha"":""2be474be7fa8dd7fa1447ae8b8103f2b8ffacd5e"",""author"":{""name"":""Thomas J. Fan"",""email"":""5e8796a332fafc9c261437cd1787ae2709a896a7@gmail.com""},""message"":""DOC Documents n_features_in_ in cross_decomposition (#19351)"",""distinct"":true,""url"":""https://api.github.com/repos/shethsh1/scikit-learn/commits/2be474be7fa8dd7fa1447ae8b8103f2b8ffacd5e""},{""sha"":""920f2257bb0adc0344b398849d2653ef6e86f1d2"",""author"":{""name"":""Alihan Zihna"",""email"":""1d9bfb28eb3486e07d7f48604b9f449ddc9cc0e9@gmail.com""},""message"":""EXA improve example of forest feature importances (#19377)\n\nCo-authored-by: Alihan Zihna <a.zihna@ckhgbdp.onmicrosoft.com>\r\nCo-authored-by: Guillaume Lemaitre <g.lemaitre58@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/shethsh1/scikit-learn/commits/920f2257bb0adc0344b398849d2653ef6e86f1d2""},{""sha"":""7e197fd600b72483ff2343b8d2605368d1ab24bf"",""author"":{""name"":""Thomas J. Fan"",""email"":""5e8796a332fafc9c261437cd1787ae2709a896a7@gmail.com""},""message"":""ENH Adds n_features_in_ checking to feature_selection (#19344)"",""distinct"":true,""url"":""https://api.github.com/repos/shethsh1/scikit-learn/commits/7e197fd600b72483ff2343b8d2605368d1ab24bf""},{""sha"":""86bc6c9858dd1660f5762003a45733f50fc7a748"",""author"":{""name"":""Jérémie du Boisberranger"",""email"":""e3f2e912120bf2b3b91d0d3b53109753fb66c284@users.noreply.github.com""},""message"":""MNT specify main branch in asv config for the publish command (#19408)"",""distinct"":true,""url"":""https://api.github.com/repos/shethsh1/scikit-learn/commits/86bc6c9858dd1660f5762003a45733f50fc7a748""},{""sha"":""c3f647a6b2f9a9132eb39fdbfbd78995597f5c6c"",""author"":{""name"":""Mabu Manaileng"",""email"":""9b4f7510f351419554b273196f4a399189d51007@gmail.com""},""message"":""MNT Fix divide by zero error thrown by _random_choice_csc during a test run (#19383)"",""distinct"":true,""url"":""https://api.github.com/repos/shethsh1/scikit-learn/commits/c3f647a6b2f9a9132eb39fdbfbd78995597f5c6c""},{""sha"":""a870f4399d71ffbf7a89954487176c4c49e766a4"",""author"":{""name"":""CeeThinwa"",""email"":""67bd6a14ff0ab87bf7fe86c20c1f22d60c14e279@users.noreply.github.com""},""message"":""DOC clarify variance estimation in PCA implementation (#19378)\n\nCo-authored-by: Christian Lorentzen <lorentzen.ch@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/shethsh1/scikit-learn/commits/a870f4399d71ffbf7a89954487176c4c49e766a4""},{""sha"":""5403e9fdaee6d4982c887ce2ae9a62ccd3955fbb"",""author"":{""name"":""Julien Jerphanion"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@jjerphan.xyz""},""message"":""DOC Explicitly remove support for `precompute='auto'` for Lasso (#19412)"",""distinct"":true,""url"":""https://api.github.com/repos/shethsh1/scikit-learn/commits/5403e9fdaee6d4982c887ce2ae9a62ccd3955fbb""}]",,,,,,,,,,
15434713591,PushEvent,true,2021-03-07 05:01:59.000000 UTC,55107598,shethsh1,337231539,shethsh1/scikit-learn,"""refs/heads/main""",,,6658420259,1,1,"[{""sha"":""82326ed375896deea402ffe8785a9a5919acd93d"",""author"":{""name"":""Shaahid Sheth"",""email"":""a32fd8ea27afc78a8eee86d9c8bf50d75f34301a@users.noreply.github.com""},""message"":""Added Eric's multiclass bug fix"",""distinct"":true,""url"":""https://api.github.com/repos/shethsh1/scikit-learn/commits/82326ed375896deea402ffe8785a9a5919acd93d""}]",,,,,,,,,,
15434730740,PushEvent,true,2021-03-07 05:07:46.000000 UTC,55107598,shethsh1,337231539,shethsh1/scikit-learn,"""refs/heads/main""",,,6658430645,1,1,"[{""sha"":""2692ac97fbf173429c37ff79ce756c2282f383af"",""author"":{""name"":""Shaahid Sheth"",""email"":""a32fd8ea27afc78a8eee86d9c8bf50d75f34301a@users.noreply.github.com""},""message"":""Added Vithursan's bug fix for feature_extraction"",""distinct"":true,""url"":""https://api.github.com/repos/shethsh1/scikit-learn/commits/2692ac97fbf173429c37ff79ce756c2282f383af""}]",,,,,,,,,,
15434732666,PushEvent,true,2021-03-07 05:08:26.000000 UTC,55107598,shethsh1,337231539,shethsh1/scikit-learn,"""refs/heads/main""",,,6658431833,1,1,"[{""sha"":""f00644c9d63d68ca8ee18b94c2445f4c087dc010"",""author"":{""name"":""Shaahid Sheth"",""email"":""a32fd8ea27afc78a8eee86d9c8bf50d75f34301a@users.noreply.github.com""},""message"":""Added Rody's test case for feature_extraction"",""distinct"":true,""url"":""https://api.github.com/repos/shethsh1/scikit-learn/commits/f00644c9d63d68ca8ee18b94c2445f4c087dc010""}]",,,,,,,,,,
15434714602,WatchEvent,true,2021-03-07 05:02:18.000000 UTC,55303605,qq646678741,5108051,opencv/opencv,,,,,,,,"""started""",,,,,,,,,
15434859614,WatchEvent,true,2021-03-07 05:47:34.000000 UTC,58132831,moskalt,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15434795371,CreateEvent,true,2021-03-07 05:25:12.000000 UTC,66415869,squirreltokyo,345265294,squirreltokyo/react,"""main""","""branch""","""user""",,,,,,,,,,,,,,
15434780373,CreateEvent,true,2021-03-07 05:21:08.000000 UTC,66415869,squirreltokyo,345265294,squirreltokyo/react,,"""repository""","""user""",,,,,,,,,,,,,,
15434800595,WatchEvent,true,2021-03-07 05:26:54.000000 UTC,80188475,xc-2zZ,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15434442955,WatchEvent,true,2021-03-07 03:22:13.000000 UTC,132863,godDLL,21743740,kasper/phoenix,,,,,,,,"""started""",,,,,,,,,
15434438645,PushEvent,true,2021-03-07 03:20:38.000000 UTC,2789958,advaitjain,214277424,advaitjain/tensorflow,"""refs/heads/local-continuous-builds""",,,6658243018,3,3,"[{""sha"":""99b1fa6a15a6c82eb5ac2642d93fee810a2c766d"",""author"":{""name"":""Jiri Simsa"",""email"":""b53bfee97ac78a1d2afd0ef6138945f352c1fa9d@google.com""},""message"":""[tf.data] Make error message more informative.\n\nPiperOrigin-RevId: 361352108\nChange-Id: Ib4ffb578da274df1accb615f7fe1c04bd58b321d"",""distinct"":true,""url"":""https://api.github.com/repos/advaitjain/tensorflow/commits/99b1fa6a15a6c82eb5ac2642d93fee810a2c766d""},{""sha"":""60ea1a4a12c091a51b9f845c23a507629ac1a0a2"",""author"":{""name"":""Advait Jain"",""email"":""381329857d3dce0cdb28ee10c109de30b1dd6745@users.noreply.github.com""},""message"":""Merge remote-tracking branch 'upstream/master' into local-continuous-builds"",""distinct"":true,""url"":""https://api.github.com/repos/advaitjain/tensorflow/commits/60ea1a4a12c091a51b9f845c23a507629ac1a0a2""},{""sha"":""c6b06453b162b1ca16c06f3dae64e9e4fedeff12"",""author"":{""name"":""Advait Jain"",""email"":""381329857d3dce0cdb28ee10c109de30b1dd6745@users.noreply.github.com""},""message"":""Update continuous build artifacts for keyword_benchmark."",""distinct"":true,""url"":""https://api.github.com/repos/advaitjain/tensorflow/commits/c6b06453b162b1ca16c06f3dae64e9e4fedeff12""}]",,,,,,,,,,
15434384481,GollumEvent,true,2021-03-07 03:01:08.000000 UTC,4981219,alalek,11310533,alalek/opencv,,,,,,,,,,,,,,,,,
15434444523,ForkEvent,true,2021-03-07 03:22:47.000000 UTC,19306000,lsyan,75396575,duxianwei520/react,,,,,,,,,,"""lsyan/react""",,,,,,,
15434445322,ForkEvent,true,2021-03-07 03:23:02.000000 UTC,19306000,lsyan,72628285,Cathy0807/react,,,,,,,,,,"""lsyan/react-1""",,,,,,,
15434518704,CreateEvent,true,2021-03-07 03:50:13.000000 UTC,22403807,TKHNguyen,345252812,TKHNguyen/scikit-learn,,"""repository""","""user""",,,,,,,,,,,,,,
15434525888,CreateEvent,true,2021-03-07 03:52:55.000000 UTC,22403807,TKHNguyen,345252812,TKHNguyen/scikit-learn,"""main""","""branch""","""user""",,,,,,,,,,,,,,
15434459852,CreateEvent,true,2021-03-07 03:28:08.000000 UTC,26672314,devashriv,345216897,devashriv/react,"""master""","""branch""","""user""",,,,,,,,,,,,,,
15434426749,DeleteEvent,true,2021-03-07 03:16:29.000000 UTC,34515761,chinedunsidinanya,345225709,chinedunsidinanya/terraform,"""main""","""branch""","""user""",,,,,,,,,,,,,,
15434426750,CreateEvent,true,2021-03-07 03:16:29.000000 UTC,34515761,chinedunsidinanya,345225709,chinedunsidinanya/terraform,"""master""","""branch""","""user""",,,,,,,,,,,,,,
15434517756,CreateEvent,true,2021-03-07 03:49:54.000000 UTC,34515761,chinedunsidinanya,345252779,chinedunsidinanya/terraform,,"""repository""","""user""",,,,,,,,,,,,,,
15434523615,CreateEvent,true,2021-03-07 03:52:04.000000 UTC,34515761,chinedunsidinanya,345252779,chinedunsidinanya/terraform,"""master""","""branch""","""user""",,,,,,,,,,,,,,
15434536758,PushEvent,true,2021-03-07 03:57:07.000000 UTC,34515761,chinedunsidinanya,345252779,chinedunsidinanya/terraform,"""refs/heads/master""",,,6658306380,1,1,"[{""sha"":""b3b67c02ebb1d9f2169c163d6158e11e4b8157ba"",""author"":{""name"":""chinedunsidinanya"",""email"":""35316b8cd8007c3b79e8db8dc0c297733027c3aa@users.noreply.github.com""},""message"":""Update packer.json"",""distinct"":true,""url"":""https://api.github.com/repos/chinedunsidinanya/terraform/commits/b3b67c02ebb1d9f2169c163d6158e11e4b8157ba""}]",,,,,,,,,,
15434540326,PushEvent,true,2021-03-07 03:58:31.000000 UTC,34515761,chinedunsidinanya,345252779,chinedunsidinanya/terraform,"""refs/heads/master""",,,6658308675,1,1,"[{""sha"":""f4994ccb97b28ab685e0493a2546ca5d18f89a03"",""author"":{""name"":""Chinedu Nsidinanya"",""email"":""47ceaafda050107f0c1d24649817bd026489e016@icloud.com""},""message"":""Changing this back to default"",""distinct"":true,""url"":""https://api.github.com/repos/chinedunsidinanya/terraform/commits/f4994ccb97b28ab685e0493a2546ca5d18f89a03""}]",,,,,,,,,,
15434405492,PushEvent,true,2021-03-07 03:08:36.000000 UTC,53463432,yzwang-13,340279848,yzwang-13/react,"""refs/heads/master""",,,6658222027,1,1,"[{""sha"":""7d66c401ecbc14ba245743d458c5f059a54323bc"",""author"":{""name"":""yingzhengwang"",""email"":""d9c462caadca115298d8f36ae09324bacec867ee@gmail.com""},""message"":""delete"",""distinct"":true,""url"":""https://api.github.com/repos/yzwang-13/react/commits/7d66c401ecbc14ba245743d458c5f059a54323bc""}]",,,,,,,,,,
15434417053,PushEvent,true,2021-03-07 03:13:01.000000 UTC,53463432,yzwang-13,340279848,yzwang-13/react,"""refs/heads/master""",,,6658229581,1,1,"[{""sha"":""2fb1a9845826c7ba71bff19c35e1b19c815c5bb6"",""author"":{""name"":""yingzhengwang"",""email"":""d9c462caadca115298d8f36ae09324bacec867ee@gmail.com""},""message"":""reinit"",""distinct"":true,""url"":""https://api.github.com/repos/yzwang-13/react/commits/2fb1a9845826c7ba71bff19c35e1b19c815c5bb6""}]",,,,,,,,,,
15434479917,CreateEvent,true,2021-03-07 03:35:23.000000 UTC,67170307,ryanevans253,345250826,ryanevans253/react,,"""repository""","""user""",,,,,,,,,,,,,,
15434499566,CreateEvent,true,2021-03-07 03:43:01.000000 UTC,67170307,ryanevans253,345250826,ryanevans253/react,"""master""","""branch""","""user""",,,,,,,,,,,,,,
15434531554,WatchEvent,true,2021-03-07 03:55:09.000000 UTC,76720778,hieunguyent12,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15434384210,IssueCommentEvent,true,2021-03-07 03:01:03.000000 UTC,23360872,AntonioRegilane,843222,scikit-learn/scikit-learn,,,,,,,,"""created""",,,,,,,,,
15434444847,WatchEvent,true,2021-03-07 03:22:54.000000 UTC,45591119,liyunhao99,843222,scikit-learn/scikit-learn,,,,,,,,"""started""",,,,,,,,,
15434444914,ForkEvent,true,2021-03-07 03:22:55.000000 UTC,45591119,liyunhao99,843222,scikit-learn/scikit-learn,,,,,,,,,,"""liyunhao99/scikit-learn""",,,,,,,
15434427374,WatchEvent,true,2021-03-07 03:16:42.000000 UTC,45273600,gbfonseca,16072585,phoenixframework/phoenix,,,,,,,,"""started""",,,,,,,,,
15434443162,PullRequestReviewEvent,true,2021-03-07 03:22:17.000000 UTC,1309817,yyoon,45717250,tensorflow/tensorflow,,,,,,,,"""created""",47605,,,"""approved""","""MEMBER""",,,,
15434414822,IssueCommentEvent,true,2021-03-07 03:12:13.000000 UTC,3395998,freedomtan,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15434408389,IssueCommentEvent,true,2021-03-07 03:09:44.000000 UTC,17668390,innat,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15434442553,WatchEvent,true,2021-03-07 03:22:04.000000 UTC,57167410,scout-op,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15434503300,WatchEvent,true,2021-03-07 03:44:25.000000 UTC,59989742,joandersom,7691631,moby/moby,,,,,,,,"""started""",,,,,,,,,
15434486068,WatchEvent,true,2021-03-07 03:37:48.000000 UTC,34730060,geenva,135786093,typescript-cheatsheets/react,,,,,,,,"""started""",,,,,,,,,
15435103252,CreateEvent,true,2021-03-07 07:10:57.000000 UTC,14806298,AriPerkkio,312058115,AriPerkkio/react,"""test/async-act""","""branch""","""user""",,,,,,,,,,,,,,
15435250277,PushEvent,true,2021-03-07 07:57:29.000000 UTC,14806298,AriPerkkio,312058115,AriPerkkio/react,"""refs/heads/test/async-act""",,,6658755557,1,1,"[{""sha"":""d6c66dc0a3f314707f7f74569a93d6bd7827c5d8"",""author"":{""name"":""Ari Perkkio"",""email"":""c03e56e6c7e9f0beafd5e873810728347a85f1bb@gmail.com""},""message"":""add bailout option for flushWorkAndMicroTasks"",""distinct"":true,""url"":""https://api.github.com/repos/AriPerkkio/react/commits/d6c66dc0a3f314707f7f74569a93d6bd7827c5d8""}]",,,,,,,,,,
15435119678,PushEvent,true,2021-03-07 07:16:18.000000 UTC,18458248,shlev,344504087,shlev/react,"""refs/heads/main""",,,6658673769,1,1,"[{""sha"":""f8efa47c860af528c432548b9147ee07be3d9ab6"",""author"":{""name"":""shlomi"",""email"":""6f01bf2e882e3bb6371d28d1418e5f729e7183e6@magic-flex.com""},""message"":""state & lifecycle"",""distinct"":true,""url"":""https://api.github.com/repos/shlev/react/commits/f8efa47c860af528c432548b9147ee07be3d9ab6""}]",,,,,,,,,,
15435155955,IssueCommentEvent,true,2021-03-07 07:27:56.000000 UTC,32347756,todo[bot],199682157,wadezhan/react,,,,,,,,"""created""",,,,,,,,,
15435156091,IssueCommentEvent,true,2021-03-07 07:27:59.000000 UTC,32347756,todo[bot],199682157,wadezhan/react,,,,,,,,"""created""",,,,,,,,,
15435156231,IssueCommentEvent,true,2021-03-07 07:28:03.000000 UTC,32347756,todo[bot],199682157,wadezhan/react,,,,,,,,"""created""",,,,,,,,,
15435156367,IssueCommentEvent,true,2021-03-07 07:28:05.000000 UTC,32347756,todo[bot],199682157,wadezhan/react,,,,,,,,"""created""",,,,,,,,,
15435156523,IssueCommentEvent,true,2021-03-07 07:28:08.000000 UTC,32347756,todo[bot],199682157,wadezhan/react,,,,,,,,"""created""",,,,,,,,,
15435156681,IssueCommentEvent,true,2021-03-07 07:28:11.000000 UTC,32347756,todo[bot],199682157,wadezhan/react,,,,,,,,"""created""",,,,,,,,,
15435156839,IssueCommentEvent,true,2021-03-07 07:28:14.000000 UTC,32347756,todo[bot],199682157,wadezhan/react,,,,,,,,"""created""",,,,,,,,,
15435156993,IssueCommentEvent,true,2021-03-07 07:28:17.000000 UTC,32347756,todo[bot],199682157,wadezhan/react,,,,,,,,"""created""",,,,,,,,,
15435157128,IssueCommentEvent,true,2021-03-07 07:28:20.000000 UTC,32347756,todo[bot],199682157,wadezhan/react,,,,,,,,"""created""",,,,,,,,,
15435157260,IssueCommentEvent,true,2021-03-07 07:28:24.000000 UTC,32347756,todo[bot],199682157,wadezhan/react,,,,,,,,"""created""",,,,,,,,,
15435157434,IssueCommentEvent,true,2021-03-07 07:28:26.000000 UTC,32347756,todo[bot],199682157,wadezhan/react,,,,,,,,"""created""",,,,,,,,,
15435157590,IssueCommentEvent,true,2021-03-07 07:28:29.000000 UTC,32347756,todo[bot],199682157,wadezhan/react,,,,,,,,"""created""",,,,,,,,,
15435157726,IssueCommentEvent,true,2021-03-07 07:28:32.000000 UTC,32347756,todo[bot],199682157,wadezhan/react,,,,,,,,"""created""",,,,,,,,,
15435157873,IssueCommentEvent,true,2021-03-07 07:28:35.000000 UTC,32347756,todo[bot],199682157,wadezhan/react,,,,,,,,"""created""",,,,,,,,,
15435158017,IssueCommentEvent,true,2021-03-07 07:28:38.000000 UTC,32347756,todo[bot],199682157,wadezhan/react,,,,,,,,"""created""",,,,,,,,,
15435124576,PushEvent,true,2021-03-07 07:17:50.000000 UTC,39726558,JUNGQUI,335272317,JUNGQUI/react,"""refs/heads/master""",,,6658676852,1,1,"[{""sha"":""59373d1fa7dac5fa6c1df88689185375828da14d"",""author"":{""name"":""JUNGQUI"",""email"":""06f48df15702c5be91695987161f807e82a91c68@gmail.com""},""message"":""package 정리, ReactDOM 관련 설명 추가"",""distinct"":true,""url"":""https://api.github.com/repos/JUNGQUI/react/commits/59373d1fa7dac5fa6c1df88689185375828da14d""}]",,,,,,,,,,
15435125173,PullRequestEvent,true,2021-03-07 07:18:01.000000 UTC,39726558,JUNGQUI,335272317,JUNGQUI/react,,,,,,,,"""opened""",27,,,,,,,,
15435125484,PullRequestEvent,true,2021-03-07 07:18:07.000000 UTC,39726558,JUNGQUI,335272317,JUNGQUI/react,,,,,,,,"""closed""",27,,,,,,,,
15435125513,PushEvent,true,2021-03-07 07:18:07.000000 UTC,39726558,JUNGQUI,335272317,JUNGQUI/react,"""refs/heads/main""",,,6658677454,2,1,"[{""sha"":""59373d1fa7dac5fa6c1df88689185375828da14d"",""author"":{""name"":""JUNGQUI"",""email"":""06f48df15702c5be91695987161f807e82a91c68@gmail.com""},""message"":""package 정리, ReactDOM 관련 설명 추가"",""distinct"":false,""url"":""https://api.github.com/repos/JUNGQUI/react/commits/59373d1fa7dac5fa6c1df88689185375828da14d""},{""sha"":""8d1ab84f4920c33f262ab868a8a8559f6d40d3a0"",""author"":{""name"":""JUNGQUI"",""email"":""fb778ccdda570659b8f807ce41d2be3ef6088e21@users.noreply.github.com""},""message"":""Merge pull request #27 from JUNGQUI/master\n\npackage 정리, ReactDOM 관련 설명 추가"",""distinct"":true,""url"":""https://api.github.com/repos/JUNGQUI/react/commits/8d1ab84f4920c33f262ab868a8a8559f6d40d3a0""}]",,,,,,,,,,
15435098807,PullRequestEvent,true,2021-03-07 07:09:31.000000 UTC,39814207,pull[bot],181474594,suddenlyGiovanni/react,,,,,,,,"""opened""",516,,,,,,,,
15435099814,PushEvent,true,2021-03-07 07:09:52.000000 UTC,39814207,pull[bot],181474594,suddenlyGiovanni/react,"""refs/heads/master""",,,6658660884,2,2,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/suddenlyGiovanni/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/suddenlyGiovanni/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15435099841,PullRequestEvent,true,2021-03-07 07:09:52.000000 UTC,39814207,pull[bot],181474594,suddenlyGiovanni/react,,,,,,,,"""closed""",516,,,,,,,,
15435113029,PullRequestEvent,true,2021-03-07 07:14:12.000000 UTC,39814207,pull[bot],95927693,akram/tensorflow,,,,,,,,"""opened""",4308,,,,,,,,
15435115487,PushEvent,true,2021-03-07 07:15:04.000000 UTC,39814207,pull[bot],95927693,akram/tensorflow,"""refs/heads/master""",,,6658671063,1,1,"[{""sha"":""fb7d34de0a7a892d070104aa4e385159817e7ef5"",""author"":{""name"":""Smit Hinsu"",""email"":""0f9dce5f2da36d8473ff9a50fbb0e06a148c5fae@google.com""},""message"":""Add prepare-tpu-computation-for-tf-export pass\n\nThis pass transforms the MLIR module attached to _TpuCompileMlir op to be legal for export to TensorFlow GraphDef. Currently, this pass handles mhlo.sharding attribute on function attributes by passing them through TF XlaSharding ops and dropping tf.aliasing_output attribute.\n\nThis will be used for using the old tf2xla bridge for second phase of the compilation.\n\nPiperOrigin-RevId: 361378341\nChange-Id: Id418212e65f5d177bc4bb8c279824ef8bfc2add2"",""distinct"":true,""url"":""https://api.github.com/repos/akram/tensorflow/commits/fb7d34de0a7a892d070104aa4e385159817e7ef5""}]",,,,,,,,,,
15435115514,PullRequestEvent,true,2021-03-07 07:15:04.000000 UTC,39814207,pull[bot],95927693,akram/tensorflow,,,,,,,,"""closed""",4308,,,,,,,,
15435140154,PullRequestEvent,true,2021-03-07 07:22:44.000000 UTC,39814207,pull[bot],65461415,PowerOlive/tensorflow,,,,,,,,"""opened""",168,,,,,,,,
15435141640,PushEvent,true,2021-03-07 07:23:12.000000 UTC,39814207,pull[bot],65461415,PowerOlive/tensorflow,"""refs/heads/master""",,,6658687443,1,1,"[{""sha"":""fb7d34de0a7a892d070104aa4e385159817e7ef5"",""author"":{""name"":""Smit Hinsu"",""email"":""0f9dce5f2da36d8473ff9a50fbb0e06a148c5fae@google.com""},""message"":""Add prepare-tpu-computation-for-tf-export pass\n\nThis pass transforms the MLIR module attached to _TpuCompileMlir op to be legal for export to TensorFlow GraphDef. Currently, this pass handles mhlo.sharding attribute on function attributes by passing them through TF XlaSharding ops and dropping tf.aliasing_output attribute.\n\nThis will be used for using the old tf2xla bridge for second phase of the compilation.\n\nPiperOrigin-RevId: 361378341\nChange-Id: Id418212e65f5d177bc4bb8c279824ef8bfc2add2"",""distinct"":true,""url"":""https://api.github.com/repos/PowerOlive/tensorflow/commits/fb7d34de0a7a892d070104aa4e385159817e7ef5""}]",,,,,,,,,,
15435141662,PullRequestEvent,true,2021-03-07 07:23:13.000000 UTC,39814207,pull[bot],65461415,PowerOlive/tensorflow,,,,,,,,"""closed""",168,,,,,,,,
15435153638,PullRequestEvent,true,2021-03-07 07:27:10.000000 UTC,39814207,pull[bot],339262813,Jeffkeen7/tensorflow,,,,,,,,"""opened""",62,,,,,,,,
15435155051,PushEvent,true,2021-03-07 07:27:39.000000 UTC,39814207,pull[bot],339262813,Jeffkeen7/tensorflow,"""refs/heads/master""",,,6658695915,1,1,"[{""sha"":""fb7d34de0a7a892d070104aa4e385159817e7ef5"",""author"":{""name"":""Smit Hinsu"",""email"":""0f9dce5f2da36d8473ff9a50fbb0e06a148c5fae@google.com""},""message"":""Add prepare-tpu-computation-for-tf-export pass\n\nThis pass transforms the MLIR module attached to _TpuCompileMlir op to be legal for export to TensorFlow GraphDef. Currently, this pass handles mhlo.sharding attribute on function attributes by passing them through TF XlaSharding ops and dropping tf.aliasing_output attribute.\n\nThis will be used for using the old tf2xla bridge for second phase of the compilation.\n\nPiperOrigin-RevId: 361378341\nChange-Id: Id418212e65f5d177bc4bb8c279824ef8bfc2add2"",""distinct"":true,""url"":""https://api.github.com/repos/Jeffkeen7/tensorflow/commits/fb7d34de0a7a892d070104aa4e385159817e7ef5""}]",,,,,,,,,,
15435155067,PullRequestEvent,true,2021-03-07 07:27:40.000000 UTC,39814207,pull[bot],339262813,Jeffkeen7/tensorflow,,,,,,,,"""closed""",62,,,,,,,,
15435155831,PullRequestEvent,true,2021-03-07 07:27:54.000000 UTC,39814207,pull[bot],199682157,wadezhan/react,,,,,,,,"""opened""",811,,,,,,,,
15435156706,PushEvent,true,2021-03-07 07:28:12.000000 UTC,39814207,pull[bot],199682157,wadezhan/react,"""refs/heads/master""",,,6658696949,2,2,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/wadezhan/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/wadezhan/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15435156732,PullRequestEvent,true,2021-03-07 07:28:12.000000 UTC,39814207,pull[bot],199682157,wadezhan/react,,,,,,,,"""closed""",811,,,,,,,,
15435163801,PullRequestEvent,true,2021-03-07 07:30:29.000000 UTC,39814207,pull[bot],262634697,MichaelDeBoey/react,,,,,,,,"""opened""",307,,,,,,,,
15435164082,PushEvent,true,2021-03-07 07:30:34.000000 UTC,39814207,pull[bot],262634697,MichaelDeBoey/react,"""refs/heads/master""",,,6658701549,2,2,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/MichaelDeBoey/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/MichaelDeBoey/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15435164093,PullRequestEvent,true,2021-03-07 07:30:34.000000 UTC,39814207,pull[bot],262634697,MichaelDeBoey/react,,,,,,,,"""closed""",307,,,,,,,,
15435183153,PullRequestEvent,true,2021-03-07 07:36:37.000000 UTC,39814207,pull[bot],114650042,JochLAin/react,,,,,,,,"""opened""",181,,,,,,,,
15435183904,PushEvent,true,2021-03-07 07:36:52.000000 UTC,39814207,pull[bot],114650042,JochLAin/react,"""refs/heads/master""",,,6658713800,2,2,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/JochLAin/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/JochLAin/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15435183931,PullRequestEvent,true,2021-03-07 07:36:52.000000 UTC,39814207,pull[bot],114650042,JochLAin/react,,,,,,,,"""closed""",181,,,,,,,,
15435197264,PullRequestEvent,true,2021-03-07 07:41:02.000000 UTC,39814207,pull[bot],279894716,KaycoinsInc/react,,,,,,,,"""opened""",16,,,,,,,,
15435198532,PullRequestEvent,true,2021-03-07 07:41:27.000000 UTC,39814207,pull[bot],56189869,xiaohanhuang/tensorflow,,,,,,,,"""opened""",2094,,,,,,,,
15435199377,PushEvent,true,2021-03-07 07:41:44.000000 UTC,39814207,pull[bot],279894716,KaycoinsInc/react,"""refs/heads/master""",,,6658723492,2,2,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/KaycoinsInc/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/KaycoinsInc/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15435199397,PullRequestEvent,true,2021-03-07 07:41:44.000000 UTC,39814207,pull[bot],279894716,KaycoinsInc/react,,,,,,,,"""closed""",16,,,,,,,,
15435201290,PushEvent,true,2021-03-07 07:42:19.000000 UTC,39814207,pull[bot],56189869,xiaohanhuang/tensorflow,"""refs/heads/master""",,,6658724694,1,1,"[{""sha"":""fb7d34de0a7a892d070104aa4e385159817e7ef5"",""author"":{""name"":""Smit Hinsu"",""email"":""0f9dce5f2da36d8473ff9a50fbb0e06a148c5fae@google.com""},""message"":""Add prepare-tpu-computation-for-tf-export pass\n\nThis pass transforms the MLIR module attached to _TpuCompileMlir op to be legal for export to TensorFlow GraphDef. Currently, this pass handles mhlo.sharding attribute on function attributes by passing them through TF XlaSharding ops and dropping tf.aliasing_output attribute.\n\nThis will be used for using the old tf2xla bridge for second phase of the compilation.\n\nPiperOrigin-RevId: 361378341\nChange-Id: Id418212e65f5d177bc4bb8c279824ef8bfc2add2"",""distinct"":true,""url"":""https://api.github.com/repos/xiaohanhuang/tensorflow/commits/fb7d34de0a7a892d070104aa4e385159817e7ef5""}]",,,,,,,,,,
15435201312,PullRequestEvent,true,2021-03-07 07:42:20.000000 UTC,39814207,pull[bot],56189869,xiaohanhuang/tensorflow,,,,,,,,"""closed""",2094,,,,,,,,
15435225168,PullRequestEvent,true,2021-03-07 07:49:44.000000 UTC,39814207,pull[bot],146377921,Rachelmorrell/react,,,,,,,,"""opened""",900,,,,,,,,
15435225821,PushEvent,true,2021-03-07 07:49:56.000000 UTC,39814207,pull[bot],146377921,Rachelmorrell/react,"""refs/heads/master""",,,6658740141,2,2,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/Rachelmorrell/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/Rachelmorrell/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15435225842,PullRequestEvent,true,2021-03-07 07:49:57.000000 UTC,39814207,pull[bot],146377921,Rachelmorrell/react,,,,,,,,"""closed""",900,,,,,,,,
15435237143,PullRequestEvent,true,2021-03-07 07:53:28.000000 UTC,39814207,pull[bot],302953642,TheAssassinRen/tensorflow,,,,,,,,"""opened""",505,,,,,,,,
15435238477,PushEvent,true,2021-03-07 07:53:52.000000 UTC,39814207,pull[bot],302953642,TheAssassinRen/tensorflow,"""refs/heads/master""",,,6658748164,1,1,"[{""sha"":""fb7d34de0a7a892d070104aa4e385159817e7ef5"",""author"":{""name"":""Smit Hinsu"",""email"":""0f9dce5f2da36d8473ff9a50fbb0e06a148c5fae@google.com""},""message"":""Add prepare-tpu-computation-for-tf-export pass\n\nThis pass transforms the MLIR module attached to _TpuCompileMlir op to be legal for export to TensorFlow GraphDef. Currently, this pass handles mhlo.sharding attribute on function attributes by passing them through TF XlaSharding ops and dropping tf.aliasing_output attribute.\n\nThis will be used for using the old tf2xla bridge for second phase of the compilation.\n\nPiperOrigin-RevId: 361378341\nChange-Id: Id418212e65f5d177bc4bb8c279824ef8bfc2add2"",""distinct"":true,""url"":""https://api.github.com/repos/TheAssassinRen/tensorflow/commits/fb7d34de0a7a892d070104aa4e385159817e7ef5""}]",,,,,,,,,,
15435238494,PullRequestEvent,true,2021-03-07 07:53:53.000000 UTC,39814207,pull[bot],302953642,TheAssassinRen/tensorflow,,,,,,,,"""closed""",505,,,,,,,,
15435242163,PullRequestEvent,true,2021-03-07 07:55:03.000000 UTC,39814207,pull[bot],233268851,Manas1820/tensorflow,,,,,,,,"""opened""",839,,,,,,,,
15435243188,PushEvent,true,2021-03-07 07:55:18.000000 UTC,39814207,pull[bot],233268851,Manas1820/tensorflow,"""refs/heads/master""",,,6658751208,1,1,"[{""sha"":""fb7d34de0a7a892d070104aa4e385159817e7ef5"",""author"":{""name"":""Smit Hinsu"",""email"":""0f9dce5f2da36d8473ff9a50fbb0e06a148c5fae@google.com""},""message"":""Add prepare-tpu-computation-for-tf-export pass\n\nThis pass transforms the MLIR module attached to _TpuCompileMlir op to be legal for export to TensorFlow GraphDef. Currently, this pass handles mhlo.sharding attribute on function attributes by passing them through TF XlaSharding ops and dropping tf.aliasing_output attribute.\n\nThis will be used for using the old tf2xla bridge for second phase of the compilation.\n\nPiperOrigin-RevId: 361378341\nChange-Id: Id418212e65f5d177bc4bb8c279824ef8bfc2add2"",""distinct"":true,""url"":""https://api.github.com/repos/Manas1820/tensorflow/commits/fb7d34de0a7a892d070104aa4e385159817e7ef5""}]",,,,,,,,,,
15435243227,PullRequestEvent,true,2021-03-07 07:55:19.000000 UTC,39814207,pull[bot],233268851,Manas1820/tensorflow,,,,,,,,"""closed""",839,,,,,,,,
15435148278,CreateEvent,true,2021-03-07 07:25:23.000000 UTC,43985911,panxiaojun233,292961759,panxiaojun233/dubbo,"""stream-base3.0-0307""","""branch""","""user""",,,,,,,,,,,,,,
15435149330,PushEvent,true,2021-03-07 07:25:43.000000 UTC,43985911,panxiaojun233,292961759,panxiaojun233/dubbo,"""refs/heads/stream-base3.0-0307""",,,6658692303,1,1,"[{""sha"":""f0704b77f8ea7dc998d590f8cd6a5454a0053fe6"",""author"":{""name"":""shengwei.psw"",""email"":""9149f5295bf21beefa3128154af555be03526898@alibaba-inc.com""},""message"":""temp"",""distinct"":true,""url"":""https://api.github.com/repos/panxiaojun233/dubbo/commits/f0704b77f8ea7dc998d590f8cd6a5454a0053fe6""}]",,,,,,,,,,
15435072732,PushEvent,true,2021-03-07 07:01:02.000000 UTC,46969984,waynet022,344636038,waynet022/opencv,"""refs/heads/main""",,,6658643555,1,1,"[{""sha"":""9428b18423a643ed3a452eac6297b77f93292dfa"",""author"":{""name"":""wayne1tam"",""email"":""ef6c2a766a0ca0a5a1a6fa99f2bc213d60df7839@hotmail.com""},""message"":""lab to bgr function"",""distinct"":true,""url"":""https://api.github.com/repos/waynet022/opencv/commits/9428b18423a643ed3a452eac6297b77f93292dfa""}]",,,,,,,,,,
15435074558,WatchEvent,true,2021-03-07 07:01:35.000000 UTC,59182850,vladislav-r,345277396,vladislav-r/react,,,,,,,,"""started""",,,,,,,,,
15435137073,PushEvent,true,2021-03-07 07:21:45.000000 UTC,59663022,bic-harness,232630157,bic-harness/terraform,"""refs/heads/master""",,,6658684591,1,1,"[{""sha"":""9cd526944de38e2a103f2b53fe75d1e92fc37c9c"",""author"":{""name"":""bic-harness"",""email"":""958a8fce0d8c4daa7a8f2b84b587df9162e56ab2@harness.io""},""message"":""ami commit 3"",""distinct"":true,""url"":""https://api.github.com/repos/bic-harness/terraform/commits/9cd526944de38e2a103f2b53fe75d1e92fc37c9c""}]",,,,,,,,,,
15435203794,PushEvent,true,2021-03-07 07:43:09.000000 UTC,59663022,bic-harness,232630157,bic-harness/terraform,"""refs/heads/master""",,,6658726271,1,1,"[{""sha"":""416c65e1aa6a3dfa5eaa5b0258bc0f72a1cb01d1"",""author"":{""name"":""bic-harness"",""email"":""958a8fce0d8c4daa7a8f2b84b587df9162e56ab2@harness.io""},""message"":""fixing problems"",""distinct"":true,""url"":""https://api.github.com/repos/bic-harness/terraform/commits/416c65e1aa6a3dfa5eaa5b0258bc0f72a1cb01d1""}]",,,,,,,,,,
15435223892,PushEvent,true,2021-03-07 07:49:20.000000 UTC,59663022,bic-harness,232630157,bic-harness/terraform,"""refs/heads/master""",,,6658738955,1,1,"[{""sha"":""145735a0749b4f0f6ec108c131a4fd96a7f6a0de"",""author"":{""name"":""bic-harness"",""email"":""958a8fce0d8c4daa7a8f2b84b587df9162e56ab2@harness.io""},""message"":""Update main.tf"",""distinct"":true,""url"":""https://api.github.com/repos/bic-harness/terraform/commits/145735a0749b4f0f6ec108c131a4fd96a7f6a0de""}]",,,,,,,,,,
15435239545,PushEvent,true,2021-03-07 07:54:13.000000 UTC,59663022,bic-harness,232630157,bic-harness/terraform,"""refs/heads/master""",,,6658748875,1,1,"[{""sha"":""c05ea89b028c9f6d5cbfbd01381747c0ef27e9a8"",""author"":{""name"":""bic-harness"",""email"":""958a8fce0d8c4daa7a8f2b84b587df9162e56ab2@harness.io""},""message"":""Update main.tf"",""distinct"":true,""url"":""https://api.github.com/repos/bic-harness/terraform/commits/c05ea89b028c9f6d5cbfbd01381747c0ef27e9a8""}]",,,,,,,,,,
15435225870,CreateEvent,true,2021-03-07 07:49:57.000000 UTC,72659887,ahchin1996,345285972,ahchin1996/react,"""chin""","""branch""","""user""",,,,,,,,,,,,,,
15435188402,IssueCommentEvent,true,2021-03-07 07:38:14.000000 UTC,8655789,codecov-io,4710920,apache/dubbo,,,,,,,,"""created""",,,,,,,,,
15435177545,IssueCommentEvent,true,2021-03-07 07:34:47.000000 UTC,26839782,gentryhuang,4710920,apache/dubbo,,,,,,,,"""created""",,,,,,,,,
15435178074,IssueCommentEvent,true,2021-03-07 07:34:58.000000 UTC,26839782,gentryhuang,4710920,apache/dubbo,,,,,,,,"""created""",,,,,,,,,
15435124422,PullRequestEvent,true,2021-03-07 07:17:46.000000 UTC,28709322,PromiseChan,4710920,apache/dubbo,,,,,,,,"""opened""",7335,,,,,,,,
15435072105,IssueCommentEvent,true,2021-03-07 07:00:50.000000 UTC,3624098,acdlite,10270250,facebook/react,,,,,,,,"""created""",,,,,,,,,
15435103370,ForkEvent,true,2021-03-07 07:11:00.000000 UTC,26340566,ASkyBig,10270250,facebook/react,,,,,,,,,,"""ASkyBig/react""",,,,,,,
15435128686,ForkEvent,true,2021-03-07 07:19:07.000000 UTC,51373949,natnaelabay,10270250,facebook/react,,,,,,,,,,"""natnaelabay/react""",,,,,,,
15435173242,WatchEvent,true,2021-03-07 07:33:25.000000 UTC,57396191,andrew-motesque,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15435180106,ForkEvent,true,2021-03-07 07:35:35.000000 UTC,72659887,ahchin1996,10270250,facebook/react,,,,,,,,,,"""ahchin1996/react""",,,,,,,
15435147135,IssuesEvent,true,2021-03-07 07:25:03.000000 UTC,9102529,Darylgolden,658518,ipython/ipython,,,,,,,,"""opened""",,,,,,,,,
15435106541,IssueCommentEvent,true,2021-03-07 07:12:04.000000 UTC,61679398,mlondschien,843222,scikit-learn/scikit-learn,,,,,,,,"""created""",,,,,,,,,
15435163872,ForkEvent,true,2021-03-07 07:30:30.000000 UTC,22404171,wanzinyazar,5108051,opencv/opencv,,,,,,,,,,"""wanzinyazar/opencv""",,,,,,,
15435175538,ForkEvent,true,2021-03-07 07:34:10.000000 UTC,40177672,NikolayCheremnov,5108051,opencv/opencv,,,,,,,,,,"""NikolayCheremnov/opencv""",,,,,,,
15435174436,ForkEvent,true,2021-03-07 07:33:48.000000 UTC,56969799,AnirbanS21,5108051,opencv/opencv,,,,,,,,,,"""AnirbanS21/opencv""",,,,,,,
15435165688,ForkEvent,true,2021-03-07 07:31:05.000000 UTC,80155872,CWB1999,5108051,opencv/opencv,,,,,,,,,,"""CWB1999/opencv""",,,,,,,
15435209346,WatchEvent,true,2021-03-07 07:44:56.000000 UTC,8264108,DebugOfTheRoad,4576305,openzipkin/zipkin,,,,,,,,"""started""",,,,,,,,,
15435123640,ForkEvent,true,2021-03-07 07:17:33.000000 UTC,48832196,ProgrammedRookie,4576305,openzipkin/zipkin,,,,,,,,,,"""ProgrammedRookie/zipkin""",,,,,,,
15435145846,IssueCommentEvent,true,2021-03-07 07:24:38.000000 UTC,989327,JohannSchumann,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15435146082,IssueCommentEvent,true,2021-03-07 07:24:43.000000 UTC,70899989,fonghyalex,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15434651076,CreateEvent,true,2021-03-07 04:38:38.000000 UTC,4981219,alalek,11310533,alalek/opencv,"""videoio_docs_fixes_3.4""","""branch""","""user""",,,,,,,,,,,,,,
15434554114,PushEvent,true,2021-03-07 04:03:08.000000 UTC,41898282,github-actions[bot],303638473,albertvillanova/tensorflow,"""refs/heads/nightly""",,,6658317737,0,0,[],,,,,,,,,,
15434554123,PushEvent,true,2021-03-07 04:03:08.000000 UTC,41898282,github-actions[bot],314172339,Og-ChRoNiC/tensorflow,"""refs/heads/nightly""",,,6658317742,0,0,[],,,,,,,,,,
15434554888,PushEvent,true,2021-03-07 04:03:23.000000 UTC,41898282,github-actions[bot],302343248,andreABbauer/tensorflow,"""refs/heads/nightly""",,,6658318269,0,0,[],,,,,,,,,,
15434557548,PushEvent,true,2021-03-07 04:04:15.000000 UTC,41898282,github-actions[bot],317608728,rkuester/tensorflow,"""refs/heads/nightly""",,,6658319995,0,0,[],,,,,,,,,,
15434568141,PushEvent,true,2021-03-07 04:08:06.000000 UTC,41898282,github-actions[bot],336950941,omaurtorsac/tensorflow,"""refs/heads/nightly""",,,6658327111,0,0,[],,,,,,,,,,
15434612136,PushEvent,true,2021-03-07 04:24:11.000000 UTC,41898282,github-actions[bot],72394712,sunshinemyson/tensorflow,"""refs/heads/nightly""",,,6658355269,0,0,[],,,,,,,,,,
15434571495,WatchEvent,true,2021-03-07 04:09:19.000000 UTC,50658603,jianxuanyuan,159043069,msdnqqy/opencv,,,,,,,,"""started""",,,,,,,,,
15434664876,PushEvent,true,2021-03-07 04:43:59.000000 UTC,61762931,yasu-code,295871184,yasu-code/react,"""refs/heads/master""",,,6658389256,1,1,"[{""sha"":""f80761973c6b17f1767c582ea087d937a497379c"",""author"":{""name"":""yasu-code"",""email"":""ee9591318381a4fd9656012d842a6de1d0332131@gmail.com""},""message"":""no message"",""distinct"":true,""url"":""https://api.github.com/repos/yasu-code/react/commits/f80761973c6b17f1767c582ea087d937a497379c""}]",,,,,,,,,,
15434675959,IssueCommentEvent,true,2021-03-07 04:48:17.000000 UTC,446130,lhofhansl,20473418,apache/phoenix,,,,,,,,"""created""",,,,,,,,,
15434614915,ForkEvent,true,2021-03-07 04:25:14.000000 UTC,28709322,PromiseChan,4710920,apache/dubbo,,,,,,,,,,"""PromiseChan/dubbo""",,,,,,,
15434658690,WatchEvent,true,2021-03-07 04:41:35.000000 UTC,6416249,pfan8,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15434698553,ForkEvent,true,2021-03-07 04:56:45.000000 UTC,30903109,abow79,10270250,facebook/react,,,,,,,,,,"""abow79/react""",,,,,,,
15434648056,WatchEvent,true,2021-03-07 04:37:28.000000 UTC,33351004,vandebiao,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15434622408,IssuesEvent,true,2021-03-07 04:27:58.000000 UTC,50989808,WOLFIEEEE,10270250,facebook/react,,,,,,,,"""opened""",,,,,,,,,
15434600636,WatchEvent,true,2021-03-07 04:20:13.000000 UTC,55033487,sajjadth,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15434606893,WatchEvent,true,2021-03-07 04:22:29.000000 UTC,60371583,gabrielhicks,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15434556386,WatchEvent,true,2021-03-07 04:03:52.000000 UTC,32314095,HorizonLiang,1093228,cocos2d/cocos2d-x,,,,,,,,"""started""",,,,,,,,,
15434657836,WatchEvent,true,2021-03-07 04:41:15.000000 UTC,66039523,NoobCodeZ03,1093228,cocos2d/cocos2d-x,,,,,,,,"""started""",,,,,,,,,
15434612419,WatchEvent,true,2021-03-07 04:24:19.000000 UTC,64185896,keesh0410,843222,scikit-learn/scikit-learn,,,,,,,,"""started""",,,,,,,,,
15434653295,PullRequestEvent,true,2021-03-07 04:39:32.000000 UTC,4981219,alalek,5108051,opencv/opencv,,,,,,,,"""opened""",19687,,,,,,,,
15434644951,WatchEvent,true,2021-03-07 04:36:15.000000 UTC,30282528,liuheng2cqupt,5108051,opencv/opencv,,,,,,,,"""started""",,,,,,,,,
15434614815,WatchEvent,true,2021-03-07 04:25:12.000000 UTC,66039523,NoobCodeZ03,5108051,opencv/opencv,,,,,,,,"""started""",,,,,,,,,
15434646662,ForkEvent,true,2021-03-07 04:36:56.000000 UTC,18180859,kevinlang,16072585,phoenixframework/phoenix,,,,,,,,,,"""kevinlang/phoenix""",,,,,,,
15434656666,WatchEvent,true,2021-03-07 04:40:48.000000 UTC,53996708,ArunMurugan78,16072585,phoenixframework/phoenix,,,,,,,,"""started""",,,,,,,,,
15434590366,PullRequestReviewEvent,true,2021-03-07 04:16:20.000000 UTC,2789958,advaitjain,45717250,tensorflow/tensorflow,,,,,,,,"""created""",47614,,,"""approved""","""MEMBER""",,,,
15434683896,WatchEvent,true,2021-03-07 04:51:12.000000 UTC,14201772,sangcnguyen,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15434554551,PushEvent,true,2021-03-07 04:03:16.000000 UTC,16359713,tensorflow-jenkins,45717250,tensorflow/tensorflow,"""refs/heads/nightly""",,,6658318023,4,0,"[{""sha"":""1edc795defb760129ebb5042ca36b92e670cbaa2"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Internal change\n\nPiperOrigin-RevId: 361284426\nChange-Id: I105de3e1953cf94e715130f0e136a2e2dc456b97"",""distinct"":false,""url"":""https://api.github.com/repos/tensorflow/tensorflow/commits/1edc795defb760129ebb5042ca36b92e670cbaa2""},{""sha"":""731495c3afdb97085dcbb8d7aaa28957c307ce4c"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Update GraphDef version to 697.\n\nPiperOrigin-RevId: 361296097\nChange-Id: I612bc49b633f1fe76dcbdce73c92f1b973da7230"",""distinct"":false,""url"":""https://api.github.com/repos/tensorflow/tensorflow/commits/731495c3afdb97085dcbb8d7aaa28957c307ce4c""},{""sha"":""051a96f3ec4fc38b248e8ae8ad2f8ad124eda59b"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""compat: Update forward compatibility horizon to 2021-03-06\n\nPiperOrigin-RevId: 361296098\nChange-Id: I4e871fe71e646487e020d5a38ece6e714ddbd4c7"",""distinct"":false,""url"":""https://api.github.com/repos/tensorflow/tensorflow/commits/051a96f3ec4fc38b248e8ae8ad2f8ad124eda59b""},{""sha"":""99b1fa6a15a6c82eb5ac2642d93fee810a2c766d"",""author"":{""name"":""Jiri Simsa"",""email"":""b53bfee97ac78a1d2afd0ef6138945f352c1fa9d@google.com""},""message"":""[tf.data] Make error message more informative.\n\nPiperOrigin-RevId: 361352108\nChange-Id: Ib4ffb578da274df1accb615f7fe1c04bd58b321d"",""distinct"":false,""url"":""https://api.github.com/repos/tensorflow/tensorflow/commits/99b1fa6a15a6c82eb5ac2642d93fee810a2c766d""}]",,,,,,,,,,
15434614096,WatchEvent,true,2021-03-07 04:24:57.000000 UTC,26818010,kckusal,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15434588704,PushEvent,true,2021-03-07 04:15:46.000000 UTC,41898282,github-actions[bot],45717250,tensorflow/tensorflow,"""refs/heads/nightly""",,,6658340423,0,0,[],,,,,,,,,,
15434675429,WatchEvent,true,2021-03-07 04:48:04.000000 UTC,63103873,jyoti-2,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15434563405,WatchEvent,true,2021-03-07 04:06:20.000000 UTC,65528018,bobbymcbobboi,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15434639187,WatchEvent,true,2021-03-07 04:34:01.000000 UTC,66039523,NoobCodeZ03,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15434686578,IssuesEvent,true,2021-03-07 04:52:15.000000 UTC,64355,williamh,7691631,moby/moby,,,,,,,,"""opened""",,,,,,,,,
15434555346,WatchEvent,true,2021-03-07 04:03:32.000000 UTC,59364300,dongsub-joung,7691631,moby/moby,,,,,,,,"""started""",,,,,,,,,
15434694910,IssuesEvent,true,2021-03-07 04:55:21.000000 UTC,76927379,saranyav-pulsesecure,7691631,moby/moby,,,,,,,,"""opened""",,,,,,,,,
15434065311,PushEvent,true,2021-03-07 01:07:07.000000 UTC,29597,bvaughn,74410855,bvaughn/react,"""refs/heads/devtools-profiler-log-scale""",,,6658001831,1,1,"[{""sha"":""c86d7cbc721da4773dd8cde8e400e7403ef3c8fd"",""author"":{""name"":""Brian Vaughn"",""email"":""59942a8ec08225673b377c556396ca24baabd1b2@fb.com""},""message"":""Improve DevTools Profiler commit-selector UX\n\n1. Replace linear scale for commit durations with log scale. This reduces the impact of one (or few) outlier times on more common smaller durations.\n2. Decrease the minimum bar height to make the differences in height more noticeable.\n3. Add a backgound hover highlight to increase contrast.\n4. Add hover tooltip with commit duration and timestamp."",""distinct"":true,""url"":""https://api.github.com/repos/bvaughn/react/commits/c86d7cbc721da4773dd8cde8e400e7403ef3c8fd""}]",,,,,,,,,,
15434184305,PushEvent,true,2021-03-07 01:49:17.000000 UTC,6392021,xyuanlu,260321741,xyuanlu/helix,"""refs/heads/task_requestedState""",,,6658078393,1,1,"[{""sha"":""469cd416a52b63df94728e83fddf8aa2832fe933"",""author"":{""name"":""Xiaoyuan Lu"",""email"":""0b0bf614bd3cf3b4ae84f0260819f51f7ecc0f57@gmail.com""},""message"":""4"",""distinct"":true,""url"":""https://api.github.com/repos/xyuanlu/helix/commits/469cd416a52b63df94728e83fddf8aa2832fe933""}]",,,,,,,,,,
15434187102,DeleteEvent,true,2021-03-07 01:50:24.000000 UTC,6392021,xyuanlu,260321741,xyuanlu/helix,"""task_requestedState2""","""branch""","""user""",,,,,,,,,,,,,,
15434127937,PushEvent,true,2021-03-07 01:28:57.000000 UTC,10389889,zhangyz-hd,280171318,zhangyz-hd/dubbo,"""refs/heads/master""",,,6658041972,2,2,"[{""sha"":""2062cdb2c537000c86555570c8d6c894f88bb7b7"",""author"":{""name"":""赵延"",""email"":""5ce2568d239a6eae7b30532b978f5499c59afae5@qq.com""},""message"":""[ISSUE-#6904] Fix reflect invoke error in org.apache.dubbo.common.utils.PojoUtils#generalize (#6905)\n\n* fix when the class is not public static, reflect invoke failed\r\n\r\n* add doc"",""distinct"":true,""url"":""https://api.github.com/repos/zhangyz-hd/dubbo/commits/2062cdb2c537000c86555570c8d6c894f88bb7b7""},{""sha"":""2033735b5cb1453ca5e93602e9568d287c1556c7"",""author"":{""name"":""zhangyz-hd"",""email"":""d71a1b2599e40c060f8565d711ec0768a541d182@163.com""},""message"":""Merge remote-tracking branch 'upstream/master'"",""distinct"":true,""url"":""https://api.github.com/repos/zhangyz-hd/dubbo/commits/2033735b5cb1453ca5e93602e9568d287c1556c7""}]",,,,,,,,,,
15434092467,PushEvent,true,2021-03-07 01:16:13.000000 UTC,13169112,ddavis-2015,319227542,ddavis-2015/tensorflow,"""refs/heads/Elu-pr5""",,,6658019354,1000,1,"[{""sha"":""1b47c073b0482ed559119bfffb30ca8862ad8c53"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Integrate LLVM at llvm/llvm-project@b7e05c874b5b\n\nUpdates LLVM usage to match\n[b7e05c874b5b](https://github.com/llvm/llvm-project/commit/b7e05c874b5b)\n\nPiperOrigin-RevId: 358289004\nChange-Id: I98fa9d4ffb96e84a6a0055e7a6a8d106c3f6ddc6"",""distinct"":false,""url"":""https://api.github.com/repos/ddavis-2015/tensorflow/commits/1b47c073b0482ed559119bfffb30ca8862ad8c53""},{""sha"":""e8241628d61c8e025c572817bab2ee2d66d238a2"",""author"":{""name"":""Tim Shen"",""email"":""4730ecb3b3122c1a4c40822c62fa6d402a094d1b@google.com""},""message"":""[XLA/GPU] Fix fused slice to use correct MHLO layout.\n\nFor an MHLO op, `TypeToShape(op.getType())` doesn't return the intended layout, as layout currently is carried by the `minor_to_major` attribute.\n\nInstead, get the shape from the converted HloComputation from MHLO.\n\nThis prevents failures that are revealed in later CLs.\n\nPiperOrigin-RevId: 358289988\nChange-Id: I3db5f83738caf51b220afa986ff83b9866628711"",""distinct"":false,""url"":""https://api.github.com/repos/ddavis-2015/tensorflow/commits/e8241628d61c8e025c572817bab2ee2d66d238a2""},{""sha"":""f184809b776e0658f2f025a57e2d5dbc6f7bfb23"",""author"":{""name"":""Rahul Joshi"",""email"":""15277936ae82919baaa227d3a37b5e73c80bf8d2@google.com""},""message"":""[XLA:GPU] Introduce CollectiveOpGroupMode and related helpers.\n\n- Introduce a CollectiveOpGroupMode enum to describe various modes of interpreting\n  replica groups attached to collective communication operations and\n  GetCollectiveOpGroupMode() function to get the group formation mode\n  implied by an HLO collective op based on whether it has channel_id and\n  use_global_device_ids.\n- Fix GetParticipatingDevices() to use this mode to correctly find participants in all\n  group formation modes.\n- Extend collective_ops_utils test to exercise the new behavior of\n  GetParticipatingDevices.\n- Change existing uses of GetParticipatingDevices() to use cross replica group\n  mode to match existing behavior.\n\nPiperOrigin-RevId: 358291067\nChange-Id: I2f77659b5718c7513c0b4e724fd4c8c8d343f26c"",""distinct"":false,""url"":""https://api.github.com/repos/ddavis-2015/tensorflow/commits/f184809b776e0658f2f025a57e2d5dbc6f7bfb23""},{""sha"":""351fd5e844343348bd6ba1535c908fe0ef0b196b"",""author"":{""name"":""Ken Franko"",""email"":""99675e19a4e19629720cc97f93d3a35dad14ac72@google.com""},""message"":""Emit an error if there is an uncompilable op in tpu cluster and soft_device_placement option is not true.\n\nThis emits an error early rather than a potentially misleading error later in compilation.\n\nPiperOrigin-RevId: 358291279\nChange-Id: I227b8303a6b6245c49243e37b0ee9e2e68c20e35"",""distinct"":false,""url"":""https://api.github.com/repos/ddavis-2015/tensorflow/commits/351fd5e844343348bd6ba1535c908fe0ef0b196b""},{""sha"":""50ea65ffdab19e4ffaf90b3b762bb5756b5e5809"",""author"":{""name"":""Haoliang Zhang"",""email"":""0ed73abe53b90931ec96009f1753190a42740aac@google.com""},""message"":""In lower tensorlist pass, if `allow_tensorlist_pass_through` is true, then emit debug logs (since this is not a failure), otherwise emit standard logs (which is considered as a conversion failure) so that end users will see the error message from the converter stack trace.\n\nPiperOrigin-RevId: 358292147\nChange-Id: I3c4aa367d09e6fbe4543e66121371a4a4e6d311f"",""distinct"":false,""url"":""https://api.github.com/repos/ddavis-2015/tensorflow/commits/50ea65ffdab19e4ffaf90b3b762bb5756b5e5809""},{""sha"":""c29e9f25e761df06e1d401868fbc0ff2071a0ed2"",""author"":{""name"":""Daniel Ellis"",""email"":""debc5fc5255503ceceb6184687cd26898e40e8ac@google.com""},""message"":""Handle garbage collection race condition.\n\nAn exception is being thrown when objects that use `CapturableResourceDeleter` are garbage collected at the end of a program's life.  This can happen in very normal circumstances, such as when using `saved_model_cli` to inspect a model.\n\nThe cause of the exception appears to be a race condition with garbage collection between `CapturableResourceDeleter` and `ScopedTFFunction`. Both define a custom finalizer (`__del__`); `CaptureableResourceDeleter`'s finalizer ultimately calls a concrete function which calls an `_EagerDefinedFunction` which attempts to load and execute a `ScopedTFFunction`.\n\nIn the case of multiple objects in a reference cycle all going unreachable during the same garbage collection cycle, we get no guaranteed ordering for which of the objects will be collected first. In the case of the exception, `ScopedTFFunction` is collected first and its underlying function is deleted. Later, `CapturableResourceDeleter` is called, which fails, since the function it's trying to call is gone.\n\nPiperOrigin-RevId: 358292164\nChange-Id: I9162d5de622f5c1ec9b2954647b9958a7d3d87b6"",""distinct"":false,""url"":""https://api.github.com/repos/ddavis-2015/tensorflow/commits/c29e9f25e761df06e1d401868fbc0ff2071a0ed2""},{""sha"":""be625d2fe824b1f7e12f128b3424f570fc5084d1"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Allow file-based initializers with integer values.\n\nPiperOrigin-RevId: 358292431\nChange-Id: Id27fc2dc0be23ef328503c73394bcbe1f0de59bc"",""distinct"":false,""url"":""https://api.github.com/repos/ddavis-2015/tensorflow/commits/be625d2fe824b1f7e12f128b3424f570fc5084d1""},{""sha"":""3b4f970c3b32d7900650fd238024ad2dfd04c613"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Update ops-related pbtxt files.\n\nPiperOrigin-RevId: 358292541\nChange-Id: Ieb03481abb80ee0e0c0e295fcf4e0726d27f4e02"",""distinct"":false,""url"":""https://api.github.com/repos/ddavis-2015/tensorflow/commits/3b4f970c3b32d7900650fd238024ad2dfd04c613""},{""sha"":""bc292e770cb169dc92756e475e12d4b5b5fcc1c5"",""author"":{""name"":""Mao Yunfei"",""email"":""86eb5a7669f1f3d149fb51be90ee7f30501c4a4c@intel.com""},""message"":""Update tensorflow/core/common_runtime/mkl_layout_pass.cc\n\nCo-authored-by: Penporn Koanantakool <38085909+penpornk@users.noreply.github.com>"",""distinct"":false,""url"":""https://api.github.com/repos/ddavis-2015/tensorflow/commits/bc292e770cb169dc92756e475e12d4b5b5fcc1c5""},{""sha"":""5bdd88c1880d27cafc0a2975bea147a07ab69483"",""author"":{""name"":""Terry Heo"",""email"":""adb666e4c99945ba3cee762e30201b8c3c9c71fc@google.com""},""message"":""Enable a way of providing scalar string input with byte[] in Java API\n\nPiperOrigin-RevId: 358299264\nChange-Id: I7d755a5a306e1267019e12d1bce5e441acd1550b"",""distinct"":false,""url"":""https://api.github.com/repos/ddavis-2015/tensorflow/commits/5bdd88c1880d27cafc0a2975bea147a07ab69483""},{""sha"":""624a4a09389d56aad8473b3d7afea4605134a031"",""author"":{""name"":""Yujing Zhang"",""email"":""6272d5c276c20988c4aa026d0ca68ed1e98bbaa1@google.com""},""message"":""Disable iterator_cluster_test on msan\n\nPiperOrigin-RevId: 358299495\nChange-Id: I6461aa86d5dd82376a53255d208774b3c834df75"",""distinct"":false,""url"":""https://api.github.com/repos/ddavis-2015/tensorflow/commits/624a4a09389d56aad8473b3d7afea4605134a031""},{""sha"":""e87b51ce05c3eb172065a6ea5f48415854223285"",""author"":{""name"":""Ben Barsdell"",""email"":""fb55efc015c19b6b983311e9fae7c0ecda2e4774@nvidia.com""},""message"":""Add GPU implementation of SparseReshape"",""distinct"":false,""url"":""https://api.github.com/repos/ddavis-2015/tensorflow/commits/e87b51ce05c3eb172065a6ea5f48415854223285""},{""sha"":""2c995bda2b90511766ce1b28af8b5f1a2dc08565"",""author"":{""name"":""Yi Situ"",""email"":""d608b0a53b5407a9d3533fc2de56902c2a2e6e5a@google.com""},""message"":""Change TPU_LOAD_LIBRARY to accept 1/0 instead of true/false.\n\nPiperOrigin-RevId: 358300004\nChange-Id: I93059c5e8fa32463be8a7e598009219a450b498e"",""distinct"":false,""url"":""https://api.github.com/repos/ddavis-2015/tensorflow/commits/2c995bda2b90511766ce1b28af8b5f1a2dc08565""},{""sha"":""72684b41eb8266a6d5df36a0e795a8a85b401f86"",""author"":{""name"":""Yunxing Dai"",""email"":""0e6edd405794f4fb8b1584e93c0a178f5c32bc6a@google.com""},""message"":""Disable parse_headers in compiler/jit/BUILD's header only target.\n\nPiperOrigin-RevId: 358302609\nChange-Id: I99c0dd7162bb8e397e0a44e85bea1888c9ad4cee"",""distinct"":false,""url"":""https://api.github.com/repos/ddavis-2015/tensorflow/commits/72684b41eb8266a6d5df36a0e795a8a85b401f86""},{""sha"":""810e10d62885448a156edc2614959f3e797e6a05"",""author"":{""name"":""Jay Shi"",""email"":""e897f875e7eecba4f594811400ad317ea478b9da@google.com""},""message"":""[tf.data] Add benchmark to compare autotuned MapAndBatchDataset with autotuned ParallelMapDataset followed by ParallelBatchDataset.\n\nPiperOrigin-RevId: 358303549\nChange-Id: I49ad3093d72b78ad436d0d9a98f73dbaf4c2eaa8"",""distinct"":false,""url"":""https://api.github.com/repos/ddavis-2015/tensorflow/commits/810e10d62885448a156edc2614959f3e797e6a05""},{""sha"":""0795d9d94c661301a1a89918476e133e0f05334c"",""author"":{""name"":""Jaesung Chung"",""email"":""935e11c5b050a3a02c4f0e08de55daf431709deb@google.com""},""message"":""Add a new pass that freezes SavedModel's AssetOp\n\nThis new pass will replace a func's saved model asset bound inputs which are\nbound to tf.InitializeTableFromTextFileV2Op ops with tf.Const ops inside the\nfunc's body.\n\ncloses #46737\n\nPiperOrigin-RevId: 358304291\nChange-Id: I2bd2f6fbcafc30c878a7848eb4c107c3b48d9673"",""distinct"":false,""url"":""https://api.github.com/repos/ddavis-2015/tensorflow/commits/0795d9d94c661301a1a89918476e133e0f05334c""},{""sha"":""0f4c8f4a7b87199784510202789d0d6a9a50190a"",""author"":{""name"":""Geoffrey Martin-Noble"",""email"":""1b50226fb1523bae5dacd737e03523712e2ae5a7@google.com""},""message"":""Make LLVMIRModuleTranslation target name match CMake name\n\nPiperOrigin-RevId: 358306741\nChange-Id: I12e79c398db0504ead0130acae2a0cca8c76a7db"",""distinct"":false,""url"":""https://api.github.com/repos/ddavis-2015/tensorflow/commits/0f4c8f4a7b87199784510202789d0d6a9a50190a""},{""sha"":""a8d2bce4613ec6da9e28df25cde31cb938753dac"",""author"":{""name"":""Meghna Natraj"",""email"":""2565af4be4b9e3f79d7ed44b02ee9244f1214104@google.com""},""message"":""Separate the TF to TFLite type conversion based on their usage (for the TF model or the TFLite model)\n\nPiperOrigin-RevId: 358307744\nChange-Id: I942ad076fcac7360c0e221a4098105c763ee960c"",""distinct"":false,""url"":""https://api.github.com/repos/ddavis-2015/tensorflow/commits/a8d2bce4613ec6da9e28df25cde31cb938753dac""},{""sha"":""4a7d4b38874d47d2ce3f415f4d151d5124819201"",""author"":{""name"":""Yujing Zhang"",""email"":""6272d5c276c20988c4aa026d0ca68ed1e98bbaa1@google.com""},""message"":""[XLA:GPU] Introduce CollectiveOpGroupMode and related helpers.\n\n- Introduce a CollectiveOpGroupMode enum to describe various modes of interpreting\n  replica groups attached to collective communication operations and\n  GetCollectiveOpGroupMode() function to get the group formation mode\n  implied by an HLO collective op based on whether it has channel_id and\n  use_global_device_ids.\n- Fix GetParticipatingDevices() to use this mode to correctly find participants in all\n  group formatio...\n\nPiperOrigin-RevId: 358313513\nChange-Id: I9103d065c0a89149bcad3fa6b275696a257c97ae"",""distinct"":false,""url"":""https://api.github.com/repos/ddavis-2015/tensorflow/commits/4a7d4b38874d47d2ce3f415f4d151d5124819201""},{""sha"":""61f4be7e5b5a0a7b87c60107a6785c40d21cbab1"",""author"":{""name"":""Yi Situ"",""email"":""d608b0a53b5407a9d3533fc2de56902c2a2e6e5a@google.com""},""message"":""Remove preprocessor guards.\n\nPiperOrigin-RevId: 358313521\nChange-Id: I9100dbf8d82dc695a896a7b61c433ef38865ec9d"",""distinct"":false,""url"":""https://api.github.com/repos/ddavis-2015/tensorflow/commits/61f4be7e5b5a0a7b87c60107a6785c40d21cbab1""}]",,,,,,,,,,
15434098155,CreateEvent,true,2021-03-07 01:18:14.000000 UTC,19911444,swarupsrini,338179606,swarupsrini/scikit-learn,"""bug/19538""","""branch""","""user""",,,,,,,,,,,,,,
15434086342,PullRequestEvent,true,2021-03-07 01:14:11.000000 UTC,39814207,pull[bot],95927693,akram/tensorflow,,,,,,,,"""opened""",4307,,,,,,,,
15434088261,PushEvent,true,2021-03-07 01:14:51.000000 UTC,39814207,pull[bot],95927693,akram/tensorflow,"""refs/heads/master""",,,6658016659,1,1,"[{""sha"":""99b1fa6a15a6c82eb5ac2642d93fee810a2c766d"",""author"":{""name"":""Jiri Simsa"",""email"":""b53bfee97ac78a1d2afd0ef6138945f352c1fa9d@google.com""},""message"":""[tf.data] Make error message more informative.\n\nPiperOrigin-RevId: 361352108\nChange-Id: Ib4ffb578da274df1accb615f7fe1c04bd58b321d"",""distinct"":true,""url"":""https://api.github.com/repos/akram/tensorflow/commits/99b1fa6a15a6c82eb5ac2642d93fee810a2c766d""}]",,,,,,,,,,
15434088281,PullRequestEvent,true,2021-03-07 01:14:51.000000 UTC,39814207,pull[bot],95927693,akram/tensorflow,,,,,,,,"""closed""",4307,,,,,,,,
15434110758,PullRequestEvent,true,2021-03-07 01:22:44.000000 UTC,39814207,pull[bot],65461415,PowerOlive/tensorflow,,,,,,,,"""opened""",167,,,,,,,,
15434111735,PushEvent,true,2021-03-07 01:23:05.000000 UTC,39814207,pull[bot],65461415,PowerOlive/tensorflow,"""refs/heads/master""",,,6658031519,1,1,"[{""sha"":""99b1fa6a15a6c82eb5ac2642d93fee810a2c766d"",""author"":{""name"":""Jiri Simsa"",""email"":""b53bfee97ac78a1d2afd0ef6138945f352c1fa9d@google.com""},""message"":""[tf.data] Make error message more informative.\n\nPiperOrigin-RevId: 361352108\nChange-Id: Ib4ffb578da274df1accb615f7fe1c04bd58b321d"",""distinct"":true,""url"":""https://api.github.com/repos/PowerOlive/tensorflow/commits/99b1fa6a15a6c82eb5ac2642d93fee810a2c766d""}]",,,,,,,,,,
15434111768,PullRequestEvent,true,2021-03-07 01:23:06.000000 UTC,39814207,pull[bot],65461415,PowerOlive/tensorflow,,,,,,,,"""closed""",167,,,,,,,,
15434122995,PullRequestEvent,true,2021-03-07 01:27:11.000000 UTC,39814207,pull[bot],339262813,Jeffkeen7/tensorflow,,,,,,,,"""opened""",61,,,,,,,,
15434123614,PushEvent,true,2021-03-07 01:27:24.000000 UTC,39814207,pull[bot],339262813,Jeffkeen7/tensorflow,"""refs/heads/master""",,,6658039133,1,1,"[{""sha"":""99b1fa6a15a6c82eb5ac2642d93fee810a2c766d"",""author"":{""name"":""Jiri Simsa"",""email"":""b53bfee97ac78a1d2afd0ef6138945f352c1fa9d@google.com""},""message"":""[tf.data] Make error message more informative.\n\nPiperOrigin-RevId: 361352108\nChange-Id: Ib4ffb578da274df1accb615f7fe1c04bd58b321d"",""distinct"":true,""url"":""https://api.github.com/repos/Jeffkeen7/tensorflow/commits/99b1fa6a15a6c82eb5ac2642d93fee810a2c766d""}]",,,,,,,,,,
15434123629,PullRequestEvent,true,2021-03-07 01:27:25.000000 UTC,39814207,pull[bot],339262813,Jeffkeen7/tensorflow,,,,,,,,"""closed""",61,,,,,,,,
15434162370,PullRequestEvent,true,2021-03-07 01:41:13.000000 UTC,39814207,pull[bot],56189869,xiaohanhuang/tensorflow,,,,,,,,"""opened""",2093,,,,,,,,
15434164556,PushEvent,true,2021-03-07 01:42:04.000000 UTC,39814207,pull[bot],56189869,xiaohanhuang/tensorflow,"""refs/heads/master""",,,6658066058,1,1,"[{""sha"":""99b1fa6a15a6c82eb5ac2642d93fee810a2c766d"",""author"":{""name"":""Jiri Simsa"",""email"":""b53bfee97ac78a1d2afd0ef6138945f352c1fa9d@google.com""},""message"":""[tf.data] Make error message more informative.\n\nPiperOrigin-RevId: 361352108\nChange-Id: Ib4ffb578da274df1accb615f7fe1c04bd58b321d"",""distinct"":true,""url"":""https://api.github.com/repos/xiaohanhuang/tensorflow/commits/99b1fa6a15a6c82eb5ac2642d93fee810a2c766d""}]",,,,,,,,,,
15434164579,PullRequestEvent,true,2021-03-07 01:42:05.000000 UTC,39814207,pull[bot],56189869,xiaohanhuang/tensorflow,,,,,,,,"""closed""",2093,,,,,,,,
15434079371,PushEvent,true,2021-03-07 01:11:52.000000 UTC,49194747,ChenTongGit,344987634,ChenTongGit/dubbo,"""refs/heads/master""",,,6658010888,1,1,"[{""sha"":""3a1eb2e6a3754fe4ac341bbb28ff7767faf92a15"",""author"":{""name"":""ChenTongGit"",""email"":""0795f87765721d475e4be362a6d6f230c89b1372@qq.com""},""message"":""test git"",""distinct"":true,""url"":""https://api.github.com/repos/ChenTongGit/dubbo/commits/3a1eb2e6a3754fe4ac341bbb28ff7767faf92a15""}]",,,,,,,,,,
15434120062,PushEvent,true,2021-03-07 01:26:08.000000 UTC,54755552,General-m,342052516,General-m/react,"""refs/heads/tic-tac-toe""",,,6658036900,1,1,"[{""sha"":""c3916ed65f6681a061bdb1d97fb086eeeb3ac379"",""author"":{""name"":""General"",""email"":""7452bc65fc464ec97cb0955c30bbec9df344d0ba@yandex.ru""},""message"":""fix bags"",""distinct"":true,""url"":""https://api.github.com/repos/General-m/react/commits/c3916ed65f6681a061bdb1d97fb086eeeb3ac379""}]",,,,,,,,,,
15434126361,PushEvent,true,2021-03-07 01:28:22.000000 UTC,54755552,General-m,342052516,General-m/react,"""refs/heads/gh-pages""",,,6658040938,1,1,"[{""sha"":""8a773e1fdb4fe822dfb324cc3572ff4a405e0f25"",""author"":{""name"":""General"",""email"":""7452bc65fc464ec97cb0955c30bbec9df344d0ba@yandex.ru""},""message"":""delete build"",""distinct"":true,""url"":""https://api.github.com/repos/General-m/react/commits/8a773e1fdb4fe822dfb324cc3572ff4a405e0f25""}]",,,,,,,,,,
15434130035,PushEvent,true,2021-03-07 01:29:42.000000 UTC,54755552,General-m,342052516,General-m/react,"""refs/heads/gh-pages""",,,6658043358,1,1,"[{""sha"":""30ce8e3811576b3740a5930f12b85de1542a5ecc"",""author"":{""name"":""General"",""email"":""7452bc65fc464ec97cb0955c30bbec9df344d0ba@yandex.ru""},""message"":""feat:add build"",""distinct"":true,""url"":""https://api.github.com/repos/General-m/react/commits/30ce8e3811576b3740a5930f12b85de1542a5ecc""}]",,,,,,,,,,
15434200812,PushEvent,true,2021-03-07 01:55:30.000000 UTC,54755552,General-m,342052516,General-m/react,"""refs/heads/tic-tac-toe""",,,6658089303,1,1,"[{""sha"":""723e54353dcc0cea41072cb862fe927e945b1c15"",""author"":{""name"":""General"",""email"":""7452bc65fc464ec97cb0955c30bbec9df344d0ba@yandex.ru""},""message"":""fix: path for routing"",""distinct"":true,""url"":""https://api.github.com/repos/General-m/react/commits/723e54353dcc0cea41072cb862fe927e945b1c15""}]",,,,,,,,,,
15434209034,PushEvent,true,2021-03-07 01:58:30.000000 UTC,54755552,General-m,342052516,General-m/react,"""refs/heads/gh-pages""",,,6658094660,1,1,"[{""sha"":""5443d8191fcdb921fc2bd870443b665e3bdec44b"",""author"":{""name"":""General"",""email"":""7452bc65fc464ec97cb0955c30bbec9df344d0ba@yandex.ru""},""message"":""delete build"",""distinct"":true,""url"":""https://api.github.com/repos/General-m/react/commits/5443d8191fcdb921fc2bd870443b665e3bdec44b""}]",,,,,,,,,,
15434210884,PushEvent,true,2021-03-07 01:59:12.000000 UTC,54755552,General-m,342052516,General-m/react,"""refs/heads/gh-pages""",,,6658095791,1,1,"[{""sha"":""82c541d6450e8ced1d76b4d79a34d47d550a8505"",""author"":{""name"":""General"",""email"":""7452bc65fc464ec97cb0955c30bbec9df344d0ba@yandex.ru""},""message"":""add build"",""distinct"":true,""url"":""https://api.github.com/repos/General-m/react/commits/82c541d6450e8ced1d76b4d79a34d47d550a8505""}]",,,,,,,,,,
15434107049,PushEvent,true,2021-03-07 01:21:25.000000 UTC,77905825,asagaorino0,340782829,asagaorino0/react,"""refs/heads/main""",,,6658028562,1,1,"[{""sha"":""c4a1e9cfdf38df72fe2e46ffa574990c6cdbf5aa"",""author"":{""name"":""asagaorino0"",""email"":""3bbf2f29f2bdc47a55913c0055f757ff68e1c4db@yahoo.co.jp""},""message"":""[add]202103071022"",""distinct"":true,""url"":""https://api.github.com/repos/asagaorino0/react/commits/c4a1e9cfdf38df72fe2e46ffa574990c6cdbf5aa""}]",,,,,,,,,,
15434109188,IssueCommentEvent,true,2021-03-07 01:22:10.000000 UTC,41923099,dbwong,20473418,apache/phoenix,,,,,,,,"""created""",,,,,,,,,
15434077820,IssueCommentEvent,true,2021-03-07 01:11:24.000000 UTC,29597,bvaughn,10270250,facebook/react,,,,,,,,"""created""",,,,,,,,,
15434077834,IssuesEvent,true,2021-03-07 01:11:24.000000 UTC,29597,bvaughn,10270250,facebook/react,,,,,,,,"""closed""",,,,,,,,,
15434090004,WatchEvent,true,2021-03-07 01:15:24.000000 UTC,46067278,nikolaCro,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15434112868,ForkEvent,true,2021-03-07 01:23:32.000000 UTC,45161337,Ali-AlRawaf,843222,scikit-learn/scikit-learn,,,,,,,,,,"""Ali-AlRawaf/scikit-learn""",,,,,,,
15434186260,IssueCommentEvent,true,2021-03-07 01:50:05.000000 UTC,35615658,hashibot[bot],17728164,hashicorp/terraform,,,,,,,,"""created""",,,,,,,,,
15434186571,IssueCommentEvent,true,2021-03-07 01:50:11.000000 UTC,35615658,hashibot[bot],17728164,hashicorp/terraform,,,,,,,,"""created""",,,,,,,,,
15434186831,IssueCommentEvent,true,2021-03-07 01:50:17.000000 UTC,35615658,hashibot[bot],17728164,hashicorp/terraform,,,,,,,,"""created""",,,,,,,,,
15434187057,IssueCommentEvent,true,2021-03-07 01:50:23.000000 UTC,35615658,hashibot[bot],17728164,hashicorp/terraform,,,,,,,,"""created""",,,,,,,,,
15434187293,IssueCommentEvent,true,2021-03-07 01:50:29.000000 UTC,35615658,hashibot[bot],17728164,hashicorp/terraform,,,,,,,,"""created""",,,,,,,,,
15434187572,IssueCommentEvent,true,2021-03-07 01:50:35.000000 UTC,35615658,hashibot[bot],17728164,hashicorp/terraform,,,,,,,,"""created""",,,,,,,,,
15434187854,IssueCommentEvent,true,2021-03-07 01:50:41.000000 UTC,35615658,hashibot[bot],17728164,hashicorp/terraform,,,,,,,,"""created""",,,,,,,,,
15434188112,IssueCommentEvent,true,2021-03-07 01:50:47.000000 UTC,35615658,hashibot[bot],17728164,hashicorp/terraform,,,,,,,,"""created""",,,,,,,,,
15434188354,IssueCommentEvent,true,2021-03-07 01:50:53.000000 UTC,35615658,hashibot[bot],17728164,hashicorp/terraform,,,,,,,,"""created""",,,,,,,,,
15434188605,IssueCommentEvent,true,2021-03-07 01:50:59.000000 UTC,35615658,hashibot[bot],17728164,hashicorp/terraform,,,,,,,,"""created""",,,,,,,,,
15434129729,IssueCommentEvent,true,2021-03-07 01:29:35.000000 UTC,1182323,vonnieda,44317328,openpnp/opencv,,,,,,,,"""created""",,,,,,,,,
15434129744,PullRequestEvent,true,2021-03-07 01:29:36.000000 UTC,1182323,vonnieda,44317328,openpnp/opencv,,,,,,,,"""closed""",56,,,,,,,,
15434079594,WatchEvent,true,2021-03-07 01:11:56.000000 UTC,57705291,sam-hit,5108051,opencv/opencv,,,,,,,,"""started""",,,,,,,,,
15434087921,WatchEvent,true,2021-03-07 01:14:44.000000 UTC,10968101,akarimcheese,16072585,phoenixframework/phoenix,,,,,,,,"""started""",,,,,,,,,
15434094634,IssueCommentEvent,true,2021-03-07 01:17:00.000000 UTC,3395998,freedomtan,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15434088519,PullRequestEvent,true,2021-03-07 01:14:56.000000 UTC,13169112,ddavis-2015,45717250,tensorflow/tensorflow,,,,,,,,"""opened""",47614,,,,,,,,
15434120747,IssueCommentEvent,true,2021-03-07 01:26:22.000000 UTC,17668390,innat,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15434120954,IssuesEvent,true,2021-03-07 01:26:26.000000 UTC,17668390,innat,45717250,tensorflow/tensorflow,,,,,,,,"""closed""",,,,,,,,,
15434080395,WatchEvent,true,2021-03-07 01:12:10.000000 UTC,17986181,sey323,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15434053267,IssueCommentEvent,true,2021-03-07 01:03:11.000000 UTC,25419817,ameyparanjape,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15434046216,IssueCommentEvent,true,2021-03-07 01:00:48.000000 UTC,28546240,tensorflowbutler,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15434090103,IssueCommentEvent,true,2021-03-07 01:15:27.000000 UTC,55858104,google-cla[bot],45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15434089296,IssueCommentEvent,true,2021-03-07 01:15:10.000000 UTC,56610014,tensorflow-butler[bot],45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15434136066,WatchEvent,true,2021-03-07 01:31:47.000000 UTC,77377055,WAN-cpu,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15434173936,WatchEvent,true,2021-03-07 01:45:29.000000 UTC,2886911,kord,135786093,typescript-cheatsheets/react,,,,,,,,"""started""",,,,,,,,,
15434197220,WatchEvent,true,2021-03-07 01:54:15.000000 UTC,5652744,wurikiji,135786093,typescript-cheatsheets/react,,,,,,,,"""started""",,,,,,,,,
15434159266,WatchEvent,true,2021-03-07 01:40:06.000000 UTC,42924565,EdwBaeza,135786093,typescript-cheatsheets/react,,,,,,,,"""started""",,,,,,,,,
15434129334,PushEvent,true,2021-03-07 01:29:26.000000 UTC,10389889,zhangyz-hd,341746203,70-cloud-lab/dubbo,"""refs/heads/master""",,,6658042880,2,2,"[{""sha"":""eef6b450fc69f6670d19c050719a6766343a1729"",""author"":{""name"":""Owen.Cai"",""email"":""112aeff359eed98da34afa9d11e4f27c2ab2a529@qq.com""},""message"":""fix generic interface metadata publish log error (#6746)"",""distinct"":true,""url"":""https://api.github.com/repos/70-cloud-lab/dubbo/commits/eef6b450fc69f6670d19c050719a6766343a1729""},{""sha"":""2062cdb2c537000c86555570c8d6c894f88bb7b7"",""author"":{""name"":""赵延"",""email"":""5ce2568d239a6eae7b30532b978f5499c59afae5@qq.com""},""message"":""[ISSUE-#6904] Fix reflect invoke error in org.apache.dubbo.common.utils.PojoUtils#generalize (#6905)\n\n* fix when the class is not public static, reflect invoke failed\r\n\r\n* add doc"",""distinct"":true,""url"":""https://api.github.com/repos/70-cloud-lab/dubbo/commits/2062cdb2c537000c86555570c8d6c894f88bb7b7""}]",,,,,,,,,,
15434049156,PushEvent,true,2021-03-07 01:01:47.000000 UTC,65395387,stefan-hartmann-lgs,266995363,hexagon-geo-surv/opencv,"""refs/heads/master""",,,6657991891,19,1,"[{""sha"":""cc22a73d0fb88925617245bd03ed71b9bf358e9c"",""author"":{""name"":""Rachel A"",""email"":""64266c24f0eb35574b62f76a6ea688c33967d3e9@gmail.com""},""message"":""EXR alpha support for 4 channel reading and writing.  Issue https://github.com/opencv/opencv/issues/16115."",""distinct"":false,""url"":""https://api.github.com/repos/hexagon-geo-surv/opencv/commits/cc22a73d0fb88925617245bd03ed71b9bf358e9c""},{""sha"":""cbfd38bd41e91433b7a23348ae65d3adff2bc20b"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""core: rework code locality\n\n- to reduce binaries size of FFmpeg Windows wrapper\n- MinGW linker doesn't support -ffunction-sections (used for FFmpeg Windows wrapper)\n- move code to improve locality with its used dependencies\n- move UMat::dot() to matmul.dispatch.cpp (Mat::dot() is already there)\n- move UMat::inv() to lapack.cpp\n- move UMat::mul() to arithm.cpp\n- move UMat:eye() to matrix_operations.cpp (near setIdentity() implementation)\n- move normalize(): convert_scale.cpp => norm.cpp\n- move convertAndUnrollScalar(): arithm.cpp => copy.cpp\n- move scalarToRawData(): array.cpp => copy.cpp\n- move transpose(): matrix_operations.cpp => matrix_transform.cpp\n- move flip(), rotate(): copy.cpp => matrix_transform.cpp (rotate90 uses flip and transpose)\n- add 'OPENCV_CORE_EXCLUDE_C_API' CMake variable to exclude compilation of C-API functions from the core module\n- matrix_wrap.cpp: add compile-time checks for CUDA/OpenGL calls\n- the steps above allow to reduce FFmpeg wrapper size for ~1.5Mb (initial size of OpenCV part is about 3Mb)\n\nbackport is done to improve merge experience (less conflicts)\nbackport of commit: 65eb9467567598c08049bb190a4f3d3cbfabdcd0"",""distinct"":false,""url"":""https://api.github.com/repos/hexagon-geo-surv/opencv/commits/cbfd38bd41e91433b7a23348ae65d3adff2bc20b""},{""sha"":""75ad74c893a02728821d8432fe73e89e35f49ec0"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""ffmpeg/3.4: update FFmpeg wrapper 2021.03\n\n- FFmpeg 3.4.8"",""distinct"":false,""url"":""https://api.github.com/repos/hexagon-geo-surv/opencv/commits/75ad74c893a02728821d8432fe73e89e35f49ec0""},{""sha"":""0689c70dba067e1539a7ed97d93ab4ddb3141f28"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19665 from alalek:update_ffmpeg_3.4"",""distinct"":false,""url"":""https://api.github.com/repos/hexagon-geo-surv/opencv/commits/0689c70dba067e1539a7ed97d93ab4ddb3141f28""},{""sha"":""a42d4da003357751a3579bef1568dcbf803f8bb7"",""author"":{""name"":""SamFC10"",""email"":""698de89357824e9e1a6b901f367c9eb7db76d8bf@gmail.com""},""message"":""Added Spatial Attention Module in Darknet Importer"",""distinct"":false,""url"":""https://api.github.com/repos/hexagon-geo-surv/opencv/commits/a42d4da003357751a3579bef1568dcbf803f8bb7""},{""sha"":""a0008de281eeeb1d933deb47fc3f3580698af583"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19607 from alalek:backport_19606"",""distinct"":false,""url"":""https://api.github.com/repos/hexagon-geo-surv/opencv/commits/a0008de281eeeb1d933deb47fc3f3580698af583""},{""sha"":""94533e12ebd6e131723a53e2d31e97986fea6e5b"",""author"":{""name"":""Liubov Batanina"",""email"":""e31e9421dee8ae251952f0c15777e23a2fd06308@yandex.ru""},""message"":""Determine layout"",""distinct"":false,""url"":""https://api.github.com/repos/hexagon-geo-surv/opencv/commits/94533e12ebd6e131723a53e2d31e97986fea6e5b""},{""sha"":""2a808aeec0fd8f59693a14ce928f7e7f6faf994e"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19674 from l-bat:lb/fix_ie_tests"",""distinct"":false,""url"":""https://api.github.com/repos/hexagon-geo-surv/opencv/commits/2a808aeec0fd8f59693a14ce928f7e7f6faf994e""},{""sha"":""125cc79c179f364eeecda72b24e6bb2da2f1bd1e"",""author"":{""name"":""APrigarina"",""email"":""abf344ab534beba5b17e17161e13390076563c5e@gmail.com""},""message"":""fix false positive detection"",""distinct"":false,""url"":""https://api.github.com/repos/hexagon-geo-surv/opencv/commits/125cc79c179f364eeecda72b24e6bb2da2f1bd1e""},{""sha"":""7894cd3c73df5b90139c54c664225b913c5f049c"",""author"":{""name"":""Anastasia Murzova"",""email"":""8bc365a45af96f6305a79f5acc72147e62a77709@xperience.ai""},""message"":""Aligned TF Reshape layer behaviour"",""distinct"":false,""url"":""https://api.github.com/repos/hexagon-geo-surv/opencv/commits/7894cd3c73df5b90139c54c664225b913c5f049c""},{""sha"":""f821530eb020322b203326fd632ff0b3dbe6663d"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19677 from APrigarina:detection_fix"",""distinct"":false,""url"":""https://api.github.com/repos/hexagon-geo-surv/opencv/commits/f821530eb020322b203326fd632ff0b3dbe6663d""},{""sha"":""625d4fc8843435a505adeec752d5f17e1c153cef"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""cmake: update Python linters handling\n\n- exclude from getBuildInformation()\n- fix pylint version"",""distinct"":false,""url"":""https://api.github.com/repos/hexagon-geo-surv/opencv/commits/625d4fc8843435a505adeec752d5f17e1c153cef""},{""sha"":""a1e2c4f338cb295813bd7081acb170195d359340"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19655 from raaldrid:EXR_rw_alpha_support_16115"",""distinct"":false,""url"":""https://api.github.com/repos/hexagon-geo-surv/opencv/commits/a1e2c4f338cb295813bd7081acb170195d359340""},{""sha"":""640f188ca269c7cc7134c70725789e556a7a9733"",""author"":{""name"":""Mradul Agrawal"",""email"":""01a8833d44168c9f10b70fd514a30c995d450d2b@users.noreply.github.com""},""message"":""Merge pull request #19583 from theroyalpekka:patch-1\n\n* Update polynom_solver.cpp\r\n\r\nThis pull request is in the response to Issue  #19526. I have fixed the problem with the cube root calculation of 2*R. The Issue was in the usage of pow function with negative values of R, but if it is calculated for only positive values of R then changing x0 according to the parity of R, the Issue is resolved. Kindly consider it, Thanks!\r\n\r\n* add cv::cubeRoot(double)\r\n\r\nCo-authored-by: Alexander Alekhin <alexander.a.alekhin@gmail.com>"",""distinct"":false,""url"":""https://api.github.com/repos/hexagon-geo-surv/opencv/commits/640f188ca269c7cc7134c70725789e556a7a9733""},{""sha"":""358878caf7563d2e02f21ea68da9fe9c2633c8bd"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19671 from SamFC10:sam-darknet"",""distinct"":false,""url"":""https://api.github.com/repos/hexagon-geo-surv/opencv/commits/358878caf7563d2e02f21ea68da9fe9c2633c8bd""},{""sha"":""d2cc63e7791c38424b9a625f7fb773baaa65662a"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19680 from alalek:cmake_update_python_linters"",""distinct"":false,""url"":""https://api.github.com/repos/hexagon-geo-surv/opencv/commits/d2cc63e7791c38424b9a625f7fb773baaa65662a""},{""sha"":""dc24663e8da94b9d4a76ee4af05dfd39929d91fa"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19641 from LupusSanctus:am/tf_reshape"",""distinct"":false,""url"":""https://api.github.com/repos/hexagon-geo-surv/opencv/commits/dc24663e8da94b9d4a76ee4af05dfd39929d91fa""},{""sha"":""04a9ff88d80fd2757b0545e7420884a4394394af"",""author"":{""name"":""Vitaly Tuzov"",""email"":""c906dfd627a0bfac42039000d8b1f1350c86c6a1@intel.com""},""message"":""Merge pull request #19622 from terfendail:ref_doc\n\n* Updated cpp reference implementations for a few intrinsics to address wide universal intrinsics as well\r\n\r\n* Updated cpp reference implementations for a few more universal intrinsics"",""distinct"":false,""url"":""https://api.github.com/repos/hexagon-geo-surv/opencv/commits/04a9ff88d80fd2757b0545e7420884a4394394af""},{""sha"":""d643a90efa643f10b1426028acaa97aecef54bdf"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge remote-tracking branch 'upstream/3.4' into merge-3.4"",""distinct"":true,""url"":""https://api.github.com/repos/hexagon-geo-surv/opencv/commits/d643a90efa643f10b1426028acaa97aecef54bdf""}]",,,,,,,,,,
15434049184,PushEvent,true,2021-03-07 01:01:48.000000 UTC,65395387,stefan-hartmann-lgs,266995363,hexagon-geo-surv/opencv,"""refs/heads/3.4""",,,6657991907,5,0,"[{""sha"":""7894cd3c73df5b90139c54c664225b913c5f049c"",""author"":{""name"":""Anastasia Murzova"",""email"":""8bc365a45af96f6305a79f5acc72147e62a77709@xperience.ai""},""message"":""Aligned TF Reshape layer behaviour"",""distinct"":false,""url"":""https://api.github.com/repos/hexagon-geo-surv/opencv/commits/7894cd3c73df5b90139c54c664225b913c5f049c""},{""sha"":""625d4fc8843435a505adeec752d5f17e1c153cef"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""cmake: update Python linters handling\n\n- exclude from getBuildInformation()\n- fix pylint version"",""distinct"":false,""url"":""https://api.github.com/repos/hexagon-geo-surv/opencv/commits/625d4fc8843435a505adeec752d5f17e1c153cef""},{""sha"":""d2cc63e7791c38424b9a625f7fb773baaa65662a"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19680 from alalek:cmake_update_python_linters"",""distinct"":false,""url"":""https://api.github.com/repos/hexagon-geo-surv/opencv/commits/d2cc63e7791c38424b9a625f7fb773baaa65662a""},{""sha"":""dc24663e8da94b9d4a76ee4af05dfd39929d91fa"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19641 from LupusSanctus:am/tf_reshape"",""distinct"":false,""url"":""https://api.github.com/repos/hexagon-geo-surv/opencv/commits/dc24663e8da94b9d4a76ee4af05dfd39929d91fa""},{""sha"":""04a9ff88d80fd2757b0545e7420884a4394394af"",""author"":{""name"":""Vitaly Tuzov"",""email"":""c906dfd627a0bfac42039000d8b1f1350c86c6a1@intel.com""},""message"":""Merge pull request #19622 from terfendail:ref_doc\n\n* Updated cpp reference implementations for a few intrinsics to address wide universal intrinsics as well\r\n\r\n* Updated cpp reference implementations for a few more universal intrinsics"",""distinct"":false,""url"":""https://api.github.com/repos/hexagon-geo-surv/opencv/commits/04a9ff88d80fd2757b0545e7420884a4394394af""}]",,,,,,,,,,
15435334990,CreateEvent,true,2021-03-07 08:22:51.000000 UTC,5842681,JerryShih,133468617,JerryShih/tensorflow,"""xnnpack-error""","""branch""","""user""",,,,,,,,,,,,,,
15435274467,CreateEvent,true,2021-03-07 08:04:39.000000 UTC,16300669,hugenshen,345290902,hugenshen/phoenix,,"""repository""","""user""",,,,,,,,,,,,,,
15435285943,CreateEvent,true,2021-03-07 08:08:08.000000 UTC,16300669,hugenshen,345291444,hugenshen/phoenix,,"""repository""","""user""",,,,,,,,,,,,,,
15435285982,CreateEvent,true,2021-03-07 08:08:09.000000 UTC,16300669,hugenshen,345291444,hugenshen/phoenix,"""main""","""branch""","""user""",,,,,,,,,,,,,,
15435321314,PushEvent,true,2021-03-07 08:18:51.000000 UTC,16300669,hugenshen,345291444,hugenshen/phoenix,"""refs/heads/main""",,,6658800590,1,1,"[{""sha"":""46eae6fc4e34fa253e95ef82612cdb80d29cc116"",""author"":{""name"":""hugenshen"",""email"":""22da42f32062155db50adf848c9fad050b4c4e29@163.com""},""message"":""add the base java project"",""distinct"":true,""url"":""https://api.github.com/repos/hugenshen/phoenix/commits/46eae6fc4e34fa253e95ef82612cdb80d29cc116""}]",,,,,,,,,,
15435346689,PushEvent,true,2021-03-07 08:26:17.000000 UTC,18458248,shlev,344504087,shlev/react,"""refs/heads/main""",,,6658816393,1,1,"[{""sha"":""70cc7c48fbe35d4cb8987271645dbf31b434b84d"",""author"":{""name"":""shlomi"",""email"":""6f01bf2e882e3bb6371d28d1418e5f729e7183e6@magic-flex.com""},""message"":""handling events"",""distinct"":true,""url"":""https://api.github.com/repos/shlev/react/commits/70cc7c48fbe35d4cb8987271645dbf31b434b84d""}]",,,,,,,,,,
15435293411,IssueCommentEvent,true,2021-03-07 08:10:20.000000 UTC,32347756,todo[bot],228097715,njzjz/tensorflow,,,,,,,,"""created""",,,,,,,,,
15435314778,CreateEvent,true,2021-03-07 08:16:52.000000 UTC,35373005,Jasonhls,345278613,Jasonhls/dubbo,"""3.0""","""branch""","""user""",,,,,,,,,,,,,,
15435283770,PullRequestEvent,true,2021-03-07 08:07:29.000000 UTC,39814207,pull[bot],113451460,JCofman/react,,,,,,,,"""opened""",392,,,,,,,,
15435285083,PushEvent,true,2021-03-07 08:07:52.000000 UTC,39814207,pull[bot],113451460,JCofman/react,"""refs/heads/master""",,,6658777674,2,2,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/JCofman/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/JCofman/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15435285096,PullRequestEvent,true,2021-03-07 08:07:52.000000 UTC,39814207,pull[bot],113451460,JCofman/react,,,,,,,,"""closed""",392,,,,,,,,
15435293260,PullRequestEvent,true,2021-03-07 08:10:17.000000 UTC,39814207,pull[bot],228097715,njzjz/tensorflow,,,,,,,,"""opened""",1744,,,,,,,,
15435293957,PullRequestEvent,true,2021-03-07 08:10:30.000000 UTC,39814207,pull[bot],49518776,SimenB/react,,,,,,,,"""opened""",1492,,,,,,,,
15435294412,PushEvent,true,2021-03-07 08:10:38.000000 UTC,39814207,pull[bot],49518776,SimenB/react,"""refs/heads/master""",,,6658783686,2,2,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/SimenB/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/SimenB/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15435294433,PullRequestEvent,true,2021-03-07 08:10:38.000000 UTC,39814207,pull[bot],49518776,SimenB/react,,,,,,,,"""closed""",1492,,,,,,,,
15435295764,PushEvent,true,2021-03-07 08:11:03.000000 UTC,39814207,pull[bot],228097715,njzjz/tensorflow,"""refs/heads/master""",,,6658784565,1,1,"[{""sha"":""fb7d34de0a7a892d070104aa4e385159817e7ef5"",""author"":{""name"":""Smit Hinsu"",""email"":""0f9dce5f2da36d8473ff9a50fbb0e06a148c5fae@google.com""},""message"":""Add prepare-tpu-computation-for-tf-export pass\n\nThis pass transforms the MLIR module attached to _TpuCompileMlir op to be legal for export to TensorFlow GraphDef. Currently, this pass handles mhlo.sharding attribute on function attributes by passing them through TF XlaSharding ops and dropping tf.aliasing_output attribute.\n\nThis will be used for using the old tf2xla bridge for second phase of the compilation.\n\nPiperOrigin-RevId: 361378341\nChange-Id: Id418212e65f5d177bc4bb8c279824ef8bfc2add2"",""distinct"":true,""url"":""https://api.github.com/repos/njzjz/tensorflow/commits/fb7d34de0a7a892d070104aa4e385159817e7ef5""}]",,,,,,,,,,
15435295781,PullRequestEvent,true,2021-03-07 08:11:03.000000 UTC,39814207,pull[bot],228097715,njzjz/tensorflow,,,,,,,,"""closed""",1744,,,,,,,,
15435297731,PullRequestEvent,true,2021-03-07 08:11:41.000000 UTC,39814207,pull[bot],195336714,db-apps/react,,,,,,,,"""opened""",1094,,,,,,,,
15435298112,PushEvent,true,2021-03-07 08:11:48.000000 UTC,39814207,pull[bot],195336714,db-apps/react,"""refs/heads/master""",,,6658786091,2,2,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/db-apps/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/db-apps/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15435298132,PullRequestEvent,true,2021-03-07 08:11:49.000000 UTC,39814207,pull[bot],195336714,db-apps/react,,,,,,,,"""closed""",1094,,,,,,,,
15435303826,PullRequestEvent,true,2021-03-07 08:13:33.000000 UTC,39814207,pull[bot],142352962,chanhong/react,,,,,,,,"""opened""",3,,,,,,,,
15435304599,PushEvent,true,2021-03-07 08:13:48.000000 UTC,39814207,pull[bot],142352962,chanhong/react,"""refs/heads/master""",,,6658790244,2,2,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/chanhong/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/chanhong/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15435304641,PullRequestEvent,true,2021-03-07 08:13:48.000000 UTC,39814207,pull[bot],142352962,chanhong/react,,,,,,,,"""closed""",3,,,,,,,,
15435317220,PullRequestEvent,true,2021-03-07 08:17:34.000000 UTC,39814207,pull[bot],174166640,Cache-Cloud/tensorflow,,,,,,,,"""opened""",6979,,,,,,,,
15435318283,PullRequestEvent,true,2021-03-07 08:17:53.000000 UTC,39814207,pull[bot],260871164,lancygoyal/react,,,,,,,,"""opened""",368,,,,,,,,
15435319200,PushEvent,true,2021-03-07 08:18:12.000000 UTC,39814207,pull[bot],260871164,lancygoyal/react,"""refs/heads/master""",,,6658799334,2,2,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/lancygoyal/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/lancygoyal/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15435319212,PullRequestEvent,true,2021-03-07 08:18:12.000000 UTC,39814207,pull[bot],260871164,lancygoyal/react,,,,,,,,"""closed""",368,,,,,,,,
15435319248,PushEvent,true,2021-03-07 08:18:13.000000 UTC,39814207,pull[bot],174166640,Cache-Cloud/tensorflow,"""refs/heads/master""",,,6658799357,1,1,"[{""sha"":""fb7d34de0a7a892d070104aa4e385159817e7ef5"",""author"":{""name"":""Smit Hinsu"",""email"":""0f9dce5f2da36d8473ff9a50fbb0e06a148c5fae@google.com""},""message"":""Add prepare-tpu-computation-for-tf-export pass\n\nThis pass transforms the MLIR module attached to _TpuCompileMlir op to be legal for export to TensorFlow GraphDef. Currently, this pass handles mhlo.sharding attribute on function attributes by passing them through TF XlaSharding ops and dropping tf.aliasing_output attribute.\n\nThis will be used for using the old tf2xla bridge for second phase of the compilation.\n\nPiperOrigin-RevId: 361378341\nChange-Id: Id418212e65f5d177bc4bb8c279824ef8bfc2add2"",""distinct"":true,""url"":""https://api.github.com/repos/Cache-Cloud/tensorflow/commits/fb7d34de0a7a892d070104aa4e385159817e7ef5""}]",,,,,,,,,,
15435319270,PullRequestEvent,true,2021-03-07 08:18:13.000000 UTC,39814207,pull[bot],174166640,Cache-Cloud/tensorflow,,,,,,,,"""closed""",6979,,,,,,,,
15435333306,PullRequestEvent,true,2021-03-07 08:22:23.000000 UTC,39814207,pull[bot],283146831,r4b3rt/react,,,,,,,,"""opened""",269,,,,,,,,
15435334367,PushEvent,true,2021-03-07 08:22:40.000000 UTC,39814207,pull[bot],283146831,r4b3rt/react,"""refs/heads/master""",,,6658808756,2,2,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/r4b3rt/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/r4b3rt/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15435334394,PullRequestEvent,true,2021-03-07 08:22:41.000000 UTC,39814207,pull[bot],283146831,r4b3rt/react,,,,,,,,"""closed""",269,,,,,,,,
15435338841,PullRequestEvent,true,2021-03-07 08:23:58.000000 UTC,39814207,pull[bot],179607331,isanjit3/tensorflow,,,,,,,,"""opened""",867,,,,,,,,
15435339846,PushEvent,true,2021-03-07 08:24:17.000000 UTC,39814207,pull[bot],179607331,isanjit3/tensorflow,"""refs/heads/master""",,,6658812169,1,1,"[{""sha"":""fb7d34de0a7a892d070104aa4e385159817e7ef5"",""author"":{""name"":""Smit Hinsu"",""email"":""0f9dce5f2da36d8473ff9a50fbb0e06a148c5fae@google.com""},""message"":""Add prepare-tpu-computation-for-tf-export pass\n\nThis pass transforms the MLIR module attached to _TpuCompileMlir op to be legal for export to TensorFlow GraphDef. Currently, this pass handles mhlo.sharding attribute on function attributes by passing them through TF XlaSharding ops and dropping tf.aliasing_output attribute.\n\nThis will be used for using the old tf2xla bridge for second phase of the compilation.\n\nPiperOrigin-RevId: 361378341\nChange-Id: Id418212e65f5d177bc4bb8c279824ef8bfc2add2"",""distinct"":true,""url"":""https://api.github.com/repos/isanjit3/tensorflow/commits/fb7d34de0a7a892d070104aa4e385159817e7ef5""}]",,,,,,,,,,
15435339877,PullRequestEvent,true,2021-03-07 08:24:17.000000 UTC,39814207,pull[bot],179607331,isanjit3/tensorflow,,,,,,,,"""closed""",867,,,,,,,,
15435342084,PullRequestEvent,true,2021-03-07 08:24:57.000000 UTC,39814207,pull[bot],133704084,melG81/tensorflow,,,,,,,,"""opened""",673,,,,,,,,
15435343045,PushEvent,true,2021-03-07 08:25:14.000000 UTC,39814207,pull[bot],133704084,melG81/tensorflow,"""refs/heads/master""",,,6658814190,1,1,"[{""sha"":""fb7d34de0a7a892d070104aa4e385159817e7ef5"",""author"":{""name"":""Smit Hinsu"",""email"":""0f9dce5f2da36d8473ff9a50fbb0e06a148c5fae@google.com""},""message"":""Add prepare-tpu-computation-for-tf-export pass\n\nThis pass transforms the MLIR module attached to _TpuCompileMlir op to be legal for export to TensorFlow GraphDef. Currently, this pass handles mhlo.sharding attribute on function attributes by passing them through TF XlaSharding ops and dropping tf.aliasing_output attribute.\n\nThis will be used for using the old tf2xla bridge for second phase of the compilation.\n\nPiperOrigin-RevId: 361378341\nChange-Id: Id418212e65f5d177bc4bb8c279824ef8bfc2add2"",""distinct"":true,""url"":""https://api.github.com/repos/melG81/tensorflow/commits/fb7d34de0a7a892d070104aa4e385159817e7ef5""}]",,,,,,,,,,
15435343068,PullRequestEvent,true,2021-03-07 08:25:14.000000 UTC,39814207,pull[bot],133704084,melG81/tensorflow,,,,,,,,"""closed""",673,,,,,,,,
15435346356,PullRequestEvent,true,2021-03-07 08:26:11.000000 UTC,39814207,pull[bot],82160236,waterdrops/tensorflow,,,,,,,,"""opened""",41,,,,,,,,
15435347329,PullRequestEvent,true,2021-03-07 08:26:30.000000 UTC,39814207,pull[bot],258565520,Qwerty0x64/react,,,,,,,,"""opened""",394,,,,,,,,
15435347530,PushEvent,true,2021-03-07 08:26:33.000000 UTC,39814207,pull[bot],82160236,waterdrops/tensorflow,"""refs/heads/master""",,,6658816915,1,1,"[{""sha"":""fb7d34de0a7a892d070104aa4e385159817e7ef5"",""author"":{""name"":""Smit Hinsu"",""email"":""0f9dce5f2da36d8473ff9a50fbb0e06a148c5fae@google.com""},""message"":""Add prepare-tpu-computation-for-tf-export pass\n\nThis pass transforms the MLIR module attached to _TpuCompileMlir op to be legal for export to TensorFlow GraphDef. Currently, this pass handles mhlo.sharding attribute on function attributes by passing them through TF XlaSharding ops and dropping tf.aliasing_output attribute.\n\nThis will be used for using the old tf2xla bridge for second phase of the compilation.\n\nPiperOrigin-RevId: 361378341\nChange-Id: Id418212e65f5d177bc4bb8c279824ef8bfc2add2"",""distinct"":true,""url"":""https://api.github.com/repos/waterdrops/tensorflow/commits/fb7d34de0a7a892d070104aa4e385159817e7ef5""}]",,,,,,,,,,
15435347585,PullRequestEvent,true,2021-03-07 08:26:34.000000 UTC,39814207,pull[bot],82160236,waterdrops/tensorflow,,,,,,,,"""closed""",41,,,,,,,,
15435348858,PushEvent,true,2021-03-07 08:26:59.000000 UTC,39814207,pull[bot],258565520,Qwerty0x64/react,"""refs/heads/master""",,,6658817764,2,2,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/Qwerty0x64/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/Qwerty0x64/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15435348895,PullRequestEvent,true,2021-03-07 08:26:59.000000 UTC,39814207,pull[bot],258565520,Qwerty0x64/react,,,,,,,,"""closed""",394,,,,,,,,
15435368122,PullRequestEvent,true,2021-03-07 08:32:30.000000 UTC,39814207,pull[bot],159132812,mark0725/tensorflow,,,,,,,,"""opened""",8181,,,,,,,,
15435369920,PushEvent,true,2021-03-07 08:33:01.000000 UTC,39814207,pull[bot],159132812,mark0725/tensorflow,"""refs/heads/master""",,,6658830768,1,1,"[{""sha"":""c8e6a3fb8f9ee595fe292e63449c65a2607a37e1"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Op documentation update.\n\tupdate of g3doc/includes/tf_passes.md\n\nPiperOrigin-RevId: 361390469\nChange-Id: I021164c4d178203466995dc14d99b49f504682dc"",""distinct"":true,""url"":""https://api.github.com/repos/mark0725/tensorflow/commits/c8e6a3fb8f9ee595fe292e63449c65a2607a37e1""}]",,,,,,,,,,
15435369951,PullRequestEvent,true,2021-03-07 08:33:02.000000 UTC,39814207,pull[bot],159132812,mark0725/tensorflow,,,,,,,,"""closed""",8181,,,,,,,,
15435379134,PullRequestEvent,true,2021-03-07 08:35:47.000000 UTC,39814207,pull[bot],268720602,YashKumarVerma/react,,,,,,,,"""opened""",320,,,,,,,,
15435380527,PushEvent,true,2021-03-07 08:36:12.000000 UTC,39814207,pull[bot],268720602,YashKumarVerma/react,"""refs/heads/master""",,,6658837350,2,2,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/YashKumarVerma/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/YashKumarVerma/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15435380544,PullRequestEvent,true,2021-03-07 08:36:12.000000 UTC,39814207,pull[bot],268720602,YashKumarVerma/react,,,,,,,,"""closed""",320,,,,,,,,
15435401569,PullRequestEvent,true,2021-03-07 08:41:34.000000 UTC,39814207,pull[bot],137995820,Mu-L/react,,,,,,,,"""opened""",301,,,,,,,,
15435402248,PushEvent,true,2021-03-07 08:41:47.000000 UTC,39814207,pull[bot],137995820,Mu-L/react,"""refs/heads/master""",,,6658848939,2,2,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/Mu-L/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/Mu-L/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15435402260,PullRequestEvent,true,2021-03-07 08:41:47.000000 UTC,39814207,pull[bot],137995820,Mu-L/react,,,,,,,,"""closed""",301,,,,,,,,
15435433249,PullRequestEvent,true,2021-03-07 08:50:36.000000 UTC,39814207,pull[bot],211211919,Mu-L/tensorflow,,,,,,,,"""opened""",1254,,,,,,,,
15435434515,PullRequestEvent,true,2021-03-07 08:50:59.000000 UTC,39814207,pull[bot],211634994,Melon-Tropics/react,,,,,,,,"""opened""",657,,,,,,,,
15435435607,PushEvent,true,2021-03-07 08:51:17.000000 UTC,39814207,pull[bot],211634994,Melon-Tropics/react,"""refs/heads/master""",,,6658869561,2,2,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/Melon-Tropics/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/Melon-Tropics/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15435435625,PullRequestEvent,true,2021-03-07 08:51:18.000000 UTC,39814207,pull[bot],211634994,Melon-Tropics/react,,,,,,,,"""closed""",657,,,,,,,,
15435436238,PushEvent,true,2021-03-07 08:51:27.000000 UTC,39814207,pull[bot],211211919,Mu-L/tensorflow,"""refs/heads/master""",,,6658869941,1,1,"[{""sha"":""c8e6a3fb8f9ee595fe292e63449c65a2607a37e1"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Op documentation update.\n\tupdate of g3doc/includes/tf_passes.md\n\nPiperOrigin-RevId: 361390469\nChange-Id: I021164c4d178203466995dc14d99b49f504682dc"",""distinct"":true,""url"":""https://api.github.com/repos/Mu-L/tensorflow/commits/c8e6a3fb8f9ee595fe292e63449c65a2607a37e1""}]",,,,,,,,,,
15435436267,PullRequestEvent,true,2021-03-07 08:51:28.000000 UTC,39814207,pull[bot],211211919,Mu-L/tensorflow,,,,,,,,"""closed""",1254,,,,,,,,
15435437641,PullRequestEvent,true,2021-03-07 08:51:53.000000 UTC,39814207,pull[bot],316339507,Jeffkeen7/react,,,,,,,,"""opened""",107,,,,,,,,
15435438568,PushEvent,true,2021-03-07 08:52:08.000000 UTC,39814207,pull[bot],316339507,Jeffkeen7/react,"""refs/heads/master""",,,6658871398,2,2,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/Jeffkeen7/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/Jeffkeen7/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15435438586,PullRequestEvent,true,2021-03-07 08:52:09.000000 UTC,39814207,pull[bot],316339507,Jeffkeen7/react,,,,,,,,"""closed""",107,,,,,,,,
15435440322,PullRequestEvent,true,2021-03-07 08:52:41.000000 UTC,39814207,pull[bot],157488097,greedisgoood/tensorflow,,,,,,,,"""opened""",403,,,,,,,,
15435441662,PushEvent,true,2021-03-07 08:53:05.000000 UTC,39814207,pull[bot],157488097,greedisgoood/tensorflow,"""refs/heads/master""",,,6658873298,1,1,"[{""sha"":""c8e6a3fb8f9ee595fe292e63449c65a2607a37e1"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Op documentation update.\n\tupdate of g3doc/includes/tf_passes.md\n\nPiperOrigin-RevId: 361390469\nChange-Id: I021164c4d178203466995dc14d99b49f504682dc"",""distinct"":true,""url"":""https://api.github.com/repos/greedisgoood/tensorflow/commits/c8e6a3fb8f9ee595fe292e63449c65a2607a37e1""}]",,,,,,,,,,
15435441695,PullRequestEvent,true,2021-03-07 08:53:05.000000 UTC,39814207,pull[bot],157488097,greedisgoood/tensorflow,,,,,,,,"""closed""",403,,,,,,,,
15435462085,PullRequestEvent,true,2021-03-07 08:58:51.000000 UTC,39814207,pull[bot],209611938,Alan-love/tensorflow,,,,,,,,"""opened""",1435,,,,,,,,
15435463027,PushEvent,true,2021-03-07 08:59:09.000000 UTC,39814207,pull[bot],209611938,Alan-love/tensorflow,"""refs/heads/master""",,,6658886192,1,1,"[{""sha"":""c8e6a3fb8f9ee595fe292e63449c65a2607a37e1"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Op documentation update.\n\tupdate of g3doc/includes/tf_passes.md\n\nPiperOrigin-RevId: 361390469\nChange-Id: I021164c4d178203466995dc14d99b49f504682dc"",""distinct"":true,""url"":""https://api.github.com/repos/Alan-love/tensorflow/commits/c8e6a3fb8f9ee595fe292e63449c65a2607a37e1""}]",,,,,,,,,,
15435463047,PullRequestEvent,true,2021-03-07 08:59:09.000000 UTC,39814207,pull[bot],209611938,Alan-love/tensorflow,,,,,,,,"""closed""",1435,,,,,,,,
15435261586,PushEvent,true,2021-03-07 08:00:49.000000 UTC,59663022,bic-harness,232630157,bic-harness/terraform,"""refs/heads/master""",,,6658762834,1,1,"[{""sha"":""fb46f2ecb33752515a21bcd74c9d787fcbae60d5"",""author"":{""name"":""bic-harness"",""email"":""958a8fce0d8c4daa7a8f2b84b587df9162e56ab2@harness.io""},""message"":""Update main.tf"",""distinct"":true,""url"":""https://api.github.com/repos/bic-harness/terraform/commits/fb46f2ecb33752515a21bcd74c9d787fcbae60d5""}]",,,,,,,,,,
15435367047,PushEvent,true,2021-03-07 08:32:11.000000 UTC,59663022,bic-harness,232630157,bic-harness/terraform,"""refs/heads/master""",,,6658828972,1,1,"[{""sha"":""ce61fd6240fc2358d2318120f752ca9944847807"",""author"":{""name"":""bic-harness"",""email"":""958a8fce0d8c4daa7a8f2b84b587df9162e56ab2@harness.io""},""message"":""Update outputs.tf"",""distinct"":true,""url"":""https://api.github.com/repos/bic-harness/terraform/commits/ce61fd6240fc2358d2318120f752ca9944847807""}]",,,,,,,,,,
15435429606,PushEvent,true,2021-03-07 08:49:35.000000 UTC,59663022,bic-harness,232630157,bic-harness/terraform,"""refs/heads/master""",,,6658865700,1,1,"[{""sha"":""e2d1b17d3b4433e7c2e8b80cb506ce6f9332818b"",""author"":{""name"":""bic-harness"",""email"":""958a8fce0d8c4daa7a8f2b84b587df9162e56ab2@harness.io""},""message"":""Update main.tf"",""distinct"":true,""url"":""https://api.github.com/repos/bic-harness/terraform/commits/e2d1b17d3b4433e7c2e8b80cb506ce6f9332818b""}]",,,,,,,,,,
15435459630,PushEvent,true,2021-03-07 08:58:10.000000 UTC,59663022,bic-harness,232630157,bic-harness/terraform,"""refs/heads/master""",,,6658884156,1,1,"[{""sha"":""2ee618098d93125689b1c5d08656dc8667b03f82"",""author"":{""name"":""bic-harness"",""email"":""958a8fce0d8c4daa7a8f2b84b587df9162e56ab2@harness.io""},""message"":""Update main.tf"",""distinct"":true,""url"":""https://api.github.com/repos/bic-harness/terraform/commits/2ee618098d93125689b1c5d08656dc8667b03f82""}]",,,,,,,,,,
15435375892,PushEvent,true,2021-03-07 08:34:51.000000 UTC,60917071,Alexey-Locker,340965850,Alexey-Locker/react,"""refs/heads/main""",,,6658834550,1,1,"[{""sha"":""a58ada40eebe12b204866596875bb2cac0e22e13"",""author"":{""name"":""AlexeyLocker"",""email"":""21d8f48e27abd7a0503ca9bc9cf57a01d0adf19f@gmail.com""},""message"":""hw3"",""distinct"":true,""url"":""https://api.github.com/repos/Alexey-Locker/react/commits/a58ada40eebe12b204866596875bb2cac0e22e13""}]",,,,,,,,,,
15435384106,IssueCommentEvent,true,2021-03-07 08:37:14.000000 UTC,65753204,yashkumarverma-assistant[bot],268720602,YashKumarVerma/react,,,,,,,,"""created""",,,,,,,,,
15435384387,IssueCommentEvent,true,2021-03-07 08:37:17.000000 UTC,65753204,yashkumarverma-assistant[bot],268720602,YashKumarVerma/react,,,,,,,,"""created""",,,,,,,,,
15435374346,IssuesEvent,true,2021-03-07 08:34:21.000000 UTC,2096878,luger1990,4710920,apache/dubbo,,,,,,,,"""opened""",,,,,,,,,
15435332567,PullRequestReviewEvent,true,2021-03-07 08:22:10.000000 UTC,9292748,AlbumenJ,4710920,apache/dubbo,,,,,,,,"""created""",7334,,,"""changes_requested""","""MEMBER""",,,,
15435332573,PullRequestReviewCommentEvent,true,2021-03-07 08:22:06.000000 UTC,9292748,AlbumenJ,4710920,apache/dubbo,,,,,,,,"""created""",7334,,,,,,,,
15435332569,PullRequestReviewEvent,true,2021-03-07 08:22:10.000000 UTC,9292748,AlbumenJ,4710920,apache/dubbo,,,,,,,,"""created""",7334,,,"""changes_requested""","""MEMBER""",,,,
15435361025,PullRequestReviewEvent,true,2021-03-07 08:30:33.000000 UTC,9292748,AlbumenJ,4710920,apache/dubbo,,,,,,,,"""created""",7334,,,"""approved""","""MEMBER""",,,,
15435361740,PullRequestEvent,true,2021-03-07 08:30:45.000000 UTC,9292748,AlbumenJ,4710920,apache/dubbo,,,,,,,,"""closed""",7334,,,,,,,,
15435362341,IssuesEvent,true,2021-03-07 08:30:54.000000 UTC,9292748,AlbumenJ,4710920,apache/dubbo,,,,,,,,"""closed""",,,,,,,,,
15435362598,PushEvent,true,2021-03-07 08:30:58.000000 UTC,9292748,AlbumenJ,4710920,apache/dubbo,"""refs/heads/master""",,,6658826076,1,1,"[{""sha"":""96e44f60365832225990360f9485ace45fad85f0"",""author"":{""name"":""xiaoheng1"",""email"":""6350aee017b26f4750917972de057d2f54c2e260@qq.com""},""message"":""Solve local exposure, the server opens the token, and the client call fails (#7334)\n\n* fix #7024 Solve local exposure, the server opens the token, and the client call fails.\r\n\r\n* delete issue link"",""distinct"":true,""url"":""https://api.github.com/repos/apache/dubbo/commits/96e44f60365832225990360f9485ace45fad85f0""}]",,,,,,,,,,
15435374423,IssueCommentEvent,true,2021-03-07 08:34:23.000000 UTC,12539730,xiaoheng1,4710920,apache/dubbo,,,,,,,,"""created""",,,,,,,,,
15435444578,PullRequestEvent,true,2021-03-07 08:53:58.000000 UTC,12539730,xiaoheng1,4710920,apache/dubbo,,,,,,,,"""opened""",7337,,,,,,,,
15435419313,ForkEvent,true,2021-03-07 08:46:41.000000 UTC,19190500,wl310538259,4710920,apache/dubbo,,,,,,,,,,"""wl310538259/dubbo""",,,,,,,
15435376255,IssueCommentEvent,true,2021-03-07 08:34:57.000000 UTC,26839782,gentryhuang,4710920,apache/dubbo,,,,,,,,"""created""",,,,,,,,,
15435376279,IssuesEvent,true,2021-03-07 08:34:57.000000 UTC,26839782,gentryhuang,4710920,apache/dubbo,,,,,,,,"""closed""",,,,,,,,,
15435378533,WatchEvent,true,2021-03-07 08:35:36.000000 UTC,5301202,malteneuss,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15435405718,PullRequestReviewCommentEvent,true,2021-03-07 08:38:46.000000 UTC,11924426,taichiyi,10270250,facebook/react,,,,,,,,"""created""",20945,,,,,,,,
15435405711,PullRequestReviewEvent,true,2021-03-07 08:42:50.000000 UTC,11924426,taichiyi,10270250,facebook/react,,,,,,,,"""created""",20945,,,"""commented""","""NONE""",,,,
15435405717,PullRequestReviewEvent,true,2021-03-07 08:42:50.000000 UTC,11924426,taichiyi,10270250,facebook/react,,,,,,,,"""created""",20945,,,"""commented""","""NONE""",,,,
15435267497,WatchEvent,true,2021-03-07 08:02:34.000000 UTC,44987835,DeadTheAmazing,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15435393903,WatchEvent,true,2021-03-07 08:39:16.000000 UTC,48827749,sanimridha,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15435301174,WatchEvent,true,2021-03-07 08:12:42.000000 UTC,59659307,almaalhi,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15435360292,WatchEvent,true,2021-03-07 08:30:22.000000 UTC,78632095,ttloves2,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15435448334,WatchEvent,true,2021-03-07 08:55:06.000000 UTC,49693820,naveen521kk,658518,ipython/ipython,,,,,,,,"""started""",,,,,,,,,
15435448387,WatchEvent,true,2021-03-07 08:55:07.000000 UTC,49693820,naveen521kk,658518,ipython/ipython,,,,,,,,"""started""",,,,,,,,,
15435424785,IssueCommentEvent,true,2021-03-07 08:48:11.000000 UTC,1190450,NicolasHug,843222,scikit-learn/scikit-learn,,,,,,,,"""created""",,,,,,,,,
15435379942,IssueCommentEvent,true,2021-03-07 08:36:01.000000 UTC,10809142,YangXiaozhou,843222,scikit-learn/scikit-learn,,,,,,,,"""created""",,,,,,,,,
15435356653,ForkEvent,true,2021-03-07 08:29:22.000000 UTC,39078908,Emtman7,843222,scikit-learn/scikit-learn,,,,,,,,,,"""Emtman7/scikit-learn""",,,,,,,
15435397129,ForkEvent,true,2021-03-07 08:40:13.000000 UTC,19799541,chenpaz,5108051,opencv/opencv,,,,,,,,,,"""chenpaz/opencv""",,,,,,,
15435329094,ForkEvent,true,2021-03-07 08:21:09.000000 UTC,80193408,BhavyaMittal24,5108051,opencv/opencv,,,,,,,,,,"""BhavyaMittal24/opencv""",,,,,,,
15435319757,PushEvent,true,2021-03-07 08:18:22.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,"""refs/heads/master""",,,6658799669,1,1,"[{""sha"":""eb351902b9433898c85144752bb9e9b75e58cc4a"",""author"":{""name"":""José Valim"",""email"":""0c2436ea76ed86e37cc05f66dea18d48ef390882@dashbit.co""},""message"":""Raise on conflicting pipeline definition"",""distinct"":true,""url"":""https://api.github.com/repos/phoenixframework/phoenix/commits/eb351902b9433898c85144752bb9e9b75e58cc4a""}]",,,,,,,,,,
15435278767,WatchEvent,true,2021-03-07 08:05:57.000000 UTC,438600,moroz,16072585,phoenixframework/phoenix,,,,,,,,"""started""",,,,,,,,,
15435414334,WatchEvent,true,2021-03-07 08:45:20.000000 UTC,79085585,reyban1982,16072585,phoenixframework/phoenix,,,,,,,,"""started""",,,,,,,,,
15435383106,PullRequestEvent,true,2021-03-07 08:37:00.000000 UTC,5842681,JerryShih,45717250,tensorflow/tensorflow,,,,,,,,"""opened""",47617,,,,,,,,
15435396386,IssueCommentEvent,true,2021-03-07 08:40:01.000000 UTC,5842681,JerryShih,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15435335441,WatchEvent,true,2021-03-07 08:22:59.000000 UTC,7425044,arxmobi,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15435380390,IssueCommentEvent,true,2021-03-07 08:36:10.000000 UTC,18486587,coreqode,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15435380403,IssuesEvent,true,2021-03-07 08:36:10.000000 UTC,18486587,coreqode,45717250,tensorflow/tensorflow,,,,,,,,"""closed""",,,,,,,,,
15435289314,WatchEvent,true,2021-03-07 08:09:11.000000 UTC,29246684,mtsale,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15435270088,IssueCommentEvent,true,2021-03-07 08:03:19.000000 UTC,41089692,hijm,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15435296471,WatchEvent,true,2021-03-07 08:11:16.000000 UTC,68260701,chenghuaWang,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15435415835,PullRequestEvent,true,2021-03-07 08:45:45.000000 UTC,39814207,pull[bot],84768089,stackriot/react,,,,,,,,"""opened""",1711,,,,,,,,
15435416930,PushEvent,true,2021-03-07 08:46:02.000000 UTC,39814207,pull[bot],84768089,stackriot/react,"""refs/heads/master""",,,6658858171,2,2,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/stackriot/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/stackriot/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15435416959,PullRequestEvent,true,2021-03-07 08:46:03.000000 UTC,39814207,pull[bot],84768089,stackriot/react,,,,,,,,"""closed""",1711,,,,,,,,
15435450733,WatchEvent,true,2021-03-07 08:55:44.000000 UTC,21119307,Wsteth,135786093,typescript-cheatsheets/react,,,,,,,,"""started""",,,,,,,,,
15435382820,WatchEvent,true,2021-03-07 08:36:54.000000 UTC,37402039,nvgeorgiev,135786093,typescript-cheatsheets/react,,,,,,,,"""started""",,,,,,,,,
15435456491,PullRequestEvent,true,2021-03-07 08:57:19.000000 UTC,39814207,pull[bot],216880862,CrazyForks/react,,,,,,,,"""opened""",763,,,,,,,,
15435456874,PushEvent,true,2021-03-07 08:57:25.000000 UTC,39814207,pull[bot],216880862,CrazyForks/react,"""refs/heads/master""",,,6658882603,2,2,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/CrazyForks/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/CrazyForks/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15435456892,PullRequestEvent,true,2021-03-07 08:57:26.000000 UTC,39814207,pull[bot],216880862,CrazyForks/react,,,,,,,,"""closed""",763,,,,,,,,
15435389161,PullRequestEvent,true,2021-03-07 08:38:08.000000 UTC,39814207,pull[bot],267619984,vacantthinker-forks/react,,,,,,,,"""opened""",325,,,,,,,,
15435390444,PushEvent,true,2021-03-07 08:38:23.000000 UTC,39814207,pull[bot],267619984,vacantthinker-forks/react,"""refs/heads/master""",,,6658841868,2,2,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/vacantthinker-forks/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/vacantthinker-forks/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15435390476,PullRequestEvent,true,2021-03-07 08:38:23.000000 UTC,39814207,pull[bot],267619984,vacantthinker-forks/react,,,,,,,,"""closed""",325,,,,,,,,
15435698596,PullRequestEvent,true,2021-03-07 10:02:14.000000 UTC,11639412,GulajavaMinistudio,186142742,GulajavaMinistudio/tensorflow,,,,,,,,"""closed""",415,,,,,,,,
15435699186,PushEvent,true,2021-03-07 10:02:24.000000 UTC,11639412,GulajavaMinistudio,186142742,GulajavaMinistudio/tensorflow,"""refs/heads/master""",,,6659030980,62,62,"[{""sha"":""df0f5b91367599903113e9950628eb824e71b71d"",""author"":{""name"":""ddavis-2015"",""email"":""5b8653757017bd3cc7e685baf14c87ba905cb88d@xtech.com""},""message"":""micro: port operator LEAKY_RELU kernel from lite with test\n\nComplete implementation of TFLM operator LEAKY_RELU and associated TFLM test code.\n\nPR step 5 of the work to port operator LEAKY_RELU as tracked in Issue #46161"",""distinct"":true,""url"":""https://api.github.com/repos/GulajavaMinistudio/tensorflow/commits/df0f5b91367599903113e9950628eb824e71b71d""},{""sha"":""b5633e6b5f78a897bb04fec5f20c2fc6c51f8752"",""author"":{""name"":""ddavis-2015"",""email"":""5b8653757017bd3cc7e685baf14c87ba905cb88d@bdti.com""},""message"":""micro: prepare to port operator ADD_N kernel from lite with test\n\nImplement skeleton (non-working) code for operator and test.\nHeader files changed.\nNamespaces changed.\nSome original code deleted.\nSome original code modified.\n\nPR step 4 of the work to port operator ADD_N as tracked in Issue #46162"",""distinct"":true,""url"":""https://api.github.com/repos/GulajavaMinistudio/tensorflow/commits/b5633e6b5f78a897bb04fec5f20c2fc6c51f8752""},{""sha"":""8c159004d48d1a5cf636467261adda3ff2ae4d34"",""author"":{""name"":""ddavis-2015"",""email"":""5b8653757017bd3cc7e685baf14c87ba905cb88d@bdti.com""},""message"":""Merge branch 'master' into LeakyRelu-pr5"",""distinct"":true,""url"":""https://api.github.com/repos/GulajavaMinistudio/tensorflow/commits/8c159004d48d1a5cf636467261adda3ff2ae4d34""},{""sha"":""d267a0605b7beacec0ed7993c103fb2ddb357509"",""author"":{""name"":""ddavis-2015"",""email"":""5b8653757017bd3cc7e685baf14c87ba905cb88d@bdti.com""},""message"":""fix review issues\n\nFlatten namespace\nReorder input/output parameters\nExplicit int/int32_t and float/double conversions"",""distinct"":true,""url"":""https://api.github.com/repos/GulajavaMinistudio/tensorflow/commits/d267a0605b7beacec0ed7993c103fb2ddb357509""},{""sha"":""991a10e2f9f4074a3e046889ef30f457c4b9ad7f"",""author"":{""name"":""ddavis-2015"",""email"":""5b8653757017bd3cc7e685baf14c87ba905cb88d@bdti.com""},""message"":""Support only float32/int8"",""distinct"":true,""url"":""https://api.github.com/repos/GulajavaMinistudio/tensorflow/commits/991a10e2f9f4074a3e046889ef30f457c4b9ad7f""},{""sha"":""63ff05067602c2b310316b38338b09d8ff660b8e"",""author"":{""name"":""Lukas Geiger"",""email"":""c177b3022030a594aa53debfd3a1bd597e06810a@gmail.com""},""message"":""Simplify Huber Loss implementation"",""distinct"":true,""url"":""https://api.github.com/repos/GulajavaMinistudio/tensorflow/commits/63ff05067602c2b310316b38338b09d8ff660b8e""},{""sha"":""199f58c5449673b1599fa25a2d095897a38ae29b"",""author"":{""name"":""xiaohong1031"",""email"":""870f7e5c937c6f0ebd8d778278ecaece281ed5b0@intel.com""},""message"":""fix BF16 regression"",""distinct"":true,""url"":""https://api.github.com/repos/GulajavaMinistudio/tensorflow/commits/199f58c5449673b1599fa25a2d095897a38ae29b""},{""sha"":""98193865046df6247f1a471cb9ac2d99ee2c95a9"",""author"":{""name"":""ddavis-2015"",""email"":""5b8653757017bd3cc7e685baf14c87ba905cb88d@bdti.com""},""message"":""add LEAKY_RELU to AllOpsResolver"",""distinct"":true,""url"":""https://api.github.com/repos/GulajavaMinistudio/tensorflow/commits/98193865046df6247f1a471cb9ac2d99ee2c95a9""},{""sha"":""fa8a64fb519884216ed149d9ad98bc6611d21f37"",""author"":{""name"":""ddavis-2015"",""email"":""5b8653757017bd3cc7e685baf14c87ba905cb88d@bdti.com""},""message"":""restore break statement to end of case block"",""distinct"":true,""url"":""https://api.github.com/repos/GulajavaMinistudio/tensorflow/commits/fa8a64fb519884216ed149d9ad98bc6611d21f37""},{""sha"":""22ea2bb67ee242aae514044004855a2dd17531be"",""author"":{""name"":""ddavis-2015"",""email"":""5b8653757017bd3cc7e685baf14c87ba905cb88d@bdti.com""},""message"":""Merge branch 'master' into LeakyRelu-pr5"",""distinct"":true,""url"":""https://api.github.com/repos/GulajavaMinistudio/tensorflow/commits/22ea2bb67ee242aae514044004855a2dd17531be""},{""sha"":""ee17ca806db95fff7fbf4d774b43ec42f3d9b6c3"",""author"":{""name"":""ddavis-2015"",""email"":""5b8653757017bd3cc7e685baf14c87ba905cb88d@bdti.com""},""message"":""Merge branch 'master' into LeakyRelu-pr5"",""distinct"":true,""url"":""https://api.github.com/repos/GulajavaMinistudio/tensorflow/commits/ee17ca806db95fff7fbf4d774b43ec42f3d9b6c3""},{""sha"":""66a300939111fefc8b6885d0decd67f3e4a96403"",""author"":{""name"":""Tzu-Wei Sung"",""email"":""f316c63976b7dfc02c6169d1441ce0da0786fcb6@gmail.com""},""message"":""Optimize ArgMinMax for float when axis=dims-1.\n\nBenchmark on argmax of 1-D float32 tensor on Pixel 3a android 11:\n\n| Size   | Reference (min/max/avg microsecs) | Optimized (min/max/avg microsecs) |\n| ------ | --------------------------------- | --------------------------------- |\n| 10     | 0/63/0.260737                     | 0/49/0.216432                     |\n| 100    | 1/101/1.17919                     | 0/77/0.271518                     |\n| 1000   | 9/98/9.80665                      | 0/65/1.07653                      |\n| 10000  | 95/190/96.2557                    | 8/110/9.63559                     |\n| 100000 | 952/1102/967.445                  | 88/215/94.8766                    |"",""distinct"":true,""url"":""https://api.github.com/repos/GulajavaMinistudio/tensorflow/commits/66a300939111fefc8b6885d0decd67f3e4a96403""},{""sha"":""c9228ceab968d79a8b1162bcbbf3abcfb7b6e199"",""author"":{""name"":""Tzu-Wei Sung"",""email"":""f316c63976b7dfc02c6169d1441ce0da0786fcb6@gmail.com""},""message"":""Change condition from < size - 3 to <= size - 4, which follows the same rules in the file."",""distinct"":true,""url"":""https://api.github.com/repos/GulajavaMinistudio/tensorflow/commits/c9228ceab968d79a8b1162bcbbf3abcfb7b6e199""},{""sha"":""81ac18a42b476b555f2f084f8559044c2571df4f"",""author"":{""name"":""Tzu-Wei Sung"",""email"":""f316c63976b7dfc02c6169d1441ce0da0786fcb6@gmail.com""},""message"":""Fix TFLite micro build."",""distinct"":true,""url"":""https://api.github.com/repos/GulajavaMinistudio/tensorflow/commits/81ac18a42b476b555f2f084f8559044c2571df4f""},{""sha"":""f93aeb46b424b47a62fdc786e94c9cbd5504291d"",""author"":{""name"":""Tzu-Wei Sung"",""email"":""f316c63976b7dfc02c6169d1441ce0da0786fcb6@gmail.com""},""message"":""Add more tests about axis=dims-1. Iterate from 1 to 10 to ensure edge cases are correct."",""distinct"":true,""url"":""https://api.github.com/repos/GulajavaMinistudio/tensorflow/commits/f93aeb46b424b47a62fdc786e94c9cbd5504291d""},{""sha"":""3d9e1e7047223fe64eb5227a2c11df760de77ae9"",""author"":{""name"":""Tzu-Wei Sung"",""email"":""f316c63976b7dfc02c6169d1441ce0da0786fcb6@gmail.com""},""message"":""NIT: Pass return value directly"",""distinct"":true,""url"":""https://api.github.com/repos/GulajavaMinistudio/tensorflow/commits/3d9e1e7047223fe64eb5227a2c11df760de77ae9""},{""sha"":""25cdd92881ca1d14e06d99662641ff35e7e95097"",""author"":{""name"":""Tzu-Wei Sung"",""email"":""f316c63976b7dfc02c6169d1441ce0da0786fcb6@gmail.com""},""message"":""Move preprocessors and comment"",""distinct"":true,""url"":""https://api.github.com/repos/GulajavaMinistudio/tensorflow/commits/25cdd92881ca1d14e06d99662641ff35e7e95097""},{""sha"":""d6a98ae45afa6959bff543692d89bcf754113fc2"",""author"":{""name"":""Tzu-Wei Sung"",""email"":""f316c63976b7dfc02c6169d1441ce0da0786fcb6@gmail.com""},""message"":""Add last axis tests in python as well"",""distinct"":true,""url"":""https://api.github.com/repos/GulajavaMinistudio/tensorflow/commits/d6a98ae45afa6959bff543692d89bcf754113fc2""},{""sha"":""7b0a2565b02c5896d1e82953c4c751c1531af0c5"",""author"":{""name"":""Tzu-Wei Sung"",""email"":""f316c63976b7dfc02c6169d1441ce0da0786fcb6@gmail.com""},""message"":""Extract axis from parameters"",""distinct"":true,""url"":""https://api.github.com/repos/GulajavaMinistudio/tensorflow/commits/7b0a2565b02c5896d1e82953c4c751c1531af0c5""},{""sha"":""4b26d8e3ff869f21dde80958d2d97107df8de526"",""author"":{""name"":""Tzu-Wei Sung"",""email"":""f316c63976b7dfc02c6169d1441ce0da0786fcb6@gmail.com""},""message"":""Rename n to size for consistency"",""distinct"":true,""url"":""https://api.github.com/repos/GulajavaMinistudio/tensorflow/commits/4b26d8e3ff869f21dde80958d2d97107df8de526""}]",,,,,,,,,,
15435745274,PullRequestEvent,true,2021-03-07 10:14:15.000000 UTC,39814207,pull[bot],95927693,akram/tensorflow,,,,,,,,"""opened""",4309,,,,,,,,
15435747565,PushEvent,true,2021-03-07 10:14:51.000000 UTC,39814207,pull[bot],95927693,akram/tensorflow,"""refs/heads/master""",,,6659060789,3,3,"[{""sha"":""c8e6a3fb8f9ee595fe292e63449c65a2607a37e1"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Op documentation update.\n\tupdate of g3doc/includes/tf_passes.md\n\nPiperOrigin-RevId: 361390469\nChange-Id: I021164c4d178203466995dc14d99b49f504682dc"",""distinct"":true,""url"":""https://api.github.com/repos/akram/tensorflow/commits/c8e6a3fb8f9ee595fe292e63449c65a2607a37e1""},{""sha"":""86b2eda252f56be6b357195b3809d8a365987f62"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""compat: Update forward compatibility horizon to 2021-03-07\n\nPiperOrigin-RevId: 361392925\nChange-Id: I588c1d653d3e7ffea3425430b51582f34db4f1a8"",""distinct"":true,""url"":""https://api.github.com/repos/akram/tensorflow/commits/86b2eda252f56be6b357195b3809d8a365987f62""},{""sha"":""3b95a6316b47b10e877151fbca3d12e49a38fdf5"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Update GraphDef version to 698.\n\nPiperOrigin-RevId: 361392931\nChange-Id: Id814635746941c0666d2cf136f6acc424e7d0e9c"",""distinct"":true,""url"":""https://api.github.com/repos/akram/tensorflow/commits/3b95a6316b47b10e877151fbca3d12e49a38fdf5""}]",,,,,,,,,,
15435747594,PullRequestEvent,true,2021-03-07 10:14:51.000000 UTC,39814207,pull[bot],95927693,akram/tensorflow,,,,,,,,"""closed""",4309,,,,,,,,
15435777885,PullRequestEvent,true,2021-03-07 10:22:41.000000 UTC,39814207,pull[bot],65461415,PowerOlive/tensorflow,,,,,,,,"""opened""",169,,,,,,,,
15435778509,PushEvent,true,2021-03-07 10:22:50.000000 UTC,39814207,pull[bot],65461415,PowerOlive/tensorflow,"""refs/heads/master""",,,6659079941,3,3,"[{""sha"":""c8e6a3fb8f9ee595fe292e63449c65a2607a37e1"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Op documentation update.\n\tupdate of g3doc/includes/tf_passes.md\n\nPiperOrigin-RevId: 361390469\nChange-Id: I021164c4d178203466995dc14d99b49f504682dc"",""distinct"":true,""url"":""https://api.github.com/repos/PowerOlive/tensorflow/commits/c8e6a3fb8f9ee595fe292e63449c65a2607a37e1""},{""sha"":""86b2eda252f56be6b357195b3809d8a365987f62"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""compat: Update forward compatibility horizon to 2021-03-07\n\nPiperOrigin-RevId: 361392925\nChange-Id: I588c1d653d3e7ffea3425430b51582f34db4f1a8"",""distinct"":true,""url"":""https://api.github.com/repos/PowerOlive/tensorflow/commits/86b2eda252f56be6b357195b3809d8a365987f62""},{""sha"":""3b95a6316b47b10e877151fbca3d12e49a38fdf5"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Update GraphDef version to 698.\n\nPiperOrigin-RevId: 361392931\nChange-Id: Id814635746941c0666d2cf136f6acc424e7d0e9c"",""distinct"":true,""url"":""https://api.github.com/repos/PowerOlive/tensorflow/commits/3b95a6316b47b10e877151fbca3d12e49a38fdf5""}]",,,,,,,,,,
15435778544,PullRequestEvent,true,2021-03-07 10:22:50.000000 UTC,39814207,pull[bot],65461415,PowerOlive/tensorflow,,,,,,,,"""closed""",169,,,,,,,,
15435796344,PullRequestEvent,true,2021-03-07 10:27:16.000000 UTC,39814207,pull[bot],339262813,Jeffkeen7/tensorflow,,,,,,,,"""opened""",63,,,,,,,,
15435800330,PushEvent,true,2021-03-07 10:28:15.000000 UTC,39814207,pull[bot],339262813,Jeffkeen7/tensorflow,"""refs/heads/master""",,,6659092974,3,3,"[{""sha"":""c8e6a3fb8f9ee595fe292e63449c65a2607a37e1"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Op documentation update.\n\tupdate of g3doc/includes/tf_passes.md\n\nPiperOrigin-RevId: 361390469\nChange-Id: I021164c4d178203466995dc14d99b49f504682dc"",""distinct"":true,""url"":""https://api.github.com/repos/Jeffkeen7/tensorflow/commits/c8e6a3fb8f9ee595fe292e63449c65a2607a37e1""},{""sha"":""86b2eda252f56be6b357195b3809d8a365987f62"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""compat: Update forward compatibility horizon to 2021-03-07\n\nPiperOrigin-RevId: 361392925\nChange-Id: I588c1d653d3e7ffea3425430b51582f34db4f1a8"",""distinct"":true,""url"":""https://api.github.com/repos/Jeffkeen7/tensorflow/commits/86b2eda252f56be6b357195b3809d8a365987f62""},{""sha"":""3b95a6316b47b10e877151fbca3d12e49a38fdf5"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Update GraphDef version to 698.\n\nPiperOrigin-RevId: 361392931\nChange-Id: Id814635746941c0666d2cf136f6acc424e7d0e9c"",""distinct"":true,""url"":""https://api.github.com/repos/Jeffkeen7/tensorflow/commits/3b95a6316b47b10e877151fbca3d12e49a38fdf5""}]",,,,,,,,,,
15435800349,PullRequestEvent,true,2021-03-07 10:28:15.000000 UTC,39814207,pull[bot],339262813,Jeffkeen7/tensorflow,,,,,,,,"""closed""",63,,,,,,,,
15435851058,PullRequestEvent,true,2021-03-07 10:41:15.000000 UTC,39814207,pull[bot],56189869,xiaohanhuang/tensorflow,,,,,,,,"""opened""",2095,,,,,,,,
15435857221,PushEvent,true,2021-03-07 10:42:59.000000 UTC,39814207,pull[bot],56189869,xiaohanhuang/tensorflow,"""refs/heads/master""",,,6659128055,3,3,"[{""sha"":""c8e6a3fb8f9ee595fe292e63449c65a2607a37e1"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Op documentation update.\n\tupdate of g3doc/includes/tf_passes.md\n\nPiperOrigin-RevId: 361390469\nChange-Id: I021164c4d178203466995dc14d99b49f504682dc"",""distinct"":true,""url"":""https://api.github.com/repos/xiaohanhuang/tensorflow/commits/c8e6a3fb8f9ee595fe292e63449c65a2607a37e1""},{""sha"":""86b2eda252f56be6b357195b3809d8a365987f62"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""compat: Update forward compatibility horizon to 2021-03-07\n\nPiperOrigin-RevId: 361392925\nChange-Id: I588c1d653d3e7ffea3425430b51582f34db4f1a8"",""distinct"":true,""url"":""https://api.github.com/repos/xiaohanhuang/tensorflow/commits/86b2eda252f56be6b357195b3809d8a365987f62""},{""sha"":""3b95a6316b47b10e877151fbca3d12e49a38fdf5"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Update GraphDef version to 698.\n\nPiperOrigin-RevId: 361392931\nChange-Id: Id814635746941c0666d2cf136f6acc424e7d0e9c"",""distinct"":true,""url"":""https://api.github.com/repos/xiaohanhuang/tensorflow/commits/3b95a6316b47b10e877151fbca3d12e49a38fdf5""}]",,,,,,,,,,
15435857256,PullRequestEvent,true,2021-03-07 10:43:00.000000 UTC,39814207,pull[bot],56189869,xiaohanhuang/tensorflow,,,,,,,,"""closed""",2095,,,,,,,,
15435897927,PullRequestEvent,true,2021-03-07 10:53:29.000000 UTC,39814207,pull[bot],302953642,TheAssassinRen/tensorflow,,,,,,,,"""opened""",506,,,,,,,,
15435902709,PullRequestEvent,true,2021-03-07 10:54:43.000000 UTC,39814207,pull[bot],42385109,hx71105417/dubbo,,,,,,,,"""opened""",11,,,,,,,,
15435903007,PushEvent,true,2021-03-07 10:54:48.000000 UTC,39814207,pull[bot],302953642,TheAssassinRen/tensorflow,"""refs/heads/master""",,,6659155919,3,3,"[{""sha"":""c8e6a3fb8f9ee595fe292e63449c65a2607a37e1"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Op documentation update.\n\tupdate of g3doc/includes/tf_passes.md\n\nPiperOrigin-RevId: 361390469\nChange-Id: I021164c4d178203466995dc14d99b49f504682dc"",""distinct"":true,""url"":""https://api.github.com/repos/TheAssassinRen/tensorflow/commits/c8e6a3fb8f9ee595fe292e63449c65a2607a37e1""},{""sha"":""86b2eda252f56be6b357195b3809d8a365987f62"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""compat: Update forward compatibility horizon to 2021-03-07\n\nPiperOrigin-RevId: 361392925\nChange-Id: I588c1d653d3e7ffea3425430b51582f34db4f1a8"",""distinct"":true,""url"":""https://api.github.com/repos/TheAssassinRen/tensorflow/commits/86b2eda252f56be6b357195b3809d8a365987f62""},{""sha"":""3b95a6316b47b10e877151fbca3d12e49a38fdf5"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Update GraphDef version to 698.\n\nPiperOrigin-RevId: 361392931\nChange-Id: Id814635746941c0666d2cf136f6acc424e7d0e9c"",""distinct"":true,""url"":""https://api.github.com/repos/TheAssassinRen/tensorflow/commits/3b95a6316b47b10e877151fbca3d12e49a38fdf5""}]",,,,,,,,,,
15435903041,PullRequestEvent,true,2021-03-07 10:54:48.000000 UTC,39814207,pull[bot],302953642,TheAssassinRen/tensorflow,,,,,,,,"""closed""",506,,,,,,,,
15435904003,PullRequestEvent,true,2021-03-07 10:55:03.000000 UTC,39814207,pull[bot],233268851,Manas1820/tensorflow,,,,,,,,"""opened""",840,,,,,,,,
15435905508,PushEvent,true,2021-03-07 10:55:25.000000 UTC,39814207,pull[bot],233268851,Manas1820/tensorflow,"""refs/heads/master""",,,6659157464,3,3,"[{""sha"":""c8e6a3fb8f9ee595fe292e63449c65a2607a37e1"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Op documentation update.\n\tupdate of g3doc/includes/tf_passes.md\n\nPiperOrigin-RevId: 361390469\nChange-Id: I021164c4d178203466995dc14d99b49f504682dc"",""distinct"":true,""url"":""https://api.github.com/repos/Manas1820/tensorflow/commits/c8e6a3fb8f9ee595fe292e63449c65a2607a37e1""},{""sha"":""86b2eda252f56be6b357195b3809d8a365987f62"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""compat: Update forward compatibility horizon to 2021-03-07\n\nPiperOrigin-RevId: 361392925\nChange-Id: I588c1d653d3e7ffea3425430b51582f34db4f1a8"",""distinct"":true,""url"":""https://api.github.com/repos/Manas1820/tensorflow/commits/86b2eda252f56be6b357195b3809d8a365987f62""},{""sha"":""3b95a6316b47b10e877151fbca3d12e49a38fdf5"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Update GraphDef version to 698.\n\nPiperOrigin-RevId: 361392931\nChange-Id: Id814635746941c0666d2cf136f6acc424e7d0e9c"",""distinct"":true,""url"":""https://api.github.com/repos/Manas1820/tensorflow/commits/3b95a6316b47b10e877151fbca3d12e49a38fdf5""}]",,,,,,,,,,
15435905531,PullRequestEvent,true,2021-03-07 10:55:25.000000 UTC,39814207,pull[bot],233268851,Manas1820/tensorflow,,,,,,,,"""closed""",840,,,,,,,,
15435824291,PushEvent,true,2021-03-07 10:34:24.000000 UTC,47391270,SamFC10,343279604,SamFC10/opencv,"""refs/heads/int8""",,,6659107786,1,1,"[{""sha"":""271555c447373b86b7002d245c20abb9a8b618b0"",""author"":{""name"":""SamFC10"",""email"":""698de89357824e9e1a6b901f367c9eb7db76d8bf@gmail.com""},""message"":""Comments and small fixes"",""distinct"":true,""url"":""https://api.github.com/repos/SamFC10/opencv/commits/271555c447373b86b7002d245c20abb9a8b618b0""}]",,,,,,,,,,
15435918499,PushEvent,true,2021-03-07 10:58:47.000000 UTC,47391270,SamFC10,343279604,SamFC10/opencv,"""refs/heads/int8""",,,6659165441,1,1,"[{""sha"":""42090fab6b6460cf7bf1eaed9badcb7f7abe1730"",""author"":{""name"":""SamFC10"",""email"":""698de89357824e9e1a6b901f367c9eb7db76d8bf@gmail.com""},""message"":""Comments and small fixes"",""distinct"":true,""url"":""https://api.github.com/repos/SamFC10/opencv/commits/42090fab6b6460cf7bf1eaed9badcb7f7abe1730""}]",,,,,,,,,,
15435873692,CreateEvent,true,2021-03-07 10:47:16.000000 UTC,49916559,VitoBravis,345320613,VitoBravis/react,,"""repository""","""user""",,,,,,,,,,,,,,
15435878601,CreateEvent,true,2021-03-07 10:48:35.000000 UTC,49916559,VitoBravis,345320613,VitoBravis/react,"""main""","""branch""","""user""",,,,,,,,,,,,,,
15435739557,PushEvent,true,2021-03-07 10:12:47.000000 UTC,51002485,OffLegAz,317660860,OffLegAz/helix,"""refs/heads/patch-13""",,,6659055933,1,1,"[{""sha"":""0e868d36bf759fdab2d5403b5ade7021eaf30aca"",""author"":{""name"":""LegAz"",""email"":""04b1cca4bd19e347e707173ac26c0793e47d9e03@users.noreply.github.com""},""message"":""Make IsRunning functions more precise"",""distinct"":true,""url"":""https://api.github.com/repos/OffLegAz/helix/commits/0e868d36bf759fdab2d5403b5ade7021eaf30aca""}]",,,,,,,,,,
15435874175,PushEvent,true,2021-03-07 10:47:24.000000 UTC,59663022,bic-harness,232630157,bic-harness/terraform,"""refs/heads/master""",,,6659138259,1,1,"[{""sha"":""093de020340c19235c67f6f3e71055501f74c150"",""author"":{""name"":""bic-harness"",""email"":""958a8fce0d8c4daa7a8f2b84b587df9162e56ab2@harness.io""},""message"":""test"",""distinct"":true,""url"":""https://api.github.com/repos/bic-harness/terraform/commits/093de020340c19235c67f6f3e71055501f74c150""}]",,,,,,,,,,
15435879255,PushEvent,true,2021-03-07 10:48:46.000000 UTC,59663022,bic-harness,232630157,bic-harness/terraform,"""refs/heads/master""",,,6659141276,1,1,"[{""sha"":""5cf3d96290f7c77b54b79dbd3c03639e140112db"",""author"":{""name"":""bic-harness"",""email"":""958a8fce0d8c4daa7a8f2b84b587df9162e56ab2@harness.io""},""message"":""Update main.tf"",""distinct"":true,""url"":""https://api.github.com/repos/bic-harness/terraform/commits/5cf3d96290f7c77b54b79dbd3c03639e140112db""}]",,,,,,,,,,
15435857361,CreateEvent,true,2021-03-07 10:43:02.000000 UTC,61402001,choseheon,345319829,choseheon/react,,"""repository""","""user""",,,,,,,,,,,,,,
15435759618,PushEvent,true,2021-03-07 10:17:55.000000 UTC,62678380,hoseong511,337725901,hoseong511/react,"""refs/heads/main""",,,6659068173,3,3,"[{""sha"":""2297df4e5f789c213b30a9bb3740d6c80d993141"",""author"":{""name"":""hoseong511"",""email"":""a36dadccc456be5ebc9ef6dde5556946ac5d6d4c@naver.com""},""message"":""update README.md 오늘은 map을 이용한 렌더링"",""distinct"":true,""url"":""https://api.github.com/repos/hoseong511/react/commits/2297df4e5f789c213b30a9bb3740d6c80d993141""},{""sha"":""ab1752caad7e3294bbd91eeaab4f71d72a7daa30"",""author"":{""name"":""hoseong511"",""email"":""a36dadccc456be5ebc9ef6dde5556946ac5d6d4c@naver.com""},""message"":""update App.js map, object"",""distinct"":true,""url"":""https://api.github.com/repos/hoseong511/react/commits/ab1752caad7e3294bbd91eeaab4f71d72a7daa30""},{""sha"":""59d9117a1099a0c3506fb8c19e845b9343561ecb"",""author"":{""name"":""hoseong511"",""email"":""a36dadccc456be5ebc9ef6dde5556946ac5d6d4c@naver.com""},""message"":""update README.md"",""distinct"":true,""url"":""https://api.github.com/repos/hoseong511/react/commits/59d9117a1099a0c3506fb8c19e845b9343561ecb""}]",,,,,,,,,,
15435898476,PushEvent,true,2021-03-07 10:53:38.000000 UTC,62678380,hoseong511,337725901,hoseong511/react,"""refs/heads/main""",,,6659153124,1,1,"[{""sha"":""e599f497dd274a01f2c7576d8c9f4644d8190220"",""author"":{""name"":""hoseong511"",""email"":""a36dadccc456be5ebc9ef6dde5556946ac5d6d4c@naver.com""},""message"":""update"",""distinct"":true,""url"":""https://api.github.com/repos/hoseong511/react/commits/e599f497dd274a01f2c7576d8c9f4644d8190220""}]",,,,,,,,,,
15435841641,PushEvent,true,2021-03-07 10:38:45.000000 UTC,63001174,lexxmg,314520629,lexxmg/react,"""refs/heads/97""",,,6659118320,1,1,"[{""sha"":""aeeb519224e95056cf385fdf03583ed5b7bed836"",""author"":{""name"":""mac-book"",""email"":""24b0a19b5a621f8d84029f099e928fc9b60dcff9@gmail.com""},""message"":""sync"",""distinct"":true,""url"":""https://api.github.com/repos/lexxmg/react/commits/aeeb519224e95056cf385fdf03583ed5b7bed836""}]",,,,,,,,,,
15435894709,CreateEvent,true,2021-03-07 10:52:38.000000 UTC,79761795,lochlenyash,345321578,lochlenyash/react,,"""repository""","""user""",,,,,,,,,,,,,,
15435894749,CreateEvent,true,2021-03-07 10:52:38.000000 UTC,79761795,lochlenyash,345321578,lochlenyash/react,"""main""","""branch""","""user""",,,,,,,,,,,,,,
15435692199,WatchEvent,true,2021-03-07 10:00:40.000000 UTC,2674567,Sqveeze,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15435704495,WatchEvent,true,2021-03-07 10:03:45.000000 UTC,3285430,SerafDosSantos,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15435841266,ForkEvent,true,2021-03-07 10:38:39.000000 UTC,6072685,yurtarmehmet,10270250,facebook/react,,,,,,,,,,"""yurtarmehmet/react""",,,,,,,
15435753872,WatchEvent,true,2021-03-07 10:16:27.000000 UTC,62041592,Free12699,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15435898944,IssuesEvent,true,2021-03-07 10:53:45.000000 UTC,65939059,SHARUNJOSEPH,10270250,facebook/react,,,,,,,,"""opened""",,,,,,,,,
15435722906,IssuesEvent,true,2021-03-07 10:08:30.000000 UTC,1190450,NicolasHug,843222,scikit-learn/scikit-learn,,,,,,,,"""opened""",,,,,,,,,
15435725823,IssueCommentEvent,true,2021-03-07 10:09:18.000000 UTC,1190450,NicolasHug,843222,scikit-learn/scikit-learn,,,,,,,,"""created""",,,,,,,,,
15435710278,PushEvent,true,2021-03-07 10:05:15.000000 UTC,15213161,pld-gitsync,5035239,pld-linux/opencv,"""refs/heads/master""",,,6659037854,1,1,"[{""sha"":""e652d7a77a25c38968a6ddbb02fb4d39f69ba4a6"",""author"":{""name"":""Jan Rękorajski"",""email"":""e6c8afe5cd121f1ebcd7153a1a24b1f5942bcaab@pld-linux.org""},""message"":""- fix paths in pkgconfig file and add missing dir to package\n- rel 2"",""distinct"":true,""url"":""https://api.github.com/repos/pld-linux/opencv/commits/e652d7a77a25c38968a6ddbb02fb4d39f69ba4a6""}]",,,,,,,,,,
15435714370,CreateEvent,true,2021-03-07 10:06:20.000000 UTC,15213161,pld-gitsync,5035239,pld-linux/opencv,"""auto/th/opencv-4.5.1-2""","""tag""","""user""",,,,,,,,,,,,,,
15435883946,WatchEvent,true,2021-03-07 10:49:57.000000 UTC,24296366,leandrosb,17728164,hashicorp/terraform,,,,,,,,"""started""",,,,,,,,,
15435736690,GollumEvent,true,2021-03-07 10:12:06.000000 UTC,2110786,vpisarev,5108051,opencv/opencv,,,,,,,,,,,,,,,,,
15435737978,GollumEvent,true,2021-03-07 10:12:23.000000 UTC,2110786,vpisarev,5108051,opencv/opencv,,,,,,,,,,,,,,,,,
15435915062,IssueCommentEvent,true,2021-03-07 10:57:53.000000 UTC,2604121,cocorosiekz,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15435742599,IssueCommentEvent,true,2021-03-07 10:13:34.000000 UTC,18486587,coreqode,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15435692087,PushEvent,true,2021-03-07 10:00:38.000000 UTC,19616653,ArmageddonKnight,204371788,UofT-EcoSystem/tensorflow,"""refs/heads/master""",,,6659026607,2,2,"[{""sha"":""86b2eda252f56be6b357195b3809d8a365987f62"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""compat: Update forward compatibility horizon to 2021-03-07\n\nPiperOrigin-RevId: 361392925\nChange-Id: I588c1d653d3e7ffea3425430b51582f34db4f1a8"",""distinct"":true,""url"":""https://api.github.com/repos/UofT-EcoSystem/tensorflow/commits/86b2eda252f56be6b357195b3809d8a365987f62""},{""sha"":""3b95a6316b47b10e877151fbca3d12e49a38fdf5"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Update GraphDef version to 698.\n\nPiperOrigin-RevId: 361392931\nChange-Id: Id814635746941c0666d2cf136f6acc424e7d0e9c"",""distinct"":true,""url"":""https://api.github.com/repos/UofT-EcoSystem/tensorflow/commits/3b95a6316b47b10e877151fbca3d12e49a38fdf5""}]",,,,,,,,,,
15435743712,PullRequestEvent,true,2021-03-07 10:13:50.000000 UTC,51002485,OffLegAz,97969812,NebulousCloud/helix,,,,,,,,"""opened""",290,,,,,,,,
15435738415,WatchEvent,true,2021-03-07 10:12:29.000000 UTC,2968787,navdeepsingh,135786093,typescript-cheatsheets/react,,,,,,,,"""started""",,,,,,,,,
15435773236,WatchEvent,true,2021-03-07 10:21:30.000000 UTC,78720082,58130700359,135786093,typescript-cheatsheets/react,,,,,,,,"""started""",,,,,,,,,
15435849460,CreateEvent,true,2021-03-07 10:40:48.000000 UTC,1615430,TomonoriMatsumura,184512701,ansible-roles-matsumura/terraform,"""1856""","""branch""","""user""",,,,,,,,,,,,,,
15435875750,PushEvent,true,2021-03-07 10:47:48.000000 UTC,1615430,TomonoriMatsumura,184512701,ansible-roles-matsumura/terraform,"""refs/heads/master""",,,6659139162,1,0,"[{""sha"":""5f516b2e89a1e622ff7c9dfc69bbb4ea81e3c1ad"",""author"":{""name"":""Tomonori Matsumura"",""email"":""15144ce7d7f82c4cad1504a78a1be8e554d1b5f8@yahoo.co.jp""},""message"":""GitHub ActionsのMoleculeの処理でPython3.9を採用した refs #1856"",""distinct"":false,""url"":""https://api.github.com/repos/ansible-roles-matsumura/terraform/commits/5f516b2e89a1e622ff7c9dfc69bbb4ea81e3c1ad""}]",,,,,,,,,,
15435876443,DeleteEvent,true,2021-03-07 10:48:00.000000 UTC,1615430,TomonoriMatsumura,184512701,ansible-roles-matsumura/terraform,"""1856""","""branch""","""user""",,,,,,,,,,,,,,
15436280279,PushEvent,true,2021-03-07 12:25:53.000000 UTC,293363,ehelms,4041354,ehelms/katello,"""refs/heads/support-ruby-2.7""",,,6659388159,1,1,"[{""sha"":""93ed48c711ff8664ac3616474303204a7ae8f88c"",""author"":{""name"":""Eric D. Helms"",""email"":""5c98d53ef48a8013e3d283964fdb3493785fa373@gmail.com""},""message"":""Support Ruby 2.7"",""distinct"":true,""url"":""https://api.github.com/repos/ehelms/katello/commits/93ed48c711ff8664ac3616474303204a7ae8f88c""}]",,,,,,,,,,
15436216120,PushEvent,true,2021-03-07 12:10:23.000000 UTC,1257990,acolley,269168895,acolley/phoenix,"""refs/heads/feature/curio""",,,6659347729,1,1,"[{""sha"":""0afced66de71cb218a4fe647a40daeb270087089"",""author"":{""name"":""osboxes.org"",""email"":""86718629f68cec5e1971b18f260197290b668c7c@localhost.localdomain""},""message"":""Use curio"",""distinct"":true,""url"":""https://api.github.com/repos/acolley/phoenix/commits/0afced66de71cb218a4fe647a40daeb270087089""}]",,,,,,,,,,
15436174812,PullRequestEvent,true,2021-03-07 12:00:42.000000 UTC,39814207,pull[bot],95080482,xiaoxiaopingzi/tensorflow,,,,,,,,"""opened""",4491,,,,,,,,
15436176053,PushEvent,true,2021-03-07 12:00:59.000000 UTC,39814207,pull[bot],95080482,xiaoxiaopingzi/tensorflow,"""refs/heads/master""",,,6659322610,2,2,"[{""sha"":""86b2eda252f56be6b357195b3809d8a365987f62"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""compat: Update forward compatibility horizon to 2021-03-07\n\nPiperOrigin-RevId: 361392925\nChange-Id: I588c1d653d3e7ffea3425430b51582f34db4f1a8"",""distinct"":true,""url"":""https://api.github.com/repos/xiaoxiaopingzi/tensorflow/commits/86b2eda252f56be6b357195b3809d8a365987f62""},{""sha"":""3b95a6316b47b10e877151fbca3d12e49a38fdf5"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Update GraphDef version to 698.\n\nPiperOrigin-RevId: 361392931\nChange-Id: Id814635746941c0666d2cf136f6acc424e7d0e9c"",""distinct"":true,""url"":""https://api.github.com/repos/xiaoxiaopingzi/tensorflow/commits/3b95a6316b47b10e877151fbca3d12e49a38fdf5""}]",,,,,,,,,,
15436176107,PullRequestEvent,true,2021-03-07 12:00:59.000000 UTC,39814207,pull[bot],95080482,xiaoxiaopingzi/tensorflow,,,,,,,,"""closed""",4491,,,,,,,,
15436179194,PullRequestEvent,true,2021-03-07 12:01:41.000000 UTC,39814207,pull[bot],83310415,NeatNerdPrime/tensorflow,,,,,,,,"""opened""",4483,,,,,,,,
15436180510,PushEvent,true,2021-03-07 12:01:58.000000 UTC,39814207,pull[bot],83310415,NeatNerdPrime/tensorflow,"""refs/heads/master""",,,6659325451,2,2,"[{""sha"":""86b2eda252f56be6b357195b3809d8a365987f62"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""compat: Update forward compatibility horizon to 2021-03-07\n\nPiperOrigin-RevId: 361392925\nChange-Id: I588c1d653d3e7ffea3425430b51582f34db4f1a8"",""distinct"":true,""url"":""https://api.github.com/repos/NeatNerdPrime/tensorflow/commits/86b2eda252f56be6b357195b3809d8a365987f62""},{""sha"":""3b95a6316b47b10e877151fbca3d12e49a38fdf5"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Update GraphDef version to 698.\n\nPiperOrigin-RevId: 361392931\nChange-Id: Id814635746941c0666d2cf136f6acc424e7d0e9c"",""distinct"":true,""url"":""https://api.github.com/repos/NeatNerdPrime/tensorflow/commits/3b95a6316b47b10e877151fbca3d12e49a38fdf5""}]",,,,,,,,,,
15436180543,PullRequestEvent,true,2021-03-07 12:01:58.000000 UTC,39814207,pull[bot],83310415,NeatNerdPrime/tensorflow,,,,,,,,"""closed""",4483,,,,,,,,
15436180865,PullRequestEvent,true,2021-03-07 12:02:03.000000 UTC,39814207,pull[bot],130050312,Rachelmorrell/tensorflow,,,,,,,,"""opened""",5251,,,,,,,,
15436183043,PushEvent,true,2021-03-07 12:02:31.000000 UTC,39814207,pull[bot],130050312,Rachelmorrell/tensorflow,"""refs/heads/master""",,,6659326979,2,2,"[{""sha"":""86b2eda252f56be6b357195b3809d8a365987f62"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""compat: Update forward compatibility horizon to 2021-03-07\n\nPiperOrigin-RevId: 361392925\nChange-Id: I588c1d653d3e7ffea3425430b51582f34db4f1a8"",""distinct"":true,""url"":""https://api.github.com/repos/Rachelmorrell/tensorflow/commits/86b2eda252f56be6b357195b3809d8a365987f62""},{""sha"":""3b95a6316b47b10e877151fbca3d12e49a38fdf5"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Update GraphDef version to 698.\n\nPiperOrigin-RevId: 361392931\nChange-Id: Id814635746941c0666d2cf136f6acc424e7d0e9c"",""distinct"":true,""url"":""https://api.github.com/repos/Rachelmorrell/tensorflow/commits/3b95a6316b47b10e877151fbca3d12e49a38fdf5""}]",,,,,,,,,,
15436183083,PullRequestEvent,true,2021-03-07 12:02:32.000000 UTC,39814207,pull[bot],130050312,Rachelmorrell/tensorflow,,,,,,,,"""closed""",5251,,,,,,,,
15436226292,WatchEvent,true,2021-03-07 12:12:54.000000 UTC,56084492,leo-bot,345336066,leo-bot/opencv,,,,,,,,"""started""",,,,,,,,,
15436351977,CreateEvent,true,2021-03-07 12:42:28.000000 UTC,57619377,MagamedRus,345334645,MagamedRus/react,"""main""","""branch""","""user""",,,,,,,,,,,,,,
15436354202,PushEvent,true,2021-03-07 12:42:58.000000 UTC,57619377,MagamedRus,345334645,MagamedRus/react,"""refs/heads/main""",,,6659434167,1,1,"[{""sha"":""46064bcba7dce8f2b0e2f985b5c7b8787aa9e917"",""author"":{""name"":""MagamedRus"",""email"":""69e02cf1c6a595ee66a0c40cc288ed3957a8cc01@users.noreply.github.com""},""message"":""Delete Новая сжатая ZIP-папка.zip"",""distinct"":true,""url"":""https://api.github.com/repos/MagamedRus/react/commits/46064bcba7dce8f2b0e2f985b5c7b8787aa9e917""}]",,,,,,,,,,
15436363456,CreateEvent,true,2021-03-07 12:45:16.000000 UTC,61084413,yksa,345344413,yksa/react,,"""repository""","""user""",,,,,,,,,,,,,,
15436362811,PushEvent,true,2021-03-07 12:45:07.000000 UTC,63001174,lexxmg,314520629,lexxmg/react,"""refs/heads/97""",,,6659439579,1,1,"[{""sha"":""a865812f6c6654c2ba0b5ee59fd8fc54c0ac0e02"",""author"":{""name"":""mac-book"",""email"":""24b0a19b5a621f8d84029f099e928fc9b60dcff9@gmail.com""},""message"":""sync"",""distinct"":true,""url"":""https://api.github.com/repos/lexxmg/react/commits/a865812f6c6654c2ba0b5ee59fd8fc54c0ac0e02""}]",,,,,,,,,,
15436367425,PushEvent,true,2021-03-07 12:46:13.000000 UTC,63001174,lexxmg,314520629,lexxmg/react,"""refs/heads/97""",,,6659442433,1,1,"[{""sha"":""c0d594e0a51c5833d630ea87aa071d2914c35208"",""author"":{""name"":""mac-book"",""email"":""24b0a19b5a621f8d84029f099e928fc9b60dcff9@gmail.com""},""message"":""fix"",""distinct"":true,""url"":""https://api.github.com/repos/lexxmg/react/commits/c0d594e0a51c5833d630ea87aa071d2914c35208""}]",,,,,,,,,,
15436228741,CreateEvent,true,2021-03-07 12:13:27.000000 UTC,74502149,RolandasSix,345337721,RolandasSix/react,,"""repository""","""user""",,,,,,,,,,,,,,
15436228788,CreateEvent,true,2021-03-07 12:13:28.000000 UTC,74502149,RolandasSix,345337721,RolandasSix/react,"""master""","""branch""","""user""",,,,,,,,,,,,,,
15436384523,CreateEvent,true,2021-03-07 12:50:27.000000 UTC,74502149,RolandasSix,345337721,RolandasSix/react,"""re""","""branch""","""user""",,,,,,,,,,,,,,
15436388509,PushEvent,true,2021-03-07 12:51:26.000000 UTC,74502149,RolandasSix,345337721,RolandasSix/react,"""refs/heads/master""",,,6659455559,1,1,"[{""sha"":""d698186ad1317aa9ff2c54513cb553c336bbe98b"",""author"":{""name"":""Rolandas"",""email"":""772c238d29bd710ba36bf7fbce4b177c8ec5f674@users.noreply.github.com""},""message"":""Add files via upload"",""distinct"":true,""url"":""https://api.github.com/repos/RolandasSix/react/commits/d698186ad1317aa9ff2c54513cb553c336bbe98b""}]",,,,,,,,,,
15436390667,PushEvent,true,2021-03-07 12:51:59.000000 UTC,74502149,RolandasSix,345337721,RolandasSix/react,"""refs/heads/re""",,,6659456971,1,1,"[{""sha"":""6350044d9b8c4874f1c88eb91141403a1b93968c"",""author"":{""name"":""Rolandas"",""email"":""772c238d29bd710ba36bf7fbce4b177c8ec5f674@users.noreply.github.com""},""message"":""Add files via upload"",""distinct"":true,""url"":""https://api.github.com/repos/RolandasSix/react/commits/6350044d9b8c4874f1c88eb91141403a1b93968c""}]",,,,,,,,,,
15436419672,PushEvent,true,2021-03-07 12:58:57.000000 UTC,74502149,RolandasSix,345337721,RolandasSix/react,"""refs/heads/master""",,,6659475063,1,1,"[{""sha"":""2ed1955a5b9ac8cdb09b178111484cef185ab3de"",""author"":{""name"":""Rolandas"",""email"":""772c238d29bd710ba36bf7fbce4b177c8ec5f674@users.noreply.github.com""},""message"":""Add files via upload"",""distinct"":true,""url"":""https://api.github.com/repos/RolandasSix/react/commits/2ed1955a5b9ac8cdb09b178111484cef185ab3de""}]",,,,,,,,,,
15436336209,PushEvent,true,2021-03-07 12:38:50.000000 UTC,75132129,damianfilipek81,339681776,damianfilipek81/react,"""refs/heads/main""",,,6659422842,1,1,"[{""sha"":""f36fbdcc40c972b1a2568ecf34af5a8e992466bc"",""author"":{""name"":""Damian Filipek"",""email"":""ac35f7efdb5d6c3185cae8d2a080efe6a9638982@gmail.com""},""message"":""Change Cards and lists creator styles"",""distinct"":true,""url"":""https://api.github.com/repos/damianfilipek81/react/commits/f36fbdcc40c972b1a2568ecf34af5a8e992466bc""}]",,,,,,,,,,
15436405781,ForkEvent,true,2021-03-07 12:55:36.000000 UTC,28652351,baixiang0101,4710920,apache/dubbo,,,,,,,,,,"""baixiang0101/dubbo""",,,,,,,
15436309667,WatchEvent,true,2021-03-07 12:32:37.000000 UTC,57082135,smile2sm,4710920,apache/dubbo,,,,,,,,"""started""",,,,,,,,,
15436329987,WatchEvent,true,2021-03-07 12:37:24.000000 UTC,9072397,eamonwoortman,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15436277710,ForkEvent,true,2021-03-07 12:25:17.000000 UTC,20490941,pranjalbareth,10270250,facebook/react,,,,,,,,,,"""pranjalbareth/react""",,,,,,,
15436278849,WatchEvent,true,2021-03-07 12:25:33.000000 UTC,55181923,RobinTan1024,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15436278963,ForkEvent,true,2021-03-07 12:25:35.000000 UTC,55181923,RobinTan1024,10270250,facebook/react,,,,,,,,,,"""RobinTan1024/react""",,,,,,,
15436323673,WatchEvent,true,2021-03-07 12:35:54.000000 UTC,58402711,HHuotari,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15436326105,WatchEvent,true,2021-03-07 12:36:29.000000 UTC,65849005,thaumatrge,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15436318265,WatchEvent,true,2021-03-07 12:34:35.000000 UTC,74792698,sal112,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15436260742,WatchEvent,true,2021-03-07 12:21:15.000000 UTC,176497,kaydoh,843222,scikit-learn/scikit-learn,,,,,,,,"""started""",,,,,,,,,
15436239861,IssuesEvent,true,2021-03-07 12:16:07.000000 UTC,38705255,Roffild,843222,scikit-learn/scikit-learn,,,,,,,,"""opened""",,,,,,,,,
15436279920,WatchEvent,true,2021-03-07 12:25:49.000000 UTC,14145706,dhrn,17728164,hashicorp/terraform,,,,,,,,"""started""",,,,,,,,,
15436282808,WatchEvent,true,2021-03-07 12:26:27.000000 UTC,14145706,dhrn,17728164,hashicorp/terraform,,,,,,,,"""started""",,,,,,,,,
15436323246,WatchEvent,true,2021-03-07 12:35:48.000000 UTC,36383311,elmeriniemela,5108051,opencv/opencv,,,,,,,,"""started""",,,,,,,,,
15436389493,WatchEvent,true,2021-03-07 12:51:41.000000 UTC,49237205,Djunnni,5108051,opencv/opencv,,,,,,,,"""started""",,,,,,,,,
15436246802,ForkEvent,true,2021-03-07 12:17:49.000000 UTC,55911930,Duaa0901,5108051,opencv/opencv,,,,,,,,,,"""Duaa0901/opencv""",,,,,,,
15436193505,ForkEvent,true,2021-03-07 12:04:57.000000 UTC,56084492,leo-bot,5108051,opencv/opencv,,,,,,,,,,"""leo-bot/opencv""",,,,,,,
15436226606,WatchEvent,true,2021-03-07 12:12:58.000000 UTC,56084492,leo-bot,5108051,opencv/opencv,,,,,,,,"""started""",,,,,,,,,
15436228792,ForkEvent,true,2021-03-07 12:13:28.000000 UTC,63448996,MohammedJassem,5108051,opencv/opencv,,,,,,,,,,"""MohammedJassem/opencv""",,,,,,,
15436275474,ForkEvent,true,2021-03-07 12:24:45.000000 UTC,64341057,Codehackerone,5108051,opencv/opencv,,,,,,,,,,"""Codehackerone/opencv""",,,,,,,
15436240391,ForkEvent,true,2021-03-07 12:16:14.000000 UTC,66097493,akahunt,5108051,opencv/opencv,,,,,,,,,,"""akahunt/opencv""",,,,,,,
15436302869,ForkEvent,true,2021-03-07 12:31:04.000000 UTC,70867438,davecrosshair,5108051,opencv/opencv,,,,,,,,,,"""davecrosshair/opencv""",,,,,,,
15436228986,IssueCommentEvent,true,2021-03-07 12:13:31.000000 UTC,24065857,barmanroys,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15436349111,WatchEvent,true,2021-03-07 12:41:47.000000 UTC,49008899,qinglinas,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15436408593,WatchEvent,true,2021-03-07 12:56:18.000000 UTC,49671583,imchiennb,135786093,typescript-cheatsheets/react,,,,,,,,"""started""",,,,,,,,,
15436410410,ForkEvent,true,2021-03-07 12:56:46.000000 UTC,49671583,imchiennb,135786093,typescript-cheatsheets/react,,,,,,,,,,"""imchiennb/react""",,,,,,,
15436241568,CreateEvent,true,2021-03-07 12:16:32.000000 UTC,5199868,cesar-richard,313146981,SiMDE-Projects/terraform,"""addsThomasGuegan""","""branch""","""user""",,,,,,,,,,,,,,
15436242482,PullRequestEvent,true,2021-03-07 12:16:46.000000 UTC,5199868,cesar-richard,313146981,SiMDE-Projects/terraform,,,,,,,,"""opened""",31,,,,,,,,
15436275060,PullRequestEvent,true,2021-03-07 12:24:39.000000 UTC,5199868,cesar-richard,313146981,SiMDE-Projects/terraform,,,,,,,,"""closed""",31,,,,,,,,
15436275092,DeleteEvent,true,2021-03-07 12:24:39.000000 UTC,5199868,cesar-richard,313146981,SiMDE-Projects/terraform,"""addsThomasGuegan""","""branch""","""user""",,,,,,,,,,,,,,
15436275098,PushEvent,true,2021-03-07 12:24:39.000000 UTC,5199868,cesar-richard,313146981,SiMDE-Projects/terraform,"""refs/heads/main""",,,6659385041,2,2,"[{""sha"":""ab81ee98227116ca0aa04a6292073e4e1c4389b3"",""author"":{""name"":""César Richard"",""email"":""725435832a26c487871c82cd70f3c99aa0225284@weezevent.com""},""message"":""Adds Thomas Guegan\nResp info UTSea P21 + team info integ 21"",""distinct"":true,""url"":""https://api.github.com/repos/SiMDE-Projects/terraform/commits/ab81ee98227116ca0aa04a6292073e4e1c4389b3""},{""sha"":""f2e970f3ec716bc6a72118bf3a5a95ff631dc671"",""author"":{""name"":""César Richard"",""email"":""725435832a26c487871c82cd70f3c99aa0225284@weezevent.com""},""message"":""Merge pull request #31 from SiMDE-Projects/addsThomasGuegan\n\nAdds Thomas Guegan"",""distinct"":true,""url"":""https://api.github.com/repos/SiMDE-Projects/terraform/commits/f2e970f3ec716bc6a72118bf3a5a95ff631dc671""}]",,,,,,,,,,
15436249234,IssueCommentEvent,true,2021-03-07 12:18:24.000000 UTC,41898282,github-actions[bot],313146981,SiMDE-Projects/terraform,,,,,,,,"""created""",,,,,,,,,
15435047332,PushEvent,true,2021-03-07 06:52:55.000000 UTC,124144,jlahoda,104623187,jlahoda/netbeans,"""refs/heads/java-lsp-server-java-client""",,,6658627212,1000,6,"[{""sha"":""289e483cda194162d8b8e6ad30894d0b814d6db8"",""author"":{""name"":""Jan Lahoda"",""email"":""f0e6c8b88151cef643d02fd650fc0b650ee35a7f@netbeans.org""},""message"":""[NETBEANS-4356] Code Completion must check also superclass/superinterface methods when determining if cast is required."",""distinct"":false,""url"":""https://api.github.com/repos/jlahoda/netbeans/commits/289e483cda194162d8b8e6ad30894d0b814d6db8""},{""sha"":""1cd99dbca51a46c570a67a41ce9e8238c4d8e48e"",""author"":{""name"":""Laszlo Kishalmi"",""email"":""d8a0cf73a7cf1456c25d657e84c32ebf3797e20a@gmail.com""},""message"":""[NETBEANS-2790] Do not throw ClosedWatchServiceException on Shutdown."",""distinct"":false,""url"":""https://api.github.com/repos/jlahoda/netbeans/commits/1cd99dbca51a46c570a67a41ce9e8238c4d8e48e""},{""sha"":""e9471468e6004a21b52601a2be47c2cacdd191f7"",""author"":{""name"":""Jaroslav Tulach"",""email"":""872270679d6b683587ccc2f713e451b9fad3065f@apidesign.org""},""message"":""Verify NbBundle and Lookup (with ActiveQueue) can be used in Thread-less sandbox"",""distinct"":false,""url"":""https://api.github.com/repos/jlahoda/netbeans/commits/e9471468e6004a21b52601a2be47c2cacdd191f7""},{""sha"":""5f3f8f5961ce6671afff8736fb5b018615813199"",""author"":{""name"":""Brad Walker"",""email"":""df146c18dea196a7ef3257b8f32f06388398712f@musings.com""},""message"":""[NETBEANS-4459] - remove use of deprecated field in Logger\n\nRemove use of the deprecated Logger.global field..\n\n   [repeat] /home/bwalker/src/netbeans/enterprise/web.core/src/org/netbeans/modules/web/wizards/ServletPanel.java:169: warning: [deprecation] global in Logger has been deprecated\n   [repeat]             Logger.global.log(Level.WARNING, \""getServlets failed\"", e);\n   [repeat]                   ^\n   [repeat] /home/bwalker/src/netbeans/enterprise/web.core/src/org/netbeans/modules/web/wizards/ServletPanel.java:172: warning: [deprecation] global in Logger has been deprecated\n   [repeat]             Logger.global.log(Level.WARNING, \""getServlets failed\"", e);\n   [repeat]                   ^\n   [repeat] Note: Some input files additionally use or override a deprecated API."",""distinct"":false,""url"":""https://api.github.com/repos/jlahoda/netbeans/commits/5f3f8f5961ce6671afff8736fb5b018615813199""},{""sha"":""0d66999d2ecc897f288db0fb5937570ca93d8097"",""author"":{""name"":""Tomáš Myšík"",""email"":""7bc6306f32b2b69ea1ff0ff423c370d963fa2562@gmail.com""},""message"":""Merge pull request #2190 from KacerCZ/neon-tests-fix\n\nFix tests for Neon language"",""distinct"":false,""url"":""https://api.github.com/repos/jlahoda/netbeans/commits/0d66999d2ecc897f288db0fb5937570ca93d8097""},{""sha"":""e955df4dd219b5be5b012b75d69773d14cc37bef"",""author"":{""name"":""Eppleton IT"",""email"":""0f0ed7eb407a25822a1ed91c62c3d086768ef876@dukescript.com""},""message"":""Merge '12.0+' into MoveToJavaFXCluster"",""distinct"":false,""url"":""https://api.github.com/repos/jlahoda/netbeans/commits/e955df4dd219b5be5b012b75d69773d14cc37bef""},{""sha"":""18d0b9db8bc750b658057ffcc785e608787ceea1"",""author"":{""name"":""Tomas Prochazka"",""email"":""50f181a8ad136b455b3c76954307d5feb4d7fba6@razdva.cz""},""message"":""[NETBEANS-4464] Fixed unit tests for Atoum on Windows"",""distinct"":false,""url"":""https://api.github.com/repos/jlahoda/netbeans/commits/18d0b9db8bc750b658057ffcc785e608787ceea1""},{""sha"":""fc9edf9e2db121661830a0f5a1feb0250f689a17"",""author"":{""name"":""Brad Walker"",""email"":""df146c18dea196a7ef3257b8f32f06388398712f@musings.com""},""message"":""[NETBEANS-4465] - update RAT license exceptions\n\nWhen running the RAT report after a build has taken place, the report\npicks up hundreds of generated files. These files do not have a license\nheader and it's really not necessary as they are generated by the build process.."",""distinct"":false,""url"":""https://api.github.com/repos/jlahoda/netbeans/commits/fc9edf9e2db121661830a0f5a1feb0250f689a17""},{""sha"":""c357538bd09c90ba43830ee2d789b983ac25b992"",""author"":{""name"":""Tomas Prochazka"",""email"":""50f181a8ad136b455b3c76954307d5feb4d7fba6@razdva.cz""},""message"":""[NETBEANS-4463] Fixed unit tests for Codeception on Windows"",""distinct"":false,""url"":""https://api.github.com/repos/jlahoda/netbeans/commits/c357538bd09c90ba43830ee2d789b983ac25b992""},{""sha"":""35542e7e3d23be9f935a2e0c79c6b195784e02fb"",""author"":{""name"":""Eppleton IT"",""email"":""0f0ed7eb407a25822a1ed91c62c3d086768ef876@dukescript.com""},""message"":""Adding missing license"",""distinct"":false,""url"":""https://api.github.com/repos/jlahoda/netbeans/commits/35542e7e3d23be9f935a2e0c79c6b195784e02fb""},{""sha"":""14b897cbd99027c233d66f98b032f1b5ae4186c2"",""author"":{""name"":""Hector Espert"",""email"":""2909b468ade9014bb9269a6e2e9d1bfc957cc3f7@gmail.com""},""message"":""Merge pull request #2198 from KacerCZ/netbeans-4463-fix-codeception-tests\n\n[NETBEANS-4463] Fixed unit tests for Codeception on Windows"",""distinct"":false,""url"":""https://api.github.com/repos/jlahoda/netbeans/commits/14b897cbd99027c233d66f98b032f1b5ae4186c2""},{""sha"":""93483ccf9edf76a552bcac89506bca2e2739ee23"",""author"":{""name"":""Matthias Bläsing"",""email"":""2733b4844ad39354bd21fd2bca55a8804e19a60d@doppel-helix.eu""},""message"":""Merge pull request #2195 from BradWalker/update_logger_global\n\n[NETBEANS-4459] - remove use of deprecated field in Logger"",""distinct"":false,""url"":""https://api.github.com/repos/jlahoda/netbeans/commits/93483ccf9edf76a552bcac89506bca2e2739ee23""},{""sha"":""260e2c49018c8d684c578fbb2923eb20b0c869cf"",""author"":{""name"":""Tomas Prochazka"",""email"":""50f181a8ad136b455b3c76954307d5feb4d7fba6@razdva.cz""},""message"":""Merge branch 'master' into netbeans-4464-fix-atoum-tests"",""distinct"":false,""url"":""https://api.github.com/repos/jlahoda/netbeans/commits/260e2c49018c8d684c578fbb2923eb20b0c869cf""},{""sha"":""5f1b7da1cf295b9c2ef4d90600c217487c4a5d5c"",""author"":{""name"":""Hector Espert"",""email"":""2909b468ade9014bb9269a6e2e9d1bfc957cc3f7@gmail.com""},""message"":""Merge pull request #2199 from KacerCZ/netbeans-4464-fix-atoum-tests\n\n[NETBEANS-4464] Fixed unit tests for Atoum on Windows"",""distinct"":false,""url"":""https://api.github.com/repos/jlahoda/netbeans/commits/5f1b7da1cf295b9c2ef4d90600c217487c4a5d5c""},{""sha"":""081d26f13f2d0fa3ba1d89d8767ce2067d8f6cec"",""author"":{""name"":""Arunava Sinha"",""email"":""3e991362419362788b08448fef0bc549c60f28da@oracle.com""},""message"":""[NETBEANS-4431]: Added option to create new file in Java project as record type"",""distinct"":false,""url"":""https://api.github.com/repos/jlahoda/netbeans/commits/081d26f13f2d0fa3ba1d89d8767ce2067d8f6cec""},{""sha"":""d84a5d743c0f9e581c30468ced1db2166dd63d2f"",""author"":{""name"":""Tomas Prochazka"",""email"":""50f181a8ad136b455b3c76954307d5feb4d7fba6@razdva.cz""},""message"":""Added tests for PHP modules in Windows build"",""distinct"":false,""url"":""https://api.github.com/repos/jlahoda/netbeans/commits/d84a5d743c0f9e581c30468ced1db2166dd63d2f""},{""sha"":""c17a078733d26dcb7b4b65ebc69253d28afc82aa"",""author"":{""name"":""Eppleton IT"",""email"":""0f0ed7eb407a25822a1ed91c62c3d086768ef876@dukescript.com""},""message"":""Localized error messages from ModuleManager"",""distinct"":false,""url"":""https://api.github.com/repos/jlahoda/netbeans/commits/c17a078733d26dcb7b4b65ebc69253d28afc82aa""},{""sha"":""bc31e77f4eae1ae23dabe7cd511750c596f03913"",""author"":{""name"":""Eppleton IT"",""email"":""0f0ed7eb407a25822a1ed91c62c3d086768ef876@dukescript.com""},""message"":""Enable download when simple activation fails"",""distinct"":false,""url"":""https://api.github.com/repos/jlahoda/netbeans/commits/bc31e77f4eae1ae23dabe7cd511750c596f03913""},{""sha"":""c067f125a546f119b04db7e1432a117af2f82310"",""author"":{""name"":""Hector Espert"",""email"":""2909b468ade9014bb9269a6e2e9d1bfc957cc3f7@gmail.com""},""message"":""Merge pull request #2202 from KacerCZ/test-php-modules\n\nAdded tests for PHP modules in Windows build"",""distinct"":false,""url"":""https://api.github.com/repos/jlahoda/netbeans/commits/c067f125a546f119b04db7e1432a117af2f82310""},{""sha"":""b986ae2945ac48052659a2fd8410ef81dfb9ce24"",""author"":{""name"":""Tomas Prochazka"",""email"":""50f181a8ad136b455b3c76954307d5feb4d7fba6@razdva.cz""},""message"":""[NETBEANS-4479] Fixed tests for PHPUnit on Windows\n\nFixed Windows-specific inputs for tests."",""distinct"":false,""url"":""https://api.github.com/repos/jlahoda/netbeans/commits/b986ae2945ac48052659a2fd8410ef81dfb9ce24""}]",,,,,,,,,,
15435004059,PushEvent,true,2021-03-07 06:37:48.000000 UTC,3624098,acdlite,45281256,acdlite/react,"""refs/heads/lazy-context-propagation""",,,6658600061,2,2,"[{""sha"":""7df65725ba7826508e0f3c0f1c6f088efdbecfca"",""author"":{""name"":""Brian Vaughn"",""email"":""59942a8ec08225673b377c556396ca24baabd1b2@fb.com""},""message"":""Split getComponentName into getComponentNameFromFiber and getComponentNameFromType (#20940)\n\nSplit getComponentName into getComponentNameFromFiber and getComponentNameFromType"",""distinct"":true,""url"":""https://api.github.com/repos/acdlite/react/commits/7df65725ba7826508e0f3c0f1c6f088efdbecfca""},{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/acdlite/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""}]",,,,,,,,,,
15435004258,PushEvent,true,2021-03-07 06:37:52.000000 UTC,3624098,acdlite,45281256,acdlite/react,"""refs/heads/lazy-context-propagation""",,,6658600186,4,4,"[{""sha"":""62a37a8ebc0fcc7f343bffa434c24f6eb390a04e"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes\n\nWhen a context provider changes, we scan the tree for matching consumers\nand mark them as dirty so that we know they have pending work. This\nprevents us from bailing out if, say, an intermediate wrapper is\nmemoized.\n\nCurrently, we propagate these changes eagerly, at the provider.\n\nHowever, in many cases, we would have ended up visiting the consumer\nnodes anyway, as part of the normal render traversal, because there's no\nmemoized node in between that bails out.\n\nWe can save CPU cycles by propagating changes only when we hit a\nmemoized component — so, instead of propagating eagerly at the provider,\nwe propagate lazily if or when something bails out.\n\nMost of our bailout logic is centralized in\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\ndifficult to implement correctly.\n\nThere are some exceptions: Suspense and Offscreen. Those are special\nbecause they sometimes defer the rendering of their children to a\ncompletely separate render cycle. In those cases, we must take extra\ncare to propagate *all* the context changes, not just the first one.\n\nI'm pleasantly surprised at how little I needed to change in this\ninitial implementation. I was worried I'd have to use the reconciler\nfork, but I ended up being able to wrap all my changes in a regular\nfeature flag. So, we could run an experiment in parallel to our other\nones.\n\nI do consider this a risky rollout overall because of the potential for\nsubtle semantic deviations. However, the model is simple enough that I\ndon't expect us to have trouble fixing regressions if or when they arise\nduring internal dogfooding.\n\n---\n\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\nby @gnoff. I did deviate in some of the implementation details, though.\n\nThe main one is how I chose to track context changes. Instead of storing\na dirty flag on the stack, I added a `memoizedValue` field to the\ncontext dependency object. Then, to check if something has changed, the\nconsumer compares the new context value to the old (memoized) one.\n\nThis is necessary because of Suspense and Offscreen — those components\ndefer work from one render into a later one. When the subtree continues\nrendering, the stack from the previous render is no longer available.\nBut the memoized values on the dependencies list are. This requires a\nbit more work when a consumer bails out, but nothing considerable, and\nthere are ways we could optimize it even further. Conceptually, this\nmodel is really appealing, since it matches how our other features\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\n`getDerivedStateFromProps`, the built-in cache, and so on.\n\nI also intentionally dropped support for\n`unstable_calculateChangedBits`. We're planning to remove this API\nanyway before the next major release, in favor of context selectors.\nIt's an unstable feature that we never advertised; I don't think it's\nseen much adoption.\n\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/acdlite/react/commits/62a37a8ebc0fcc7f343bffa434c24f6eb390a04e""},{""sha"":""1a7f224ce51a3dd687ea02690e955c1f178479cc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Propagate all contexts in single pass\n\nInstead of propagating the tree once per changed context, we can check\nall the contexts in a single propagation. This inverts the two loops so\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\n\nThis adds a bit of overhead to the case where only a single context\nchanges because you have to unwrap the context from the array. I'm also\nunsure if this will hurt cache locality.\n\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/acdlite/react/commits/1a7f224ce51a3dd687ea02690e955c1f178479cc""},{""sha"":""9146a1713970d12f401c266fc53c507bf21223c4"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Stop propagating at nearest dependency match\n\nBecause we now propagate all context providers in a single traversal, we\ncan defer context propagation to a subtree without losing information\nabout which context providers we're deferring — it's all of them.\n\nTheoretically, this is a big optimization because it means we'll never\npropagate to any tree that has work scheduled on it, nor will we ever\npropagate the same tree twice.\n\nThere's an awkward case related to bailing out of the siblings of a\ncontext consumer. Because those siblings don't bail out until after\nthey've already entered the begin phase, we have to do extra work to\nmake sure they don't unecessarily propagate context again. We could\navoid this by adding an earlier bailout for sibling nodes, something\nwe've discussed in the past. We should consider this during the next\nrefactor of the fiber tree structure.\n\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/acdlite/react/commits/9146a1713970d12f401c266fc53c507bf21223c4""},{""sha"":""63941d5b6a82eaa516da7708b7ed4b7f1fe7108f"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Mark trees that need propagation in readContext\n\nInstead of storing matched context consumers in a Set, we can mark\nwhen a consumer receives an update inside `readContext`.\n\nI hesistated to put anything in this function because it's such a hot\npath, but so are bail outs. Fortunately, we only need to set this flag\nonce, the first time a context is read. So I think it's a reasonable\ntrade off.\n\nIn exchange, propagation is faster because we no longer need to\naccumulate a Set of matched consumers, and fiber bailouts are faster\nbecause we don't need to consult that Set. And the code is simpler."",""distinct"":true,""url"":""https://api.github.com/repos/acdlite/react/commits/63941d5b6a82eaa516da7708b7ed4b7f1fe7108f""}]",,,,,,,,,,
15435001461,PushEvent,true,2021-03-07 06:36:51.000000 UTC,11058581,happyvivek,344215538,happyvivek/terraform,"""refs/heads/master""",,,6658598434,1,1,"[{""sha"":""1acf81a670fb617b09ebc6100eb135ce143dfd60"",""author"":{""name"":""vivesisi"",""email"":""a0e939f4ddf4aeeeb85b2bd6d3a1d526f99ad878@VIVESISI-IN.oradev.oraclecorp.com""},""message"":""Adding new code"",""distinct"":true,""url"":""https://api.github.com/repos/happyvivek/terraform/commits/1acf81a670fb617b09ebc6100eb135ce143dfd60""}]",,,,,,,,,,
15434964599,PullRequestEvent,true,2021-03-07 06:24:30.000000 UTC,11639412,GulajavaMinistudio,186142742,GulajavaMinistudio/tensorflow,,,,,,,,"""opened""",415,,,,,,,,
15434939164,WatchEvent,true,2021-03-07 06:15:45.000000 UTC,14340999,hearbeat,108098296,hearbeat/tensorflow,,,,,,,,"""started""",,,,,,,,,
15434999989,CreateEvent,true,2021-03-07 06:36:19.000000 UTC,22809044,velmuruganmani,293494782,velmuruganmani/react,"""reacttypescript""","""branch""","""user""",,,,,,,,,,,,,,
15434998752,CreateEvent,true,2021-03-07 06:35:55.000000 UTC,28709322,PromiseChan,345257573,PromiseChan/dubbo,"""fix-url-equals-skip-branch""","""branch""","""user""",,,,,,,,,,,,,,
15435040968,CreateEvent,true,2021-03-07 06:50:50.000000 UTC,35373005,Jasonhls,345278613,Jasonhls/dubbo,,"""repository""","""user""",,,,,,,,,,,,,,
15434895905,PullRequestEvent,true,2021-03-07 06:00:42.000000 UTC,39814207,pull[bot],95080482,xiaoxiaopingzi/tensorflow,,,,,,,,"""opened""",4489,,,,,,,,
15434896474,PushEvent,true,2021-03-07 06:00:54.000000 UTC,39814207,pull[bot],95080482,xiaoxiaopingzi/tensorflow,"""refs/heads/master""",,,6658530647,1,1,"[{""sha"":""fb7d34de0a7a892d070104aa4e385159817e7ef5"",""author"":{""name"":""Smit Hinsu"",""email"":""0f9dce5f2da36d8473ff9a50fbb0e06a148c5fae@google.com""},""message"":""Add prepare-tpu-computation-for-tf-export pass\n\nThis pass transforms the MLIR module attached to _TpuCompileMlir op to be legal for export to TensorFlow GraphDef. Currently, this pass handles mhlo.sharding attribute on function attributes by passing them through TF XlaSharding ops and dropping tf.aliasing_output attribute.\n\nThis will be used for using the old tf2xla bridge for second phase of the compilation.\n\nPiperOrigin-RevId: 361378341\nChange-Id: Id418212e65f5d177bc4bb8c279824ef8bfc2add2"",""distinct"":true,""url"":""https://api.github.com/repos/xiaoxiaopingzi/tensorflow/commits/fb7d34de0a7a892d070104aa4e385159817e7ef5""}]",,,,,,,,,,
15434896497,PullRequestEvent,true,2021-03-07 06:00:55.000000 UTC,39814207,pull[bot],95080482,xiaoxiaopingzi/tensorflow,,,,,,,,"""closed""",4489,,,,,,,,
15434898473,PullRequestEvent,true,2021-03-07 06:01:32.000000 UTC,39814207,pull[bot],83310415,NeatNerdPrime/tensorflow,,,,,,,,"""opened""",4481,,,,,,,,
15434898933,PushEvent,true,2021-03-07 06:01:41.000000 UTC,39814207,pull[bot],83310415,NeatNerdPrime/tensorflow,"""refs/heads/master""",,,6658532264,1,1,"[{""sha"":""fb7d34de0a7a892d070104aa4e385159817e7ef5"",""author"":{""name"":""Smit Hinsu"",""email"":""0f9dce5f2da36d8473ff9a50fbb0e06a148c5fae@google.com""},""message"":""Add prepare-tpu-computation-for-tf-export pass\n\nThis pass transforms the MLIR module attached to _TpuCompileMlir op to be legal for export to TensorFlow GraphDef. Currently, this pass handles mhlo.sharding attribute on function attributes by passing them through TF XlaSharding ops and dropping tf.aliasing_output attribute.\n\nThis will be used for using the old tf2xla bridge for second phase of the compilation.\n\nPiperOrigin-RevId: 361378341\nChange-Id: Id418212e65f5d177bc4bb8c279824ef8bfc2add2"",""distinct"":true,""url"":""https://api.github.com/repos/NeatNerdPrime/tensorflow/commits/fb7d34de0a7a892d070104aa4e385159817e7ef5""}]",,,,,,,,,,
15434898956,PullRequestEvent,true,2021-03-07 06:01:42.000000 UTC,39814207,pull[bot],83310415,NeatNerdPrime/tensorflow,,,,,,,,"""closed""",4481,,,,,,,,
15434899811,PullRequestEvent,true,2021-03-07 06:01:57.000000 UTC,39814207,pull[bot],130050312,Rachelmorrell/tensorflow,,,,,,,,"""opened""",5249,,,,,,,,
15434900287,PushEvent,true,2021-03-07 06:02:06.000000 UTC,39814207,pull[bot],130050312,Rachelmorrell/tensorflow,"""refs/heads/master""",,,6658533111,1,1,"[{""sha"":""fb7d34de0a7a892d070104aa4e385159817e7ef5"",""author"":{""name"":""Smit Hinsu"",""email"":""0f9dce5f2da36d8473ff9a50fbb0e06a148c5fae@google.com""},""message"":""Add prepare-tpu-computation-for-tf-export pass\n\nThis pass transforms the MLIR module attached to _TpuCompileMlir op to be legal for export to TensorFlow GraphDef. Currently, this pass handles mhlo.sharding attribute on function attributes by passing them through TF XlaSharding ops and dropping tf.aliasing_output attribute.\n\nThis will be used for using the old tf2xla bridge for second phase of the compilation.\n\nPiperOrigin-RevId: 361378341\nChange-Id: Id418212e65f5d177bc4bb8c279824ef8bfc2add2"",""distinct"":true,""url"":""https://api.github.com/repos/Rachelmorrell/tensorflow/commits/fb7d34de0a7a892d070104aa4e385159817e7ef5""}]",,,,,,,,,,
15434900313,PullRequestEvent,true,2021-03-07 06:02:07.000000 UTC,39814207,pull[bot],130050312,Rachelmorrell/tensorflow,,,,,,,,"""closed""",5249,,,,,,,,
15434948784,PullRequestEvent,true,2021-03-07 06:19:13.000000 UTC,39814207,pull[bot],163274816,kokizzu/tensorflow,,,,,,,,"""opened""",3475,,,,,,,,
15434951071,PushEvent,true,2021-03-07 06:20:00.000000 UTC,39814207,pull[bot],163274816,kokizzu/tensorflow,"""refs/heads/master""",,,6658565911,1,1,"[{""sha"":""fb7d34de0a7a892d070104aa4e385159817e7ef5"",""author"":{""name"":""Smit Hinsu"",""email"":""0f9dce5f2da36d8473ff9a50fbb0e06a148c5fae@google.com""},""message"":""Add prepare-tpu-computation-for-tf-export pass\n\nThis pass transforms the MLIR module attached to _TpuCompileMlir op to be legal for export to TensorFlow GraphDef. Currently, this pass handles mhlo.sharding attribute on function attributes by passing them through TF XlaSharding ops and dropping tf.aliasing_output attribute.\n\nThis will be used for using the old tf2xla bridge for second phase of the compilation.\n\nPiperOrigin-RevId: 361378341\nChange-Id: Id418212e65f5d177bc4bb8c279824ef8bfc2add2"",""distinct"":true,""url"":""https://api.github.com/repos/kokizzu/tensorflow/commits/fb7d34de0a7a892d070104aa4e385159817e7ef5""}]",,,,,,,,,,
15434951089,PullRequestEvent,true,2021-03-07 06:20:00.000000 UTC,39814207,pull[bot],163274816,kokizzu/tensorflow,,,,,,,,"""closed""",3475,,,,,,,,
15434978239,PullRequestEvent,true,2021-03-07 06:29:23.000000 UTC,39814207,pull[bot],107213661,Geolem/tensorflow,,,,,,,,"""opened""",24,,,,,,,,
15434979316,PushEvent,true,2021-03-07 06:29:47.000000 UTC,39814207,pull[bot],107213661,Geolem/tensorflow,"""refs/heads/master""",,,6658583910,1,1,"[{""sha"":""fb7d34de0a7a892d070104aa4e385159817e7ef5"",""author"":{""name"":""Smit Hinsu"",""email"":""0f9dce5f2da36d8473ff9a50fbb0e06a148c5fae@google.com""},""message"":""Add prepare-tpu-computation-for-tf-export pass\n\nThis pass transforms the MLIR module attached to _TpuCompileMlir op to be legal for export to TensorFlow GraphDef. Currently, this pass handles mhlo.sharding attribute on function attributes by passing them through TF XlaSharding ops and dropping tf.aliasing_output attribute.\n\nThis will be used for using the old tf2xla bridge for second phase of the compilation.\n\nPiperOrigin-RevId: 361378341\nChange-Id: Id418212e65f5d177bc4bb8c279824ef8bfc2add2"",""distinct"":true,""url"":""https://api.github.com/repos/Geolem/tensorflow/commits/fb7d34de0a7a892d070104aa4e385159817e7ef5""}]",,,,,,,,,,
15434979333,PullRequestEvent,true,2021-03-07 06:29:48.000000 UTC,39814207,pull[bot],107213661,Geolem/tensorflow,,,,,,,,"""closed""",24,,,,,,,,
15434985908,PullRequestEvent,true,2021-03-07 06:31:43.000000 UTC,39814207,pull[bot],117140827,testkevinbonz/tensorflow,,,,,,,,"""opened""",6916,,,,,,,,
15434986529,PushEvent,true,2021-03-07 06:31:55.000000 UTC,39814207,pull[bot],117140827,testkevinbonz/tensorflow,"""refs/heads/master""",,,6658588680,1,1,"[{""sha"":""fb7d34de0a7a892d070104aa4e385159817e7ef5"",""author"":{""name"":""Smit Hinsu"",""email"":""0f9dce5f2da36d8473ff9a50fbb0e06a148c5fae@google.com""},""message"":""Add prepare-tpu-computation-for-tf-export pass\n\nThis pass transforms the MLIR module attached to _TpuCompileMlir op to be legal for export to TensorFlow GraphDef. Currently, this pass handles mhlo.sharding attribute on function attributes by passing them through TF XlaSharding ops and dropping tf.aliasing_output attribute.\n\nThis will be used for using the old tf2xla bridge for second phase of the compilation.\n\nPiperOrigin-RevId: 361378341\nChange-Id: Id418212e65f5d177bc4bb8c279824ef8bfc2add2"",""distinct"":true,""url"":""https://api.github.com/repos/testkevinbonz/tensorflow/commits/fb7d34de0a7a892d070104aa4e385159817e7ef5""}]",,,,,,,,,,
15434986558,PullRequestEvent,true,2021-03-07 06:31:55.000000 UTC,39814207,pull[bot],117140827,testkevinbonz/tensorflow,,,,,,,,"""closed""",6916,,,,,,,,
15435019901,PullRequestEvent,true,2021-03-07 06:43:24.000000 UTC,39814207,pull[bot],190277211,KabirKwatra/tensorflow,,,,,,,,"""opened""",5520,,,,,,,,
15435021352,PushEvent,true,2021-03-07 06:43:57.000000 UTC,39814207,pull[bot],190277211,KabirKwatra/tensorflow,"""refs/heads/master""",,,6658610962,1,1,"[{""sha"":""fb7d34de0a7a892d070104aa4e385159817e7ef5"",""author"":{""name"":""Smit Hinsu"",""email"":""0f9dce5f2da36d8473ff9a50fbb0e06a148c5fae@google.com""},""message"":""Add prepare-tpu-computation-for-tf-export pass\n\nThis pass transforms the MLIR module attached to _TpuCompileMlir op to be legal for export to TensorFlow GraphDef. Currently, this pass handles mhlo.sharding attribute on function attributes by passing them through TF XlaSharding ops and dropping tf.aliasing_output attribute.\n\nThis will be used for using the old tf2xla bridge for second phase of the compilation.\n\nPiperOrigin-RevId: 361378341\nChange-Id: Id418212e65f5d177bc4bb8c279824ef8bfc2add2"",""distinct"":true,""url"":""https://api.github.com/repos/KabirKwatra/tensorflow/commits/fb7d34de0a7a892d070104aa4e385159817e7ef5""}]",,,,,,,,,,
15435021391,PullRequestEvent,true,2021-03-07 06:43:58.000000 UTC,39814207,pull[bot],190277211,KabirKwatra/tensorflow,,,,,,,,"""closed""",5520,,,,,,,,
15435040897,PullRequestEvent,true,2021-03-07 06:50:49.000000 UTC,39814207,pull[bot],340715557,KaycoinsInc/tensorflow,,,,,,,,"""opened""",37,,,,,,,,
15435043773,PushEvent,true,2021-03-07 06:51:49.000000 UTC,39814207,pull[bot],340715557,KaycoinsInc/tensorflow,"""refs/heads/master""",,,6658625121,1,1,"[{""sha"":""fb7d34de0a7a892d070104aa4e385159817e7ef5"",""author"":{""name"":""Smit Hinsu"",""email"":""0f9dce5f2da36d8473ff9a50fbb0e06a148c5fae@google.com""},""message"":""Add prepare-tpu-computation-for-tf-export pass\n\nThis pass transforms the MLIR module attached to _TpuCompileMlir op to be legal for export to TensorFlow GraphDef. Currently, this pass handles mhlo.sharding attribute on function attributes by passing them through TF XlaSharding ops and dropping tf.aliasing_output attribute.\n\nThis will be used for using the old tf2xla bridge for second phase of the compilation.\n\nPiperOrigin-RevId: 361378341\nChange-Id: Id418212e65f5d177bc4bb8c279824ef8bfc2add2"",""distinct"":true,""url"":""https://api.github.com/repos/KaycoinsInc/tensorflow/commits/fb7d34de0a7a892d070104aa4e385159817e7ef5""}]",,,,,,,,,,
15435043799,PullRequestEvent,true,2021-03-07 06:51:49.000000 UTC,39814207,pull[bot],340715557,KaycoinsInc/tensorflow,,,,,,,,"""closed""",37,,,,,,,,
15435063654,PullRequestEvent,true,2021-03-07 06:58:13.000000 UTC,39814207,pull[bot],30268292,chojar/react,,,,,,,,"""opened""",1568,,,,,,,,
15435064124,PushEvent,true,2021-03-07 06:58:22.000000 UTC,39814207,pull[bot],30268292,chojar/react,"""refs/heads/master""",,,6658637925,2,2,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/chojar/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/chojar/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15435064137,PullRequestEvent,true,2021-03-07 06:58:22.000000 UTC,39814207,pull[bot],30268292,chojar/react,,,,,,,,"""closed""",1568,,,,,,,,
15435012646,PushEvent,true,2021-03-07 06:40:52.000000 UTC,46969984,waynet022,344636038,waynet022/opencv,"""refs/heads/main""",,,6658605447,1,1,"[{""sha"":""96db626c35fe2b9df381a9bdba22fbbf9681d7f3"",""author"":{""name"":""wayne1tam"",""email"":""ef6c2a766a0ca0a5a1a6fa99f2bc213d60df7839@hotmail.com""},""message"":""Create convert to lab function"",""distinct"":true,""url"":""https://api.github.com/repos/waynet022/opencv/commits/96db626c35fe2b9df381a9bdba22fbbf9681d7f3""}]",,,,,,,,,,
15435026313,PushEvent,true,2021-03-07 06:45:43.000000 UTC,46969984,waynet022,344636038,waynet022/opencv,"""refs/heads/main""",,,6658614101,1,1,"[{""sha"":""3c2eac1b0d8d463c4da037b69aab3cb1d98df246"",""author"":{""name"":""wayne1tam"",""email"":""ef6c2a766a0ca0a5a1a6fa99f2bc213d60df7839@hotmail.com""},""message"":""Use matplotlib to display image"",""distinct"":true,""url"":""https://api.github.com/repos/waynet022/opencv/commits/3c2eac1b0d8d463c4da037b69aab3cb1d98df246""}]",,,,,,,,,,
15435039955,PushEvent,true,2021-03-07 06:50:29.000000 UTC,46969984,waynet022,344636038,waynet022/opencv,"""refs/heads/main""",,,6658622670,1,1,"[{""sha"":""1c77f64712992b7c20bed0d7c88204e234db6f84"",""author"":{""name"":""wayne1tam"",""email"":""ef6c2a766a0ca0a5a1a6fa99f2bc213d60df7839@hotmail.com""},""message"":""Convert BGR to RGB image function"",""distinct"":true,""url"":""https://api.github.com/repos/waynet022/opencv/commits/1c77f64712992b7c20bed0d7c88204e234db6f84""}]",,,,,,,,,,
15435065760,PushEvent,true,2021-03-07 06:58:55.000000 UTC,46969984,waynet022,344636038,waynet022/opencv,"""refs/heads/main""",,,6658638959,1,1,"[{""sha"":""b332a95a23f7da64e6282c068afaece9065c8ee6"",""author"":{""name"":""wayne1tam"",""email"":""ef6c2a766a0ca0a5a1a6fa99f2bc213d60df7839@hotmail.com""},""message"":""Convert hsv to bgr function"",""distinct"":true,""url"":""https://api.github.com/repos/waynet022/opencv/commits/b332a95a23f7da64e6282c068afaece9065c8ee6""}]",,,,,,,,,,
15435019401,CreateEvent,true,2021-03-07 06:43:12.000000 UTC,59182850,vladislav-r,345277396,vladislav-r/react,,"""repository""","""user""",,,,,,,,,,,,,,
15435020854,CreateEvent,true,2021-03-07 06:43:46.000000 UTC,59182850,vladislav-r,345277396,vladislav-r/react,"""main""","""branch""","""user""",,,,,,,,,,,,,,
15435002309,PushEvent,true,2021-03-07 06:37:07.000000 UTC,59663022,bic-harness,232630157,bic-harness/terraform,"""refs/heads/master""",,,6658598976,1,1,"[{""sha"":""80b6364ff26102de28c82a640837ca4a8c795874"",""author"":{""name"":""bic-harness"",""email"":""958a8fce0d8c4daa7a8f2b84b587df9162e56ab2@harness.io""},""message"":""ami commit"",""distinct"":true,""url"":""https://api.github.com/repos/bic-harness/terraform/commits/80b6364ff26102de28c82a640837ca4a8c795874""}]",,,,,,,,,,
15435026030,PushEvent,true,2021-03-07 06:45:37.000000 UTC,59663022,bic-harness,232630157,bic-harness/terraform,"""refs/heads/master""",,,6658613933,1,1,"[{""sha"":""31972acc9ce8179818a8da6e26f286c8701e115a"",""author"":{""name"":""bic-harness"",""email"":""958a8fce0d8c4daa7a8f2b84b587df9162e56ab2@harness.io""},""message"":""ami commit."",""distinct"":true,""url"":""https://api.github.com/repos/bic-harness/terraform/commits/31972acc9ce8179818a8da6e26f286c8701e115a""}]",,,,,,,,,,
15434904029,WatchEvent,true,2021-03-07 06:03:22.000000 UTC,67715378,jasbrg,223447339,lilactown/helix,,,,,,,,"""started""",,,,,,,,,
15434969078,PushEvent,true,2021-03-07 06:26:02.000000 UTC,73488828,bchadwic,345014328,bchadwic/react,"""refs/heads/main""",,,6658577467,1,1,"[{""sha"":""481e6f31472d33b8fcc6997f3de8e0a37651325a"",""author"":{""name"":""Ben"",""email"":""cd5368bfa399424535d0f8c9136b4ac62b2838bc@gmail.com""},""message"":""created a separate HelloWorld class"",""distinct"":true,""url"":""https://api.github.com/repos/bchadwic/react/commits/481e6f31472d33b8fcc6997f3de8e0a37651325a""}]",,,,,,,,,,
15434911247,IssueCommentEvent,true,2021-03-07 06:05:47.000000 UTC,8655789,codecov-io,4710920,apache/dubbo,,,,,,,,"""created""",,,,,,,,,
15434978145,PullRequestReviewCommentEvent,true,2021-03-07 06:29:21.000000 UTC,3624098,acdlite,10270250,facebook/react,,,,,,,,"""created""",20890,,,,,,,,
15434978134,PullRequestReviewEvent,true,2021-03-07 06:29:22.000000 UTC,3624098,acdlite,10270250,facebook/react,,,,,,,,"""created""",20890,,,"""commented""","""MEMBER""",,,,
15434983657,IssueCommentEvent,true,2021-03-07 06:31:05.000000 UTC,3624098,acdlite,10270250,facebook/react,,,,,,,,"""created""",,,,,,,,,
15435049446,PushEvent,true,2021-03-07 06:53:36.000000 UTC,3624098,acdlite,10270250,facebook/react,"""refs/heads/master""",,,6658628476,1,1,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/facebook/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""}]",,,,,,,,,,
15435059510,PullRequestEvent,true,2021-03-07 06:56:54.000000 UTC,3624098,acdlite,10270250,facebook/react,,,,,,,,"""closed""",20890,,,,,,,,
15435059789,PushEvent,true,2021-03-07 06:56:59.000000 UTC,3624098,acdlite,10270250,facebook/react,"""refs/heads/master""",,,6658635240,1,1,"[{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/facebook/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15434998556,WatchEvent,true,2021-03-07 06:35:51.000000 UTC,52314129,Treece1969,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15434969095,ForkEvent,true,2021-03-07 06:26:03.000000 UTC,69601605,zero804,10270250,facebook/react,,,,,,,,,,"""zero804/react""",,,,,,,
15435055379,ForkEvent,true,2021-03-07 06:55:33.000000 UTC,78629644,robertriendeaud,10270250,facebook/react,,,,,,,,,,"""robertriendeaud/react""",,,,,,,
15435002832,PullRequestReviewEvent,true,2021-03-07 06:37:19.000000 UTC,78827,jnothman,843222,scikit-learn/scikit-learn,,,,,,,,"""created""",19568,,,"""approved""","""MEMBER""",,,,
15434950890,WatchEvent,true,2021-03-07 06:19:56.000000 UTC,78989698,allysa08,17728164,hashicorp/terraform,,,,,,,,"""started""",,,,,,,,,
15434953064,ForkEvent,true,2021-03-07 06:20:39.000000 UTC,38331992,ketan221997,5108051,opencv/opencv,,,,,,,,,,"""ketan221997/opencv""",,,,,,,
15434934603,WatchEvent,true,2021-03-07 06:14:13.000000 UTC,52613931,STONE-SAMA,5108051,opencv/opencv,,,,,,,,"""started""",,,,,,,,,
15434912350,WatchEvent,true,2021-03-07 06:06:11.000000 UTC,15312466,cr7yash,16072585,phoenixframework/phoenix,,,,,,,,"""started""",,,,,,,,,
15435030515,IssueCommentEvent,true,2021-03-07 06:47:12.000000 UTC,11615393,WindQAQ,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15434942183,IssuesEvent,true,2021-03-07 06:16:52.000000 UTC,18486587,coreqode,45717250,tensorflow/tensorflow,,,,,,,,"""opened""",,,,,,,,,
15434936518,IssueCommentEvent,true,2021-03-07 06:14:54.000000 UTC,25025173,hfahrudin,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15435022280,WatchEvent,true,2021-03-07 06:44:17.000000 UTC,44262826,goartisan,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15435031110,WatchEvent,true,2021-03-07 06:47:25.000000 UTC,44262826,goartisan,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15435045860,ForkEvent,true,2021-03-07 06:52:27.000000 UTC,48629156,frewerins,45717250,tensorflow/tensorflow,,,,,,,,,,"""frewerins/tensorflow""",,,,,,,
15434906713,WatchEvent,true,2021-03-07 06:04:15.000000 UTC,55086905,orpheusui,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15435024800,WatchEvent,true,2021-03-07 06:45:10.000000 UTC,63014515,ankitoscar,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15434958513,PullRequestReviewCommentEvent,true,2021-03-07 06:22:21.000000 UTC,585223,tonistiigi,7691631,moby/moby,,,,,,,,"""created""",42104,,,,,,,,
15434958505,PullRequestReviewEvent,true,2021-03-07 06:22:25.000000 UTC,585223,tonistiigi,7691631,moby/moby,,,,,,,,"""created""",42104,,,"""commented""","""MEMBER""",,,,
15434958508,PullRequestReviewEvent,true,2021-03-07 06:22:26.000000 UTC,585223,tonistiigi,7691631,moby/moby,,,,,,,,"""created""",42104,,,"""commented""","""MEMBER""",,,,
15434894207,PushEvent,true,2021-03-07 06:00:12.000000 UTC,19616653,ArmageddonKnight,204371788,UofT-EcoSystem/tensorflow,"""refs/heads/master""",,,6658529136,1,1,"[{""sha"":""fb7d34de0a7a892d070104aa4e385159817e7ef5"",""author"":{""name"":""Smit Hinsu"",""email"":""0f9dce5f2da36d8473ff9a50fbb0e06a148c5fae@google.com""},""message"":""Add prepare-tpu-computation-for-tf-export pass\n\nThis pass transforms the MLIR module attached to _TpuCompileMlir op to be legal for export to TensorFlow GraphDef. Currently, this pass handles mhlo.sharding attribute on function attributes by passing them through TF XlaSharding ops and dropping tf.aliasing_output attribute.\n\nThis will be used for using the old tf2xla bridge for second phase of the compilation.\n\nPiperOrigin-RevId: 361378341\nChange-Id: Id418212e65f5d177bc4bb8c279824ef8bfc2add2"",""distinct"":true,""url"":""https://api.github.com/repos/UofT-EcoSystem/tensorflow/commits/fb7d34de0a7a892d070104aa4e385159817e7ef5""}]",,,,,,,,,,
15435057352,ForkEvent,true,2021-03-07 06:56:11.000000 UTC,66309635,Aadit017,135786093,typescript-cheatsheets/react,,,,,,,,,,"""Aadit017/react""",,,,,,,
15434983746,WatchEvent,true,2021-03-07 06:31:06.000000 UTC,235847,qbart,248295170,geist-org/react,,,,,,,,"""started""",,,,,,,,,
15439032147,PushEvent,true,2021-03-07 22:38:08.000000 UTC,446130,lhofhansl,344250470,lhofhansl/phoenix,"""refs/heads/6402""",,,6661103989,1,1,"[{""sha"":""efeef9db86c50202baea79466f203068f0f1c9c2"",""author"":{""name"":""Lars"",""email"":""8f86d20c2155d741e73d969ae07b3fbe5d2f8a03@apache.org""},""message"":""PHOENIX-6402 Allow using local indexes with uncovered columns in the WHERE clause."",""distinct"":true,""url"":""https://api.github.com/repos/lhofhansl/phoenix/commits/efeef9db86c50202baea79466f203068f0f1c9c2""}]",,,,,,,,,,
15438898299,PushEvent,true,2021-03-07 22:06:16.000000 UTC,800611,brukshut,130750793,brukshut/terraform,"""refs/heads/feature/route53-module-upgrade""",,,6661022561,1,1,"[{""sha"":""231f9b9a5e31ffce3c6fe604e4af64494f97a0bf"",""author"":{""name"":""Christian Gough"",""email"":""515e74db1436fdbd04b7620ef875022b5e277020@gmail.com""},""message"":""Move statefile location; remove acre.gturn.xyz; change A records to use mail.gturn.xyz."",""distinct"":true,""url"":""https://api.github.com/repos/brukshut/terraform/commits/231f9b9a5e31ffce3c6fe604e4af64494f97a0bf""}]",,,,,,,,,,
15439081189,PushEvent,true,2021-03-07 22:50:07.000000 UTC,1322974,anntzer,26951681,anntzer/scikit-learn,"""refs/heads/delaypkgresources""",,,6661133491,1,1,"[{""sha"":""a62d442d2732c842dcf420be016a1037a318dcdd"",""author"":{""name"":""Antony Lee"",""email"":""fc41e07b601e0cdc30dc245914ea2a55e741902e@gmail.com""},""message"":""Don't import pkg_resources unless we need to parse dev version numbers.\n\npkg_resources can be very slow to import, although this depends on the\ndetails of the python setup.  On my machine, this PR speeds up `import\nsklearn` (with no dev versions of anything other than sklearn installed)\nby ~33%, from ~550ms to ~360ms."",""distinct"":true,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/a62d442d2732c842dcf420be016a1037a318dcdd""}]",,,,,,,,,,
15438933258,PushEvent,true,2021-03-07 22:14:28.000000 UTC,2467434,clayne,263766029,clayne/tensorflow,"""refs/heads/master""",,,6661043645,6,6,"[{""sha"":""fb7d34de0a7a892d070104aa4e385159817e7ef5"",""author"":{""name"":""Smit Hinsu"",""email"":""0f9dce5f2da36d8473ff9a50fbb0e06a148c5fae@google.com""},""message"":""Add prepare-tpu-computation-for-tf-export pass\n\nThis pass transforms the MLIR module attached to _TpuCompileMlir op to be legal for export to TensorFlow GraphDef. Currently, this pass handles mhlo.sharding attribute on function attributes by passing them through TF XlaSharding ops and dropping tf.aliasing_output attribute.\n\nThis will be used for using the old tf2xla bridge for second phase of the compilation.\n\nPiperOrigin-RevId: 361378341\nChange-Id: Id418212e65f5d177bc4bb8c279824ef8bfc2add2"",""distinct"":true,""url"":""https://api.github.com/repos/clayne/tensorflow/commits/fb7d34de0a7a892d070104aa4e385159817e7ef5""},{""sha"":""c8e6a3fb8f9ee595fe292e63449c65a2607a37e1"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Op documentation update.\n\tupdate of g3doc/includes/tf_passes.md\n\nPiperOrigin-RevId: 361390469\nChange-Id: I021164c4d178203466995dc14d99b49f504682dc"",""distinct"":true,""url"":""https://api.github.com/repos/clayne/tensorflow/commits/c8e6a3fb8f9ee595fe292e63449c65a2607a37e1""},{""sha"":""86b2eda252f56be6b357195b3809d8a365987f62"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""compat: Update forward compatibility horizon to 2021-03-07\n\nPiperOrigin-RevId: 361392925\nChange-Id: I588c1d653d3e7ffea3425430b51582f34db4f1a8"",""distinct"":true,""url"":""https://api.github.com/repos/clayne/tensorflow/commits/86b2eda252f56be6b357195b3809d8a365987f62""},{""sha"":""3b95a6316b47b10e877151fbca3d12e49a38fdf5"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Update GraphDef version to 698.\n\nPiperOrigin-RevId: 361392931\nChange-Id: Id814635746941c0666d2cf136f6acc424e7d0e9c"",""distinct"":true,""url"":""https://api.github.com/repos/clayne/tensorflow/commits/3b95a6316b47b10e877151fbca3d12e49a38fdf5""},{""sha"":""6613bf0887142ae7f141bbc00d8cb3d791fdd1a4"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Fix stride mismatch propagation bug across convolutions\n\nPiperOrigin-RevId: 361429642\nChange-Id: I40e18cd9c2ce9750e1949b16f90e7182a682dd0f"",""distinct"":true,""url"":""https://api.github.com/repos/clayne/tensorflow/commits/6613bf0887142ae7f141bbc00d8cb3d791fdd1a4""},{""sha"":""efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7"",""author"":{""name"":""Peter Hawkins"",""email"":""34b19541630131950b5f204f2c5f2c647a3a7475@google.com""},""message"":""[XLA:Python] Split DevicePut out of `jax_jit` and refactor it.\n\n* Creates a new py_values.cc/h file to contain device_put.\n* Moves some of the type helpers into the existing types module.\n* Change `PyClient::BufferFromPyval` to call DevicePut. There's no reason to have two similar but subtly different methods for copying a buffer-like object to a device.\n* Refactor and optimize some of the handler functions. In particular, avoid creating a number of unnecessary intermediate objects.\n\nPiperOrigin-RevId: 361430648\nChange-Id: I56b056eb8f0fde20b2f65170fcbf9530cd97d12b"",""distinct"":true,""url"":""https://api.github.com/repos/clayne/tensorflow/commits/efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7""}]",,,,,,,,,,
15439089071,PushEvent,true,2021-03-07 22:52:04.000000 UTC,2467434,clayne,263766029,clayne/tensorflow,"""refs/heads/master""",,,6661138341,1,1,"[{""sha"":""ef71c3d421c128668177cb134a76f956f266c604"",""author"":{""name"":""TensorFlower Gardener"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Merge pull request #47580 from WindQAQ:optimize-argminmax\n\nPiperOrigin-RevId: 361450743\nChange-Id: I713c36b3d4e3e7490501ead6f9dfe29af00f074a"",""distinct"":true,""url"":""https://api.github.com/repos/clayne/tensorflow/commits/ef71c3d421c128668177cb134a76f956f266c604""}]",,,,,,,,,,
15438938079,CreateEvent,true,2021-03-07 22:15:35.000000 UTC,3019722,AlekLefebvre,345222060,AlekLefebvre/scikit-learn,"""calibrated_classifier_cv_pipeline""","""branch""","""user""",,,,,,,,,,,,,,
15438962887,PushEvent,true,2021-03-07 22:21:20.000000 UTC,3019722,AlekLefebvre,345222060,AlekLefebvre/scikit-learn,"""refs/heads/calibrated_classifier_cv_pipeline""",,,6661061594,3,3,"[{""sha"":""42e90e9ba28fb37c2c9bd3e8aed1ac2387f1d5d5"",""author"":{""name"":""RichardScottOZ"",""email"":""692992d3c21418ff3c357ad9583d54643054d025@users.noreply.github.com""},""message"":""DOC Fixes spelling mistake in _kmeans.py (#19634)\n\nCompatibility typo"",""distinct"":true,""url"":""https://api.github.com/repos/AlekLefebvre/scikit-learn/commits/42e90e9ba28fb37c2c9bd3e8aed1ac2387f1d5d5""},{""sha"":""616db98743ac9f8a49e924fe471ae02027dd07d6"",""author"":{""name"":""Alek Lefebvre"",""email"":""52a07fcac2572e43dd1d13dc005b7612265bc522@mail.mcgill.ca""},""message"":""Merge remote-tracking branch 'upstream/main' into calibrated_classifier_cv_pipeline"",""distinct"":true,""url"":""https://api.github.com/repos/AlekLefebvre/scikit-learn/commits/616db98743ac9f8a49e924fe471ae02027dd07d6""},{""sha"":""3b0792fb09272ada9e03f87c4826f1a64ca2a779"",""author"":{""name"":""Alek Lefebvre"",""email"":""52a07fcac2572e43dd1d13dc005b7612265bc522@mail.mcgill.ca""},""message"":""Fix PEP8 warnings"",""distinct"":true,""url"":""https://api.github.com/repos/AlekLefebvre/scikit-learn/commits/3b0792fb09272ada9e03f87c4826f1a64ca2a779""}]",,,,,,,,,,
15438912633,PushEvent,true,2021-03-07 22:09:39.000000 UTC,5402633,thomasjpfan,135866406,thomasjpfan/scikit-learn,"""refs/heads/fix_upstream_failures""",,,6661031208,1,1,"[{""sha"":""705b9985ef5816999fc879c3d3929b24608142f7"",""author"":{""name"":""Thomas J. Fan"",""email"":""5e8796a332fafc9c261437cd1787ae2709a896a7@gmail.com""},""message"":""ENH Capture all exception for future releases of numpy"",""distinct"":true,""url"":""https://api.github.com/repos/thomasjpfan/scikit-learn/commits/705b9985ef5816999fc879c3d3929b24608142f7""}]",,,,,,,,,,
15439041529,PushEvent,true,2021-03-07 22:40:22.000000 UTC,8010926,carbonscott,326333912,carbonscott/helix,"""refs/heads/main""",,,6661109825,1,1,"[{""sha"":""240bcb4c06f8f6c4af1e9a8ffbed62933e2845b1"",""author"":{""name"":""Cong Wang"",""email"":""49f58f94b7d3ecd78b9053d24b787a65d2386650@gmail.com""},""message"":""Fit rhodopsins and obtain params"",""distinct"":true,""url"":""https://api.github.com/repos/carbonscott/helix/commits/240bcb4c06f8f6c4af1e9a8ffbed62933e2845b1""}]",,,,,,,,,,
15438880303,PushEvent,true,2021-03-07 22:02:10.000000 UTC,10519966,jiankaiwang,225312680,jiankaiwang/tensorflow,"""refs/heads/master""",,,6661011812,7,7,"[{""sha"":""99b1fa6a15a6c82eb5ac2642d93fee810a2c766d"",""author"":{""name"":""Jiri Simsa"",""email"":""b53bfee97ac78a1d2afd0ef6138945f352c1fa9d@google.com""},""message"":""[tf.data] Make error message more informative.\n\nPiperOrigin-RevId: 361352108\nChange-Id: Ib4ffb578da274df1accb615f7fe1c04bd58b321d"",""distinct"":true,""url"":""https://api.github.com/repos/jiankaiwang/tensorflow/commits/99b1fa6a15a6c82eb5ac2642d93fee810a2c766d""},{""sha"":""fb7d34de0a7a892d070104aa4e385159817e7ef5"",""author"":{""name"":""Smit Hinsu"",""email"":""0f9dce5f2da36d8473ff9a50fbb0e06a148c5fae@google.com""},""message"":""Add prepare-tpu-computation-for-tf-export pass\n\nThis pass transforms the MLIR module attached to _TpuCompileMlir op to be legal for export to TensorFlow GraphDef. Currently, this pass handles mhlo.sharding attribute on function attributes by passing them through TF XlaSharding ops and dropping tf.aliasing_output attribute.\n\nThis will be used for using the old tf2xla bridge for second phase of the compilation.\n\nPiperOrigin-RevId: 361378341\nChange-Id: Id418212e65f5d177bc4bb8c279824ef8bfc2add2"",""distinct"":true,""url"":""https://api.github.com/repos/jiankaiwang/tensorflow/commits/fb7d34de0a7a892d070104aa4e385159817e7ef5""},{""sha"":""c8e6a3fb8f9ee595fe292e63449c65a2607a37e1"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Op documentation update.\n\tupdate of g3doc/includes/tf_passes.md\n\nPiperOrigin-RevId: 361390469\nChange-Id: I021164c4d178203466995dc14d99b49f504682dc"",""distinct"":true,""url"":""https://api.github.com/repos/jiankaiwang/tensorflow/commits/c8e6a3fb8f9ee595fe292e63449c65a2607a37e1""},{""sha"":""86b2eda252f56be6b357195b3809d8a365987f62"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""compat: Update forward compatibility horizon to 2021-03-07\n\nPiperOrigin-RevId: 361392925\nChange-Id: I588c1d653d3e7ffea3425430b51582f34db4f1a8"",""distinct"":true,""url"":""https://api.github.com/repos/jiankaiwang/tensorflow/commits/86b2eda252f56be6b357195b3809d8a365987f62""},{""sha"":""3b95a6316b47b10e877151fbca3d12e49a38fdf5"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Update GraphDef version to 698.\n\nPiperOrigin-RevId: 361392931\nChange-Id: Id814635746941c0666d2cf136f6acc424e7d0e9c"",""distinct"":true,""url"":""https://api.github.com/repos/jiankaiwang/tensorflow/commits/3b95a6316b47b10e877151fbca3d12e49a38fdf5""},{""sha"":""6613bf0887142ae7f141bbc00d8cb3d791fdd1a4"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Fix stride mismatch propagation bug across convolutions\n\nPiperOrigin-RevId: 361429642\nChange-Id: I40e18cd9c2ce9750e1949b16f90e7182a682dd0f"",""distinct"":true,""url"":""https://api.github.com/repos/jiankaiwang/tensorflow/commits/6613bf0887142ae7f141bbc00d8cb3d791fdd1a4""},{""sha"":""efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7"",""author"":{""name"":""Peter Hawkins"",""email"":""34b19541630131950b5f204f2c5f2c647a3a7475@google.com""},""message"":""[XLA:Python] Split DevicePut out of `jax_jit` and refactor it.\n\n* Creates a new py_values.cc/h file to contain device_put.\n* Moves some of the type helpers into the existing types module.\n* Change `PyClient::BufferFromPyval` to call DevicePut. There's no reason to have two similar but subtly different methods for copying a buffer-like object to a device.\n* Refactor and optimize some of the handler functions. In particular, avoid creating a number of unnecessary intermediate objects.\n\nPiperOrigin-RevId: 361430648\nChange-Id: I56b056eb8f0fde20b2f65170fcbf9530cd97d12b"",""distinct"":true,""url"":""https://api.github.com/repos/jiankaiwang/tensorflow/commits/efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7""}]",,,,,,,,,,
15438876703,PushEvent,true,2021-03-07 22:01:22.000000 UTC,25825341,kaverakoma,345460864,kaverakoma/react,"""refs/heads/master""",,,6661009676,1,1,"[{""sha"":""9d9869d7ef4c39f8f09a453e2099938511eb9761"",""author"":{""name"":""lucas"",""email"":""e3e16c8adfa4eec8ccef63c37a0cdd005d540aa6@gmail.com""},""message"":""first commit"",""distinct"":true,""url"":""https://api.github.com/repos/kaverakoma/react/commits/9d9869d7ef4c39f8f09a453e2099938511eb9761""}]",,,,,,,,,,
15439067283,PushEvent,true,2021-03-07 22:46:40.000000 UTC,25825341,kaverakoma,345460864,kaverakoma/react,"""refs/heads/master""",,,6661125323,1,1,"[{""sha"":""e7ad7ddf937d660afd9f269c756e4d604a67da1f"",""author"":{""name"":""lucas"",""email"":""e3e16c8adfa4eec8ccef63c37a0cdd005d540aa6@gmail.com""},""message"":""first commit"",""distinct"":true,""url"":""https://api.github.com/repos/kaverakoma/react/commits/e7ad7ddf937d660afd9f269c756e4d604a67da1f""}]",,,,,,,,,,
15438896861,PullRequestEvent,true,2021-03-07 22:05:57.000000 UTC,32247030,baophucct,149918416,baophucct/react,,,,,,,,"""opened""",42,,,,,,,,
15438897517,PushEvent,true,2021-03-07 22:06:06.000000 UTC,32247030,baophucct,149918416,baophucct/react,"""refs/heads/snyk-fix-b1bb7b1acf72160ec974ac2180ed70e9""",,,6661022096,1,1,"[{""sha"":""b51e65df3fe1c74161809617cb351860a5e8048c"",""author"":{""name"":""snyk-bot"",""email"":""6524ae312692b75c8ed05087d0aa3c757ac39348@snyk.io""},""message"":""fix: fixtures/packaging/webpack-alias/dev/package.json & fixtures/packaging/webpack-alias/dev/yarn.lock to reduce vulnerabilities\n\nThe following vulnerabilities are fixed with an upgrade:\n- https://snyk.io/vuln/SNYK-JS-GLOBPARENT-1016905"",""distinct"":true,""url"":""https://api.github.com/repos/baophucct/react/commits/b51e65df3fe1c74161809617cb351860a5e8048c""}]",,,,,,,,,,
15438897524,CreateEvent,true,2021-03-07 22:06:06.000000 UTC,32247030,baophucct,149918416,baophucct/react,"""snyk-fix-b1bb7b1acf72160ec974ac2180ed70e9""","""branch""","""user""",,,,,,,,,,,,,,
15439080424,PullRequestEvent,true,2021-03-07 22:49:56.000000 UTC,35755639,Matthelonianxl,215675087,Matthelonianxl/react,,,,,,,,"""opened""",78,,,,,,,,
15439080937,CreateEvent,true,2021-03-07 22:50:04.000000 UTC,35755639,Matthelonianxl,215675087,Matthelonianxl/react,"""snyk-fix-012cc9d54783b5645999e52ad6d1334a""","""branch""","""user""",,,,,,,,,,,,,,
15439080948,PushEvent,true,2021-03-07 22:50:04.000000 UTC,35755639,Matthelonianxl,215675087,Matthelonianxl/react,"""refs/heads/snyk-fix-012cc9d54783b5645999e52ad6d1334a""",,,6661133330,1,1,"[{""sha"":""0ca63df614f231c73ca6e675dfffd3d75829a2c5"",""author"":{""name"":""snyk-bot"",""email"":""6524ae312692b75c8ed05087d0aa3c757ac39348@snyk.io""},""message"":""fix: fixtures/packaging/webpack/dev/package.json & fixtures/packaging/webpack/dev/yarn.lock to reduce vulnerabilities\n\nThe following vulnerabilities are fixed with an upgrade:\n- https://snyk.io/vuln/SNYK-JS-GLOBPARENT-1016905"",""distinct"":true,""url"":""https://api.github.com/repos/Matthelonianxl/react/commits/0ca63df614f231c73ca6e675dfffd3d75829a2c5""}]",,,,,,,,,,
15438882131,PullRequestEvent,true,2021-03-07 22:02:35.000000 UTC,38502299,brianwu291,220179503,brianwu291/react,,,,,,,,"""opened""",63,,,,,,,,
15438882768,PushEvent,true,2021-03-07 22:02:45.000000 UTC,38502299,brianwu291,220179503,brianwu291/react,"""refs/heads/snyk-fix-158a0900ff8b5192bf95f647916ef91e""",,,6661013265,1,1,"[{""sha"":""1a4579b3a6bd23ac01145979f3736ede983b3676"",""author"":{""name"":""snyk-bot"",""email"":""6524ae312692b75c8ed05087d0aa3c757ac39348@snyk.io""},""message"":""fix: fixtures/packaging/webpack/prod/package.json & fixtures/packaging/webpack/prod/yarn.lock to reduce vulnerabilities\n\nThe following vulnerabilities are fixed with an upgrade:\n- https://snyk.io/vuln/SNYK-JS-GLOBPARENT-1016905"",""distinct"":true,""url"":""https://api.github.com/repos/brianwu291/react/commits/1a4579b3a6bd23ac01145979f3736ede983b3676""}]",,,,,,,,,,
15438882787,CreateEvent,true,2021-03-07 22:02:45.000000 UTC,38502299,brianwu291,220179503,brianwu291/react,"""snyk-fix-158a0900ff8b5192bf95f647916ef91e""","""branch""","""user""",,,,,,,,,,,,,,
15438881129,PushEvent,true,2021-03-07 22:02:22.000000 UTC,39814207,pull[bot],211211919,Mu-L/tensorflow,"""refs/heads/master""",,,6661012287,2,2,"[{""sha"":""6613bf0887142ae7f141bbc00d8cb3d791fdd1a4"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Fix stride mismatch propagation bug across convolutions\n\nPiperOrigin-RevId: 361429642\nChange-Id: I40e18cd9c2ce9750e1949b16f90e7182a682dd0f"",""distinct"":true,""url"":""https://api.github.com/repos/Mu-L/tensorflow/commits/6613bf0887142ae7f141bbc00d8cb3d791fdd1a4""},{""sha"":""efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7"",""author"":{""name"":""Peter Hawkins"",""email"":""34b19541630131950b5f204f2c5f2c647a3a7475@google.com""},""message"":""[XLA:Python] Split DevicePut out of `jax_jit` and refactor it.\n\n* Creates a new py_values.cc/h file to contain device_put.\n* Moves some of the type helpers into the existing types module.\n* Change `PyClient::BufferFromPyval` to call DevicePut. There's no reason to have two similar but subtly different methods for copying a buffer-like object to a device.\n* Refactor and optimize some of the handler functions. In particular, avoid creating a number of unnecessary intermediate objects.\n\nPiperOrigin-RevId: 361430648\nChange-Id: I56b056eb8f0fde20b2f65170fcbf9530cd97d12b"",""distinct"":true,""url"":""https://api.github.com/repos/Mu-L/tensorflow/commits/efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7""}]",,,,,,,,,,
15438881170,PullRequestEvent,true,2021-03-07 22:02:22.000000 UTC,39814207,pull[bot],211211919,Mu-L/tensorflow,,,,,,,,"""closed""",1256,,,,,,,,
15439055575,ForkEvent,true,2021-03-07 22:43:52.000000 UTC,54302680,monkeyMax-SVG,75396575,duxianwei520/react,,,,,,,,,,"""monkeyMax-SVG/react""",,,,,,,
15439031598,CreateEvent,true,2021-03-07 22:37:59.000000 UTC,54328366,clara-am,345469479,clara-am/react,,"""repository""","""user""",,,,,,,,,,,,,,
15439031668,CreateEvent,true,2021-03-07 22:38:00.000000 UTC,54328366,clara-am,345469479,clara-am/react,"""main""","""branch""","""user""",,,,,,,,,,,,,,
15439007336,PullRequestEvent,true,2021-03-07 22:32:02.000000 UTC,56575816,smk579702,215233412,smk579702/react,,,,,,,,"""opened""",67,,,,,,,,
15439008121,PushEvent,true,2021-03-07 22:32:13.000000 UTC,56575816,smk579702,215233412,smk579702/react,"""refs/heads/snyk-fix-4fb8064613444154d18ad6bcce3102d3""",,,6661089367,1,1,"[{""sha"":""f9590b9d5eca88fc237e7faafca756d5d89c6f9f"",""author"":{""name"":""snyk-bot"",""email"":""6524ae312692b75c8ed05087d0aa3c757ac39348@snyk.io""},""message"":""fix: fixtures/packaging/webpack/prod/package.json & fixtures/packaging/webpack/prod/yarn.lock to reduce vulnerabilities\n\nThe following vulnerabilities are fixed with an upgrade:\n- https://snyk.io/vuln/SNYK-JS-GLOBPARENT-1016905"",""distinct"":true,""url"":""https://api.github.com/repos/smk579702/react/commits/f9590b9d5eca88fc237e7faafca756d5d89c6f9f""}]",,,,,,,,,,
15439008135,CreateEvent,true,2021-03-07 22:32:13.000000 UTC,56575816,smk579702,215233412,smk579702/react,"""snyk-fix-4fb8064613444154d18ad6bcce3102d3""","""branch""","""user""",,,,,,,,,,,,,,
15438896430,CreateEvent,true,2021-03-07 22:05:52.000000 UTC,69986783,R00T-17,345463861,R00T-17/phoenix,,"""repository""","""user""",,,,,,,,,,,,,,
15438906261,CreateEvent,true,2021-03-07 22:08:08.000000 UTC,71530150,EmilioHND,345464267,EmilioHND/react,,"""repository""","""user""",,,,,,,,,,,,,,
15439034887,IssueCommentEvent,true,2021-03-07 22:38:49.000000 UTC,446130,lhofhansl,20473418,apache/phoenix,,,,,,,,"""created""",,,,,,,,,
15439101527,WatchEvent,true,2021-03-07 22:55:12.000000 UTC,75542537,pupu615,4710920,apache/dubbo,,,,,,,,"""started""",,,,,,,,,
15439036661,PullRequestReviewCommentEvent,true,2021-03-07 22:39:15.000000 UTC,2440089,rickhanlonii,10270250,facebook/react,,,,,,,,"""created""",20890,,,,,,,,
15439036657,PullRequestReviewEvent,true,2021-03-07 22:39:16.000000 UTC,2440089,rickhanlonii,10270250,facebook/react,,,,,,,,"""created""",20890,,,"""commented""","""MEMBER""",,,,
15439086704,PullRequestReviewEvent,true,2021-03-07 22:51:27.000000 UTC,2440089,rickhanlonii,10270250,facebook/react,,,,,,,,"""created""",20890,,,"""commented""","""MEMBER""",,,,
15439086708,PullRequestReviewCommentEvent,true,2021-03-07 22:51:27.000000 UTC,2440089,rickhanlonii,10270250,facebook/react,,,,,,,,"""created""",20890,,,,,,,,
15438886240,WatchEvent,true,2021-03-07 22:03:32.000000 UTC,4390722,mhgeay,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15439020101,ForkEvent,true,2021-03-07 22:35:10.000000 UTC,23221094,charradighassen,10270250,facebook/react,,,,,,,,,,"""charradighassen/react""",,,,,,,
15439080855,PullRequestReviewEvent,true,2021-03-07 22:50:02.000000 UTC,1322974,anntzer,843222,scikit-learn/scikit-learn,,,,,,,,"""created""",19102,,,"""commented""","""CONTRIBUTOR""",,,,
15439080863,PullRequestReviewCommentEvent,true,2021-03-07 22:50:02.000000 UTC,1322974,anntzer,843222,scikit-learn/scikit-learn,,,,,,,,"""created""",19102,,,,,,,,
15439085025,IssueCommentEvent,true,2021-03-07 22:51:03.000000 UTC,1322974,anntzer,843222,scikit-learn/scikit-learn,,,,,,,,"""created""",,,,,,,,,
15438982474,PullRequestEvent,true,2021-03-07 22:25:59.000000 UTC,3019722,AlekLefebvre,843222,scikit-learn/scikit-learn,,,,,,,,"""opened""",19641,,,,,,,,
15439038218,PullRequestReviewCommentEvent,true,2021-03-07 22:39:37.000000 UTC,3019722,AlekLefebvre,843222,scikit-learn/scikit-learn,,,,,,,,"""created""",19641,,,,,,,,
15439038216,PullRequestReviewEvent,true,2021-03-07 22:39:38.000000 UTC,3019722,AlekLefebvre,843222,scikit-learn/scikit-learn,,,,,,,,"""created""",19641,,,"""commented""","""NONE""",,,,
15438931482,WatchEvent,true,2021-03-07 22:14:03.000000 UTC,4589309,PopTudor,843222,scikit-learn/scikit-learn,,,,,,,,"""started""",,,,,,,,,
15439019445,PullRequestReviewCommentEvent,true,2021-03-07 22:29:52.000000 UTC,5402633,thomasjpfan,843222,scikit-learn/scikit-learn,,,,,,,,"""created""",19641,,,,,,,,
15439019437,PullRequestReviewCommentEvent,true,2021-03-07 22:32:25.000000 UTC,5402633,thomasjpfan,843222,scikit-learn/scikit-learn,,,,,,,,"""created""",19641,,,,,,,,
15439019438,PullRequestReviewCommentEvent,true,2021-03-07 22:32:41.000000 UTC,5402633,thomasjpfan,843222,scikit-learn/scikit-learn,,,,,,,,"""created""",19641,,,,,,,,
15439019459,PullRequestReviewCommentEvent,true,2021-03-07 22:34:33.000000 UTC,5402633,thomasjpfan,843222,scikit-learn/scikit-learn,,,,,,,,"""created""",19641,,,,,,,,
15439019423,PullRequestReviewEvent,true,2021-03-07 22:35:01.000000 UTC,5402633,thomasjpfan,843222,scikit-learn/scikit-learn,,,,,,,,"""created""",19641,,,"""commented""","""MEMBER""",,,,
15439019429,PullRequestReviewEvent,true,2021-03-07 22:35:01.000000 UTC,5402633,thomasjpfan,843222,scikit-learn/scikit-learn,,,,,,,,"""created""",19641,,,"""commented""","""MEMBER""",,,,
15439021254,PullRequestEvent,true,2021-03-07 22:35:27.000000 UTC,42901664,alalalau,843222,scikit-learn/scikit-learn,,,,,,,,"""opened""",19642,,,,,,,,
15439025545,PullRequestEvent,true,2021-03-07 22:36:32.000000 UTC,42901664,alalalau,843222,scikit-learn/scikit-learn,,,,,,,,"""closed""",19642,,,,,,,,
15439050964,WatchEvent,true,2021-03-07 22:42:41.000000 UTC,74257383,Attangoto,843222,scikit-learn/scikit-learn,,,,,,,,"""started""",,,,,,,,,
15439078415,WatchEvent,true,2021-03-07 22:49:26.000000 UTC,34309592,houssemFat-DDF,16072585,phoenixframework/phoenix,,,,,,,,"""started""",,,,,,,,,
15438905082,IssuesEvent,true,2021-03-07 22:07:51.000000 UTC,765202,max0x7ba,45717250,tensorflow/tensorflow,,,,,,,,"""opened""",,,,,,,,,
15439032982,IssueCommentEvent,true,2021-03-07 22:38:20.000000 UTC,64355,williamh,7691631,moby/moby,,,,,,,,"""created""",,,,,,,,,
15437122402,PushEvent,true,2021-03-07 15:34:38.000000 UTC,117260,seanm,68208469,seanm/opencv,"""refs/heads/master""",,,6659919028,134,134,"[{""sha"":""c909693d45423b12346b6ca590b5dcbb21ae28d3"",""author"":{""name"":""Qoo"",""email"":""b1b65d0e7113fb252e386f6db15af3ac491d692a@gmail.com""},""message"":""refine"",""distinct"":true,""url"":""https://api.github.com/repos/seanm/opencv/commits/c909693d45423b12346b6ca590b5dcbb21ae28d3""},{""sha"":""cceec841397cf7c5c111350b0feb3e693ca41c5f"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19520 from WeiChungChang:refine"",""distinct"":true,""url"":""https://api.github.com/repos/seanm/opencv/commits/cceec841397cf7c5c111350b0feb3e693ca41c5f""},{""sha"":""d2d6eba16a8ff2057384abd2c0ff70ac6862513a"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""cmake: fix add_apple_compiler_options() calls and OBJCXX handling"",""distinct"":true,""url"":""https://api.github.com/repos/seanm/opencv/commits/d2d6eba16a8ff2057384abd2c0ff70ac6862513a""},{""sha"":""743099f9f9603e6b06b236c64a06011861907a2a"",""author"":{""name"":""Zhuo Zhang"",""email"":""d5ff5bb341b51a1a17821fcad1f1044f5f4a378e@foxmail.com""},""message"":""Merge pull request #19521 from zchrissirhcz:3.4-fix-core-module-android-arm64-build\n\n* fix core module android arm64 build\r\n\r\n* fix core module android build when neon is off\r\n\r\nWhen building for Android ARM platform, cmake with\r\n`-D CV_DISABLE_OPTIMIZATION=ON`, the expected behavior is\r\nnot using ARM NEON, using naive computation instead.\r\n\r\nThis commit fix the un-expected compile error for neon intrinsincs."",""distinct"":true,""url"":""https://api.github.com/repos/seanm/opencv/commits/743099f9f9603e6b06b236c64a06011861907a2a""},{""sha"":""a5a421a9f16763731255d9cd0d41b6d33db17f6d"",""author"":{""name"":""Zhuo Zhang"",""email"":""d5ff5bb341b51a1a17821fcad1f1044f5f4a378e@foxmail.com""},""message"":""Merge pull request #19522 from zchrissirhcz:3.4-fix-android-find-zlib-shared-since-ndk19\n\n* fix find zlib.so instead of zlib.a when NDK >= 19\r\n\r\nOn Android platform, `libopencv_imgcodecs.a` is built, expected to\r\ndepend on `libz.so`. However, since Android NDK r19, NDK's `libz.a`\r\nis found instead of `libz.so`, leading to link error\r\n(not found libz.a) on machines without same NDK version & direcotry.\r\n\r\nSince Android NDK-r19, toolchain pieces are installed to\r\n`$NDK/toolchains/llvm/prebuilt/<host-tag>/...`, including `libz.so`.\r\nAlso installed to old paths (`<NDK>/platforms` and `<NDK>/sysroot`)\r\nin NDK r19, r20, r21, but since NDK 22, old paths are removed.\r\n\r\n- https://github.com/android/ndk/wiki/Changelog-r19\r\n- https://github.com/android/ndk/wiki/Changelog-r22\r\n\r\nWith this commit, `libz.so` can be correctly found in NDK<19 and NDK>=19.\r\n\r\n`ZLIB_LIBRARIES` is also simplified as `z`, by appending match (regex)\r\npatterns for new toolchain installation directory's libz.so's paths.\r\n\r\n* simplify libz.so match pattern for abbreviation"",""distinct"":true,""url"":""https://api.github.com/repos/seanm/opencv/commits/a5a421a9f16763731255d9cd0d41b6d33db17f6d""},{""sha"":""5d1540f4fc1ba1736cb248561ad1915abdef7246"",""author"":{""name"":""Tomoaki Teshima"",""email"":""98aabe0b08f6ce484961ae6ed55bc0541c4c2091@gmail.com""},""message"":""remove danger race condition"",""distinct"":true,""url"":""https://api.github.com/repos/seanm/opencv/commits/5d1540f4fc1ba1736cb248561ad1915abdef7246""},{""sha"":""cbb230fdfc0223a33cf2629963fe0253b91ca3eb"",""author"":{""name"":""amir.tulegenov"",""email"":""25001aa9d6f1a3243526af48c9f349075fe82815@xperience.ai""},""message"":""fix getDefaultName()"",""distinct"":true,""url"":""https://api.github.com/repos/seanm/opencv/commits/cbb230fdfc0223a33cf2629963fe0253b91ca3eb""},{""sha"":""76cc034df2cd1e98a8353217a6f386a395501b5b"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19519 from alalek:issue_19485"",""distinct"":true,""url"":""https://api.github.com/repos/seanm/opencv/commits/76cc034df2cd1e98a8353217a6f386a395501b5b""},{""sha"":""5a06d679cfcb999e566cbb34e1a0bd9255ca5599"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19532 from amirtu:OCV-166_getDefaultName_overload"",""distinct"":true,""url"":""https://api.github.com/repos/seanm/opencv/commits/5a06d679cfcb999e566cbb34e1a0bd9255ca5599""},{""sha"":""f0445295bd4414a548462d7aed735985c12415b1"",""author"":{""name"":""Dan Ben-Yosef"",""email"":""ea4c825ba4b366e28cc98b8221918d50819bef4d@gmail.com""},""message"":""Merge pull request #19525 from danbey:Fix-cppcheck-error-in-carotete-lib\n\n* Reduce if statement as it has the same expression on both sides of '&&'\r\n\r\nIf statement has the same expression on both sides so this can be reduce\r\n\r\nSigned-off-by: Dan Ben Yosef <danbey@gmail.com>\r\n\r\n* The if statement is to check width and height"",""distinct"":true,""url"":""https://api.github.com/repos/seanm/opencv/commits/f0445295bd4414a548462d7aed735985c12415b1""},{""sha"":""bc8727786b9ed0ca05a63a8f27d108ccf76acdff"",""author"":{""name"":""Qoo"",""email"":""b1b65d0e7113fb252e386f6db15af3ac491d692a@gmail.com""},""message"":""save allocation of memory for fake image"",""distinct"":true,""url"":""https://api.github.com/repos/seanm/opencv/commits/bc8727786b9ed0ca05a63a8f27d108ccf76acdff""},{""sha"":""6d3502833f85f0ea97817942498fe662abdf7175"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""core: include version.hpp in cvdef.h, fix precomp.hpp usage"",""distinct"":true,""url"":""https://api.github.com/repos/seanm/opencv/commits/6d3502833f85f0ea97817942498fe662abdf7175""},{""sha"":""0885a79c28a8a69be844f0cfc6bdd17a8d133fbe"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""imgcodecs(test): don't include png.h"",""distinct"":true,""url"":""https://api.github.com/repos/seanm/opencv/commits/0885a79c28a8a69be844f0cfc6bdd17a8d133fbe""},{""sha"":""5b16b190c1d62f74a393d858bf019d3af0135ba1"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19543 from alalek:hotfix_19439"",""distinct"":true,""url"":""https://api.github.com/repos/seanm/opencv/commits/5b16b190c1d62f74a393d858bf019d3af0135ba1""},{""sha"":""0a7a54f312d86640fa296a03653059916da77c2e"",""author"":{""name"":""Matt Alvarado"",""email"":""a7c6c3d05ed77c891e6aabda1e25e0276706810c@carnegierobotics.com""},""message"":""Merge pull request #19498 from mattalvarado:fix_findcirclesgrid\n\n* Properly handle empty centers in findCirclesGrid\r\n\r\n* Address alalek comments. Add unit test to validate bugfix\r\n\r\n* fix build warnings, remove unrelated comment"",""distinct"":true,""url"":""https://api.github.com/repos/seanm/opencv/commits/0a7a54f312d86640fa296a03653059916da77c2e""},{""sha"":""f76ba285c9362f4a5efb6dcf4ca11028ab03891e"",""author"":{""name"":""Nicola Landolfi"",""email"":""cfdf59d5d8dede9fba6ec215ca1e82f9042a5ac9@gmail.com""},""message"":""Fix single-word typo"",""distinct"":true,""url"":""https://api.github.com/repos/seanm/opencv/commits/f76ba285c9362f4a5efb6dcf4ca11028ab03891e""},{""sha"":""29f55810cfe03d6fa66c6a6fa12f87d275f00b69"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19550 from Nico769:patch-1"",""distinct"":true,""url"":""https://api.github.com/repos/seanm/opencv/commits/29f55810cfe03d6fa66c6a6fa12f87d275f00b69""},{""sha"":""601851cc7e3f82236734d2a2ceaa420bea7faeee"",""author"":{""name"":""Aryansh Omray"",""email"":""1162d896d167548adae862f72d37b28fcbb042dd@outlook.com""},""message"":""TanH darknet and test"",""distinct"":true,""url"":""https://api.github.com/repos/seanm/opencv/commits/601851cc7e3f82236734d2a2ceaa420bea7faeee""},{""sha"":""8d21c84e7df38f4f8c30a425f254f1bba7bb4b03"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19474 from aryanshomray:darknet_tanh"",""distinct"":true,""url"":""https://api.github.com/repos/seanm/opencv/commits/8d21c84e7df38f4f8c30a425f254f1bba7bb4b03""},{""sha"":""eb901866147707d12a90479b489bd26667e4c3c4"",""author"":{""name"":""Anastasia M"",""email"":""8bc365a45af96f6305a79f5acc72147e62a77709@xperience.ai""},""message"":""Merge pull request #19417 from LupusSanctus:am/text_graph_identity\n\n* Corrected SSD text graph generation for Identity nodes\r\n\r\n* Added minor code corrections"",""distinct"":true,""url"":""https://api.github.com/repos/seanm/opencv/commits/eb901866147707d12a90479b489bd26667e4c3c4""}]",,,,,,,,,,
15437218740,PushEvent,true,2021-03-07 15:55:24.000000 UTC,4981219,alalek,337084139,danbey/opencv,"""refs/heads/setting_stereoBMImpl_in_init_list""",,,6659979344,20,7,"[{""sha"":""cc22a73d0fb88925617245bd03ed71b9bf358e9c"",""author"":{""name"":""Rachel A"",""email"":""64266c24f0eb35574b62f76a6ea688c33967d3e9@gmail.com""},""message"":""EXR alpha support for 4 channel reading and writing.  Issue https://github.com/opencv/opencv/issues/16115."",""distinct"":false,""url"":""https://api.github.com/repos/danbey/opencv/commits/cc22a73d0fb88925617245bd03ed71b9bf358e9c""},{""sha"":""cbfd38bd41e91433b7a23348ae65d3adff2bc20b"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""core: rework code locality\n\n- to reduce binaries size of FFmpeg Windows wrapper\n- MinGW linker doesn't support -ffunction-sections (used for FFmpeg Windows wrapper)\n- move code to improve locality with its used dependencies\n- move UMat::dot() to matmul.dispatch.cpp (Mat::dot() is already there)\n- move UMat::inv() to lapack.cpp\n- move UMat::mul() to arithm.cpp\n- move UMat:eye() to matrix_operations.cpp (near setIdentity() implementation)\n- move normalize(): convert_scale.cpp => norm.cpp\n- move convertAndUnrollScalar(): arithm.cpp => copy.cpp\n- move scalarToRawData(): array.cpp => copy.cpp\n- move transpose(): matrix_operations.cpp => matrix_transform.cpp\n- move flip(), rotate(): copy.cpp => matrix_transform.cpp (rotate90 uses flip and transpose)\n- add 'OPENCV_CORE_EXCLUDE_C_API' CMake variable to exclude compilation of C-API functions from the core module\n- matrix_wrap.cpp: add compile-time checks for CUDA/OpenGL calls\n- the steps above allow to reduce FFmpeg wrapper size for ~1.5Mb (initial size of OpenCV part is about 3Mb)\n\nbackport is done to improve merge experience (less conflicts)\nbackport of commit: 65eb9467567598c08049bb190a4f3d3cbfabdcd0"",""distinct"":false,""url"":""https://api.github.com/repos/danbey/opencv/commits/cbfd38bd41e91433b7a23348ae65d3adff2bc20b""},{""sha"":""75ad74c893a02728821d8432fe73e89e35f49ec0"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""ffmpeg/3.4: update FFmpeg wrapper 2021.03\n\n- FFmpeg 3.4.8"",""distinct"":false,""url"":""https://api.github.com/repos/danbey/opencv/commits/75ad74c893a02728821d8432fe73e89e35f49ec0""},{""sha"":""0689c70dba067e1539a7ed97d93ab4ddb3141f28"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19665 from alalek:update_ffmpeg_3.4"",""distinct"":false,""url"":""https://api.github.com/repos/danbey/opencv/commits/0689c70dba067e1539a7ed97d93ab4ddb3141f28""},{""sha"":""a42d4da003357751a3579bef1568dcbf803f8bb7"",""author"":{""name"":""SamFC10"",""email"":""698de89357824e9e1a6b901f367c9eb7db76d8bf@gmail.com""},""message"":""Added Spatial Attention Module in Darknet Importer"",""distinct"":false,""url"":""https://api.github.com/repos/danbey/opencv/commits/a42d4da003357751a3579bef1568dcbf803f8bb7""},{""sha"":""a0008de281eeeb1d933deb47fc3f3580698af583"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19607 from alalek:backport_19606"",""distinct"":false,""url"":""https://api.github.com/repos/danbey/opencv/commits/a0008de281eeeb1d933deb47fc3f3580698af583""},{""sha"":""94533e12ebd6e131723a53e2d31e97986fea6e5b"",""author"":{""name"":""Liubov Batanina"",""email"":""e31e9421dee8ae251952f0c15777e23a2fd06308@yandex.ru""},""message"":""Determine layout"",""distinct"":false,""url"":""https://api.github.com/repos/danbey/opencv/commits/94533e12ebd6e131723a53e2d31e97986fea6e5b""},{""sha"":""2a808aeec0fd8f59693a14ce928f7e7f6faf994e"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19674 from l-bat:lb/fix_ie_tests"",""distinct"":false,""url"":""https://api.github.com/repos/danbey/opencv/commits/2a808aeec0fd8f59693a14ce928f7e7f6faf994e""},{""sha"":""125cc79c179f364eeecda72b24e6bb2da2f1bd1e"",""author"":{""name"":""APrigarina"",""email"":""abf344ab534beba5b17e17161e13390076563c5e@gmail.com""},""message"":""fix false positive detection"",""distinct"":false,""url"":""https://api.github.com/repos/danbey/opencv/commits/125cc79c179f364eeecda72b24e6bb2da2f1bd1e""},{""sha"":""7894cd3c73df5b90139c54c664225b913c5f049c"",""author"":{""name"":""Anastasia Murzova"",""email"":""8bc365a45af96f6305a79f5acc72147e62a77709@xperience.ai""},""message"":""Aligned TF Reshape layer behaviour"",""distinct"":true,""url"":""https://api.github.com/repos/danbey/opencv/commits/7894cd3c73df5b90139c54c664225b913c5f049c""},{""sha"":""f821530eb020322b203326fd632ff0b3dbe6663d"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19677 from APrigarina:detection_fix"",""distinct"":false,""url"":""https://api.github.com/repos/danbey/opencv/commits/f821530eb020322b203326fd632ff0b3dbe6663d""},{""sha"":""625d4fc8843435a505adeec752d5f17e1c153cef"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""cmake: update Python linters handling\n\n- exclude from getBuildInformation()\n- fix pylint version"",""distinct"":true,""url"":""https://api.github.com/repos/danbey/opencv/commits/625d4fc8843435a505adeec752d5f17e1c153cef""},{""sha"":""a1e2c4f338cb295813bd7081acb170195d359340"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19655 from raaldrid:EXR_rw_alpha_support_16115"",""distinct"":false,""url"":""https://api.github.com/repos/danbey/opencv/commits/a1e2c4f338cb295813bd7081acb170195d359340""},{""sha"":""640f188ca269c7cc7134c70725789e556a7a9733"",""author"":{""name"":""Mradul Agrawal"",""email"":""01a8833d44168c9f10b70fd514a30c995d450d2b@users.noreply.github.com""},""message"":""Merge pull request #19583 from theroyalpekka:patch-1\n\n* Update polynom_solver.cpp\r\n\r\nThis pull request is in the response to Issue  #19526. I have fixed the problem with the cube root calculation of 2*R. The Issue was in the usage of pow function with negative values of R, but if it is calculated for only positive values of R then changing x0 according to the parity of R, the Issue is resolved. Kindly consider it, Thanks!\r\n\r\n* add cv::cubeRoot(double)\r\n\r\nCo-authored-by: Alexander Alekhin <alexander.a.alekhin@gmail.com>"",""distinct"":false,""url"":""https://api.github.com/repos/danbey/opencv/commits/640f188ca269c7cc7134c70725789e556a7a9733""},{""sha"":""358878caf7563d2e02f21ea68da9fe9c2633c8bd"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19671 from SamFC10:sam-darknet"",""distinct"":false,""url"":""https://api.github.com/repos/danbey/opencv/commits/358878caf7563d2e02f21ea68da9fe9c2633c8bd""},{""sha"":""d2cc63e7791c38424b9a625f7fb773baaa65662a"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19680 from alalek:cmake_update_python_linters"",""distinct"":true,""url"":""https://api.github.com/repos/danbey/opencv/commits/d2cc63e7791c38424b9a625f7fb773baaa65662a""},{""sha"":""dc24663e8da94b9d4a76ee4af05dfd39929d91fa"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19641 from LupusSanctus:am/tf_reshape"",""distinct"":true,""url"":""https://api.github.com/repos/danbey/opencv/commits/dc24663e8da94b9d4a76ee4af05dfd39929d91fa""},{""sha"":""04a9ff88d80fd2757b0545e7420884a4394394af"",""author"":{""name"":""Vitaly Tuzov"",""email"":""c906dfd627a0bfac42039000d8b1f1350c86c6a1@intel.com""},""message"":""Merge pull request #19622 from terfendail:ref_doc\n\n* Updated cpp reference implementations for a few intrinsics to address wide universal intrinsics as well\r\n\r\n* Updated cpp reference implementations for a few more universal intrinsics"",""distinct"":true,""url"":""https://api.github.com/repos/danbey/opencv/commits/04a9ff88d80fd2757b0545e7420884a4394394af""},{""sha"":""0d9d40c2564aaafe5e6096805a97a0278de605ce"",""author"":{""name"":""Dan Ben Yosef"",""email"":""ea4c825ba4b366e28cc98b8221918d50819bef4d@gmail.com""},""message"":""Init StereoBMImpl in initialization list\n\nTo improve preformence it is better to init the params (StereoBMImpl) in the\ninitialization list."",""distinct"":true,""url"":""https://api.github.com/repos/danbey/opencv/commits/0d9d40c2564aaafe5e6096805a97a0278de605ce""},{""sha"":""d1cb4667d1d5acbd430f805116a2a666a98d83a4"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""coding style"",""distinct"":true,""url"":""https://api.github.com/repos/danbey/opencv/commits/d1cb4667d1d5acbd430f805116a2a666a98d83a4""}]",,,,,,,,,,
15437114221,PushEvent,true,2021-03-07 15:32:51.000000 UTC,5200066,atermolaev,249936789,atermolaev/react,"""refs/heads/master""",,,6659913853,1,1,"[{""sha"":""87656e7b84b0443a56736d8a0ae418dd9d8cd0b4"",""author"":{""name"":""Anton"",""email"":""a1017afcdd40ed7f78c8586d8322d9415c681922@mail.ru""},""message"":""Наладил сетку для основных элементов. Поправил стили"",""distinct"":true,""url"":""https://api.github.com/repos/atermolaev/react/commits/87656e7b84b0443a56736d8a0ae418dd9d8cd0b4""}]",,,,,,,,,,
15437127353,PushEvent,true,2021-03-07 15:35:44.000000 UTC,5200066,atermolaev,249936789,atermolaev/react,"""refs/heads/master""",,,6659922141,1,1,"[{""sha"":""442b0a172e96aa3677771252fcbd0376bfa617ee"",""author"":{""name"":""Anton"",""email"":""a1017afcdd40ed7f78c8586d8322d9415c681922@mail.ru""},""message"":""Убрал лишние теги"",""distinct"":true,""url"":""https://api.github.com/repos/atermolaev/react/commits/442b0a172e96aa3677771252fcbd0376bfa617ee""}]",,,,,,,,,,
15437027253,PushEvent,true,2021-03-07 15:14:11.000000 UTC,30507318,vvsterlikov,345117413,vvsterlikov/react,"""refs/heads/my-app""",,,6659859152,1,1,"[{""sha"":""01733378c8e81912f0945495f2b16cb7ef780307"",""author"":{""name"":""VSTERLIKOV"",""email"":""b3dc88bfceaadfb2bd7bbb423ff5fb8bbce84aeb@gmail.com""},""message"":""before winner"",""distinct"":true,""url"":""https://api.github.com/repos/vvsterlikov/react/commits/01733378c8e81912f0945495f2b16cb7ef780307""}]",,,,,,,,,,
15437164417,CreateEvent,true,2021-03-07 15:43:49.000000 UTC,35373005,Jasonhls,345385397,Jasonhls/dubbo,,"""repository""","""user""",,,,,,,,,,,,,,
15437120641,PushEvent,true,2021-03-07 15:34:14.000000 UTC,35373005,Jasonhls,345278613,Jasonhls/dubbo,"""refs/heads/3.0""",,,6659917895,3,3,"[{""sha"":""e0cba81952bc96cb0994552cd0cfc8e50296fca9"",""author"":{""name"":""xiaoheng1"",""email"":""6350aee017b26f4750917972de057d2f54c2e260@qq.com""},""message"":""Solve local exposure, the server opens the token, and the client call fails. (#7337)"",""distinct"":true,""url"":""https://api.github.com/repos/Jasonhls/dubbo/commits/e0cba81952bc96cb0994552cd0cfc8e50296fca9""},{""sha"":""c9d326022b5016fe39945b7d9e4cd46517d4b30e"",""author"":{""name"":""xiaoheng1"",""email"":""6350aee017b26f4750917972de057d2f54c2e260@qq.com""},""message"":""Solve local exposure, the server opens the token, and the client call fails. (#7337)"",""distinct"":true,""url"":""https://api.github.com/repos/Jasonhls/dubbo/commits/c9d326022b5016fe39945b7d9e4cd46517d4b30e""},{""sha"":""d63ae60b3ed6b62ee8c7d39ccf1e18709f20c12f"",""author"":{""name"":""Jasonhls"",""email"":""e36ed96f024275c8dbb37657be4b22c018145a21@qq.com""},""message"":""Merge branch '3.0' of github.com:apache/dubbo into 3.0"",""distinct"":true,""url"":""https://api.github.com/repos/Jasonhls/dubbo/commits/d63ae60b3ed6b62ee8c7d39ccf1e18709f20c12f""}]",,,,,,,,,,
15437094371,WatchEvent,true,2021-03-07 15:28:41.000000 UTC,61941432,tomkju,175259525,zenogantner/scikit-learn,,,,,,,,"""started""",,,,,,,,,
15437187935,CreateEvent,true,2021-03-07 15:48:50.000000 UTC,71530150,EmilioHND,345386493,EmilioHND/react,,"""repository""","""user""",,,,,,,,,,,,,,
15437068184,PushEvent,true,2021-03-07 15:22:57.000000 UTC,75043201,RobertBukowiecki,341632244,RobertBukowiecki/react,"""refs/heads/main""",,,6659884751,1,1,"[{""sha"":""ff1248e36d565ad0453a6f12ecc9e4dcf9fddcd3"",""author"":{""name"":""Robert Bukowiecki"",""email"":""29e00c6d30786131acbff724a757bdf05a5cab87@gmail.com""},""message"":""http"",""distinct"":true,""url"":""https://api.github.com/repos/RobertBukowiecki/react/commits/ff1248e36d565ad0453a6f12ecc9e4dcf9fddcd3""}]",,,,,,,,,,
15437172056,PushEvent,true,2021-03-07 15:45:28.000000 UTC,75043201,RobertBukowiecki,341632244,RobertBukowiecki/react,"""refs/heads/main""",,,6659950333,1,1,"[{""sha"":""6fda0c400eff651d7361f355ad0f3dd0defa0d4e"",""author"":{""name"":""Robert Bukowiecki"",""email"":""29e00c6d30786131acbff724a757bdf05a5cab87@gmail.com""},""message"":""heroku fix?"",""distinct"":true,""url"":""https://api.github.com/repos/RobertBukowiecki/react/commits/6fda0c400eff651d7361f355ad0f3dd0defa0d4e""}]",,,,,,,,,,
15437145279,PushEvent,true,2021-03-07 15:39:38.000000 UTC,75043201,RobertBukowiecki,341632244,RobertBukowiecki/react,"""refs/heads/main""",,,6659933387,1,1,"[{""sha"":""ea8e0e23ce9e083dbcf370486e7e0aa057839607"",""author"":{""name"":""Robert Bukowiecki"",""email"":""29e00c6d30786131acbff724a757bdf05a5cab87@gmail.com""},""message"":""heroku deploy"",""distinct"":true,""url"":""https://api.github.com/repos/RobertBukowiecki/react/commits/ea8e0e23ce9e083dbcf370486e7e0aa057839607""}]",,,,,,,,,,
15437009357,CreateEvent,true,2021-03-07 15:10:14.000000 UTC,75692807,Shoxrux710,345375038,Shoxrux710/react,"""gh-pages""","""branch""","""user""",,,,,,,,,,,,,,
15436963428,CreateEvent,true,2021-03-07 15:00:25.000000 UTC,75692807,Shoxrux710,345375038,Shoxrux710/react,,"""repository""","""user""",,,,,,,,,,,,,,
15437053105,WatchEvent,true,2021-03-07 15:19:40.000000 UTC,13462706,LuoYuWuSheng,4710920,apache/dubbo,,,,,,,,"""started""",,,,,,,,,
15436995311,WatchEvent,true,2021-03-07 15:07:09.000000 UTC,51042269,asiashaowei,4710920,apache/dubbo,,,,,,,,"""started""",,,,,,,,,
15436979388,WatchEvent,true,2021-03-07 15:03:45.000000 UTC,30567996,mehmeTuna,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15436992945,WatchEvent,true,2021-03-07 15:06:38.000000 UTC,32466796,PrashantIndurkar,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15437049594,WatchEvent,true,2021-03-07 15:18:54.000000 UTC,36957530,WiamNaama,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15437172431,WatchEvent,true,2021-03-07 15:45:32.000000 UTC,58590529,otabek,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15437132005,ForkEvent,true,2021-03-07 15:36:46.000000 UTC,58778364,derektruong,10270250,facebook/react,,,,,,,,,,"""derektruong/react""",,,,,,,
15437057483,WatchEvent,true,2021-03-07 15:20:34.000000 UTC,68810234,sanjaybansode1,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15437175022,ForkEvent,true,2021-03-07 15:46:00.000000 UTC,80210163,JacsonAndres,10270250,facebook/react,,,,,,,,,,"""JacsonAndres/react""",,,,,,,
15437074822,WatchEvent,true,2021-03-07 15:24:27.000000 UTC,22427584,Eden1114,263748045,NVIDIA/tensorflow,,,,,,,,"""started""",,,,,,,,,
15437179555,PullRequestReviewEvent,true,2021-03-07 15:46:59.000000 UTC,4981219,alalek,5108051,opencv/opencv,,,,,,,,"""created""",19675,,,"""commented""","""CONTRIBUTOR""",,,,
15437179559,PullRequestReviewCommentEvent,true,2021-03-07 15:46:59.000000 UTC,4981219,alalek,5108051,opencv/opencv,,,,,,,,"""created""",19675,,,,,,,,
15437233297,ForkEvent,true,2021-03-07 15:58:34.000000 UTC,26298408,wartek69,5108051,opencv/opencv,,,,,,,,,,"""wartek69/opencv""",,,,,,,
15437173267,WatchEvent,true,2021-03-07 15:45:38.000000 UTC,43777627,zhenleibb,5108051,opencv/opencv,,,,,,,,"""started""",,,,,,,,,
15437217456,ForkEvent,true,2021-03-07 15:55:08.000000 UTC,47594660,MadameNoir,5108051,opencv/opencv,,,,,,,,,,"""MadameNoir/opencv""",,,,,,,
15437081966,WatchEvent,true,2021-03-07 15:26:01.000000 UTC,51750773,Kivanc10,5108051,opencv/opencv,,,,,,,,"""started""",,,,,,,,,
15437198986,WatchEvent,true,2021-03-07 15:51:04.000000 UTC,68806666,tasanyphy01773,5108051,opencv/opencv,,,,,,,,"""started""",,,,,,,,,
15437131492,ForkEvent,true,2021-03-07 15:36:39.000000 UTC,75303297,yeji0304,5108051,opencv/opencv,,,,,,,,,,"""yeji0304/opencv""",,,,,,,
15437122648,ForkEvent,true,2021-03-07 15:34:41.000000 UTC,78099281,Sensuke-bot,5108051,opencv/opencv,,,,,,,,,,"""Sensuke-bot/opencv""",,,,,,,
15437156799,WatchEvent,true,2021-03-07 15:42:11.000000 UTC,6648733,xykkong,16072585,phoenixframework/phoenix,,,,,,,,"""started""",,,,,,,,,
15437138483,IssueCommentEvent,true,2021-03-07 15:38:10.000000 UTC,323199,mihaimaruseac,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15437035543,WatchEvent,true,2021-03-07 15:15:55.000000 UTC,4251662,blueskycode,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15437017140,IssueCommentEvent,true,2021-03-07 15:11:56.000000 UTC,31529267,BioWar,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15437210002,ForkEvent,true,2021-03-07 15:53:28.000000 UTC,72220428,rashmiprabhat567,45717250,tensorflow/tensorflow,,,,,,,,,,"""rashmiprabhat567/tensorflow""",,,,,,,
15437114232,IssueCommentEvent,true,2021-03-07 15:32:51.000000 UTC,75783690,sspintel,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15437155005,PushEvent,true,2021-03-07 15:41:47.000000 UTC,17557668,nakamin,342694356,SkuaD01/scikit-learn,"""refs/heads/main""",,,6659939590,3,1,"[{""sha"":""7ce005570518fcab16e49181bb276de3a47a09cb"",""author"":{""name"":""Anton"",""email"":""be9d95b62aa2e9bfad0201aba59afdbb3b0bede1@gmail.com""},""message"":""add divide by zero check"",""distinct"":false,""url"":""https://api.github.com/repos/SkuaD01/scikit-learn/commits/7ce005570518fcab16e49181bb276de3a47a09cb""},{""sha"":""91278371d6be0ec2aa6ad6232f8b97be104c9ebd"",""author"":{""name"":""Alxander64"",""email"":""ea14bccc393c7de9358f33362ac00c188bb9369c@mail.utoronto.ca""},""message"":""added test case"",""distinct"":false,""url"":""https://api.github.com/repos/SkuaD01/scikit-learn/commits/91278371d6be0ec2aa6ad6232f8b97be104c9ebd""},{""sha"":""6d3aae5813ae1d831743b007181478302474daf5"",""author"":{""name"":""Anton Kaminsky"",""email"":""be9d95b62aa2e9bfad0201aba59afdbb3b0bede1@gmail.com""},""message"":""Merge pull request #3 from SkuaD01/d01-18318-NaN\n\nD01 18318 NaN"",""distinct"":true,""url"":""https://api.github.com/repos/SkuaD01/scikit-learn/commits/6d3aae5813ae1d831743b007181478302474daf5""}]",,,,,,,,,,
15437170269,PullRequestReviewEvent,true,2021-03-07 15:45:05.000000 UTC,17557668,nakamin,342694356,SkuaD01/scikit-learn,,,,,,,,"""created""",1,,,"""approved""","""NONE""",,,,
15437154483,PullRequestEvent,true,2021-03-07 15:41:40.000000 UTC,17557668,nakamin,342694356,SkuaD01/scikit-learn,,,,,,,,"""closed""",3,,,,,,,,
15436021822,IssueCommentEvent,true,2021-03-07 11:23:11.000000 UTC,8655789,codecov-io,42385109,hx71105417/dubbo,,,,,,,,"""created""",,,,,,,,,
15435977463,PushEvent,true,2021-03-07 11:12:06.000000 UTC,9742760,mohamedsahadkp,151262459,mohamedsahadkp/terraform,"""refs/heads/master""",,,6659198929,1,1,"[{""sha"":""892af550cd436b57304a9976177be5f10fcbdd0e"",""author"":{""name"":""Mohamed Sahad"",""email"":""2e19bec7c1763bdf54b28ca3dd40c5d6fca9f449""},""message"":""completed ec2 module"",""distinct"":true,""url"":""https://api.github.com/repos/mohamedsahadkp/terraform/commits/892af550cd436b57304a9976177be5f10fcbdd0e""}]",,,,,,,,,,
15436145648,PushEvent,true,2021-03-07 11:53:42.000000 UTC,9742760,mohamedsahadkp,151262459,mohamedsahadkp/terraform,"""refs/heads/master""",,,6659303630,1,1,"[{""sha"":""2ff3ef6c954a98b3cf899d92b5178a8874a60fb7"",""author"":{""name"":""Mohamed Sahad"",""email"":""2e19bec7c1763bdf54b28ca3dd40c5d6fca9f449""},""message"":""added provisioner for ec2 instance"",""distinct"":true,""url"":""https://api.github.com/repos/mohamedsahadkp/terraform/commits/2ff3ef6c954a98b3cf899d92b5178a8874a60fb7""}]",,,,,,,,,,
15436023545,PushEvent,true,2021-03-07 11:23:37.000000 UTC,11705267,roamzz,303142230,roamzz/react,"""refs/heads/master""",,,6659227094,1,1,"[{""sha"":""0449e892957776d6306c6c1b82b15f4ffa890d93"",""author"":{""name"":""Irene"",""email"":""d2a4788321a9b6ee5c3a827c96df5f56ed58e157@gmail.com""},""message"":""React Router"",""distinct"":true,""url"":""https://api.github.com/repos/roamzz/react/commits/0449e892957776d6306c6c1b82b15f4ffa890d93""}]",,,,,,,,,,
15435982958,CreateEvent,true,2021-03-07 11:13:23.000000 UTC,28309026,ujjwalabhivns,345325661,ujjwalabhivns/terraform,,"""repository""","""user""",,,,,,,,,,,,,,
15436016199,CreateEvent,true,2021-03-07 11:21:47.000000 UTC,28309026,ujjwalabhivns,345325661,ujjwalabhivns/terraform,"""master""","""branch""","""user""",,,,,,,,,,,,,,
15436022248,PushEvent,true,2021-03-07 11:23:18.000000 UTC,28309026,ujjwalabhivns,345325661,ujjwalabhivns/terraform,"""refs/heads/master""",,,6659226284,1,1,"[{""sha"":""c5742697a8686b2e41851c35d220b1d4a3fe44f8"",""author"":{""name"":""Ujjawal Pathak"",""email"":""3dd91aebe0e32839e6616ce028261db4bdc1ff0d@atos.net""},""message"":""aws-web-application"",""distinct"":true,""url"":""https://api.github.com/repos/ujjwalabhivns/terraform/commits/c5742697a8686b2e41851c35d220b1d4a3fe44f8""}]",,,,,,,,,,
15436126383,PushEvent,true,2021-03-07 11:49:06.000000 UTC,28309026,ujjwalabhivns,345325661,ujjwalabhivns/terraform,"""refs/heads/master""",,,6659291481,1,1,"[{""sha"":""6a1c358cdfc435812bdb926ec24292be6ac3fbd6"",""author"":{""name"":""Ujjawal Pathak"",""email"":""3dd91aebe0e32839e6616ce028261db4bdc1ff0d@atos.net""},""message"":""Readme file"",""distinct"":true,""url"":""https://api.github.com/repos/ujjwalabhivns/terraform/commits/6a1c358cdfc435812bdb926ec24292be6ac3fbd6""}]",,,,,,,,,,
15436135540,PushEvent,true,2021-03-07 11:51:16.000000 UTC,28309026,ujjwalabhivns,345325661,ujjwalabhivns/terraform,"""refs/heads/master""",,,6659297289,1,1,"[{""sha"":""0c92e4035a33785d12ad7687444522c88a2b94a9"",""author"":{""name"":""Ujjawal Pathak"",""email"":""3dd91aebe0e32839e6616ce028261db4bdc1ff0d@atos.net""},""message"":""Readme file"",""distinct"":true,""url"":""https://api.github.com/repos/ujjwalabhivns/terraform/commits/0c92e4035a33785d12ad7687444522c88a2b94a9""}]",,,,,,,,,,
15436139376,PushEvent,true,2021-03-07 11:52:12.000000 UTC,28309026,ujjwalabhivns,345325661,ujjwalabhivns/terraform,"""refs/heads/master""",,,6659299680,1,1,"[{""sha"":""4d8768be9f5fb5c8669f2581ce0e2b8bc9576bb2"",""author"":{""name"":""ujjwalabhivns"",""email"":""e19ee52e6a9b58498d49abffba4546f7fdeb0aae@gmail.com""},""message"":""Update README.md\n\nreadme file"",""distinct"":true,""url"":""https://api.github.com/repos/ujjwalabhivns/terraform/commits/4d8768be9f5fb5c8669f2581ce0e2b8bc9576bb2""}]",,,,,,,,,,
15436143527,PushEvent,true,2021-03-07 11:53:11.000000 UTC,28309026,ujjwalabhivns,345325661,ujjwalabhivns/terraform,"""refs/heads/master""",,,6659302335,1,1,"[{""sha"":""9a9cd9eb112cc0d7ce3abff6249dac95037363ec"",""author"":{""name"":""ujjwalabhivns"",""email"":""e19ee52e6a9b58498d49abffba4546f7fdeb0aae@gmail.com""},""message"":""Update README.md\n\nreadme file"",""distinct"":true,""url"":""https://api.github.com/repos/ujjwalabhivns/terraform/commits/9a9cd9eb112cc0d7ce3abff6249dac95037363ec""}]",,,,,,,,,,
15435969319,PullRequestEvent,true,2021-03-07 11:10:19.000000 UTC,39814207,pull[bot],228097715,njzjz/tensorflow,,,,,,,,"""opened""",1745,,,,,,,,
15435973013,PushEvent,true,2021-03-07 11:11:12.000000 UTC,39814207,pull[bot],228097715,njzjz/tensorflow,"""refs/heads/master""",,,6659196589,3,3,"[{""sha"":""c8e6a3fb8f9ee595fe292e63449c65a2607a37e1"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Op documentation update.\n\tupdate of g3doc/includes/tf_passes.md\n\nPiperOrigin-RevId: 361390469\nChange-Id: I021164c4d178203466995dc14d99b49f504682dc"",""distinct"":true,""url"":""https://api.github.com/repos/njzjz/tensorflow/commits/c8e6a3fb8f9ee595fe292e63449c65a2607a37e1""},{""sha"":""86b2eda252f56be6b357195b3809d8a365987f62"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""compat: Update forward compatibility horizon to 2021-03-07\n\nPiperOrigin-RevId: 361392925\nChange-Id: I588c1d653d3e7ffea3425430b51582f34db4f1a8"",""distinct"":true,""url"":""https://api.github.com/repos/njzjz/tensorflow/commits/86b2eda252f56be6b357195b3809d8a365987f62""},{""sha"":""3b95a6316b47b10e877151fbca3d12e49a38fdf5"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Update GraphDef version to 698.\n\nPiperOrigin-RevId: 361392931\nChange-Id: Id814635746941c0666d2cf136f6acc424e7d0e9c"",""distinct"":true,""url"":""https://api.github.com/repos/njzjz/tensorflow/commits/3b95a6316b47b10e877151fbca3d12e49a38fdf5""}]",,,,,,,,,,
15435973045,PullRequestEvent,true,2021-03-07 11:11:12.000000 UTC,39814207,pull[bot],228097715,njzjz/tensorflow,,,,,,,,"""closed""",1745,,,,,,,,
15435999953,PullRequestEvent,true,2021-03-07 11:17:38.000000 UTC,39814207,pull[bot],174166640,Cache-Cloud/tensorflow,,,,,,,,"""opened""",6980,,,,,,,,
15436000113,PullRequestEvent,true,2021-03-07 11:17:40.000000 UTC,39814207,pull[bot],257509699,gouda1a1/dubbo,,,,,,,,"""opened""",12,,,,,,,,
15436002642,PushEvent,true,2021-03-07 11:18:20.000000 UTC,39814207,pull[bot],174166640,Cache-Cloud/tensorflow,"""refs/heads/master""",,,6659213863,3,3,"[{""sha"":""c8e6a3fb8f9ee595fe292e63449c65a2607a37e1"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Op documentation update.\n\tupdate of g3doc/includes/tf_passes.md\n\nPiperOrigin-RevId: 361390469\nChange-Id: I021164c4d178203466995dc14d99b49f504682dc"",""distinct"":true,""url"":""https://api.github.com/repos/Cache-Cloud/tensorflow/commits/c8e6a3fb8f9ee595fe292e63449c65a2607a37e1""},{""sha"":""86b2eda252f56be6b357195b3809d8a365987f62"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""compat: Update forward compatibility horizon to 2021-03-07\n\nPiperOrigin-RevId: 361392925\nChange-Id: I588c1d653d3e7ffea3425430b51582f34db4f1a8"",""distinct"":true,""url"":""https://api.github.com/repos/Cache-Cloud/tensorflow/commits/86b2eda252f56be6b357195b3809d8a365987f62""},{""sha"":""3b95a6316b47b10e877151fbca3d12e49a38fdf5"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Update GraphDef version to 698.\n\nPiperOrigin-RevId: 361392931\nChange-Id: Id814635746941c0666d2cf136f6acc424e7d0e9c"",""distinct"":true,""url"":""https://api.github.com/repos/Cache-Cloud/tensorflow/commits/3b95a6316b47b10e877151fbca3d12e49a38fdf5""}]",,,,,,,,,,
15436002662,PullRequestEvent,true,2021-03-07 11:18:21.000000 UTC,39814207,pull[bot],174166640,Cache-Cloud/tensorflow,,,,,,,,"""closed""",6980,,,,,,,,
15436025219,PullRequestEvent,true,2021-03-07 11:24:02.000000 UTC,39814207,pull[bot],179607331,isanjit3/tensorflow,,,,,,,,"""opened""",868,,,,,,,,
15436028759,PushEvent,true,2021-03-07 11:24:56.000000 UTC,39814207,pull[bot],179607331,isanjit3/tensorflow,"""refs/heads/master""",,,6659230327,3,3,"[{""sha"":""c8e6a3fb8f9ee595fe292e63449c65a2607a37e1"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Op documentation update.\n\tupdate of g3doc/includes/tf_passes.md\n\nPiperOrigin-RevId: 361390469\nChange-Id: I021164c4d178203466995dc14d99b49f504682dc"",""distinct"":true,""url"":""https://api.github.com/repos/isanjit3/tensorflow/commits/c8e6a3fb8f9ee595fe292e63449c65a2607a37e1""},{""sha"":""86b2eda252f56be6b357195b3809d8a365987f62"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""compat: Update forward compatibility horizon to 2021-03-07\n\nPiperOrigin-RevId: 361392925\nChange-Id: I588c1d653d3e7ffea3425430b51582f34db4f1a8"",""distinct"":true,""url"":""https://api.github.com/repos/isanjit3/tensorflow/commits/86b2eda252f56be6b357195b3809d8a365987f62""},{""sha"":""3b95a6316b47b10e877151fbca3d12e49a38fdf5"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Update GraphDef version to 698.\n\nPiperOrigin-RevId: 361392931\nChange-Id: Id814635746941c0666d2cf136f6acc424e7d0e9c"",""distinct"":true,""url"":""https://api.github.com/repos/isanjit3/tensorflow/commits/3b95a6316b47b10e877151fbca3d12e49a38fdf5""}]",,,,,,,,,,
15436028786,PullRequestEvent,true,2021-03-07 11:24:56.000000 UTC,39814207,pull[bot],133704084,melG81/tensorflow,,,,,,,,"""opened""",674,,,,,,,,
15436028790,PullRequestEvent,true,2021-03-07 11:24:57.000000 UTC,39814207,pull[bot],179607331,isanjit3/tensorflow,,,,,,,,"""closed""",868,,,,,,,,
15436031496,PushEvent,true,2021-03-07 11:25:35.000000 UTC,39814207,pull[bot],133704084,melG81/tensorflow,"""refs/heads/master""",,,6659232112,3,3,"[{""sha"":""c8e6a3fb8f9ee595fe292e63449c65a2607a37e1"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Op documentation update.\n\tupdate of g3doc/includes/tf_passes.md\n\nPiperOrigin-RevId: 361390469\nChange-Id: I021164c4d178203466995dc14d99b49f504682dc"",""distinct"":true,""url"":""https://api.github.com/repos/melG81/tensorflow/commits/c8e6a3fb8f9ee595fe292e63449c65a2607a37e1""},{""sha"":""86b2eda252f56be6b357195b3809d8a365987f62"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""compat: Update forward compatibility horizon to 2021-03-07\n\nPiperOrigin-RevId: 361392925\nChange-Id: I588c1d653d3e7ffea3425430b51582f34db4f1a8"",""distinct"":true,""url"":""https://api.github.com/repos/melG81/tensorflow/commits/86b2eda252f56be6b357195b3809d8a365987f62""},{""sha"":""3b95a6316b47b10e877151fbca3d12e49a38fdf5"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Update GraphDef version to 698.\n\nPiperOrigin-RevId: 361392931\nChange-Id: Id814635746941c0666d2cf136f6acc424e7d0e9c"",""distinct"":true,""url"":""https://api.github.com/repos/melG81/tensorflow/commits/3b95a6316b47b10e877151fbca3d12e49a38fdf5""}]",,,,,,,,,,
15436031521,PullRequestEvent,true,2021-03-07 11:25:36.000000 UTC,39814207,pull[bot],133704084,melG81/tensorflow,,,,,,,,"""closed""",674,,,,,,,,
15436033874,PullRequestEvent,true,2021-03-07 11:26:11.000000 UTC,39814207,pull[bot],82160236,waterdrops/tensorflow,,,,,,,,"""opened""",42,,,,,,,,
15436035573,PushEvent,true,2021-03-07 11:26:39.000000 UTC,39814207,pull[bot],82160236,waterdrops/tensorflow,"""refs/heads/master""",,,6659234643,3,3,"[{""sha"":""c8e6a3fb8f9ee595fe292e63449c65a2607a37e1"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Op documentation update.\n\tupdate of g3doc/includes/tf_passes.md\n\nPiperOrigin-RevId: 361390469\nChange-Id: I021164c4d178203466995dc14d99b49f504682dc"",""distinct"":true,""url"":""https://api.github.com/repos/waterdrops/tensorflow/commits/c8e6a3fb8f9ee595fe292e63449c65a2607a37e1""},{""sha"":""86b2eda252f56be6b357195b3809d8a365987f62"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""compat: Update forward compatibility horizon to 2021-03-07\n\nPiperOrigin-RevId: 361392925\nChange-Id: I588c1d653d3e7ffea3425430b51582f34db4f1a8"",""distinct"":true,""url"":""https://api.github.com/repos/waterdrops/tensorflow/commits/86b2eda252f56be6b357195b3809d8a365987f62""},{""sha"":""3b95a6316b47b10e877151fbca3d12e49a38fdf5"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Update GraphDef version to 698.\n\nPiperOrigin-RevId: 361392931\nChange-Id: Id814635746941c0666d2cf136f6acc424e7d0e9c"",""distinct"":true,""url"":""https://api.github.com/repos/waterdrops/tensorflow/commits/3b95a6316b47b10e877151fbca3d12e49a38fdf5""}]",,,,,,,,,,
15436035611,PullRequestEvent,true,2021-03-07 11:26:39.000000 UTC,39814207,pull[bot],82160236,waterdrops/tensorflow,,,,,,,,"""closed""",42,,,,,,,,
15436044286,PullRequestEvent,true,2021-03-07 11:28:50.000000 UTC,39814207,pull[bot],164577447,osmaelo/tensorflow,,,,,,,,"""opened""",5125,,,,,,,,
15436047622,PushEvent,true,2021-03-07 11:29:41.000000 UTC,39814207,pull[bot],164577447,osmaelo/tensorflow,"""refs/heads/master""",,,6659242080,3,3,"[{""sha"":""c8e6a3fb8f9ee595fe292e63449c65a2607a37e1"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Op documentation update.\n\tupdate of g3doc/includes/tf_passes.md\n\nPiperOrigin-RevId: 361390469\nChange-Id: I021164c4d178203466995dc14d99b49f504682dc"",""distinct"":true,""url"":""https://api.github.com/repos/osmaelo/tensorflow/commits/c8e6a3fb8f9ee595fe292e63449c65a2607a37e1""},{""sha"":""86b2eda252f56be6b357195b3809d8a365987f62"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""compat: Update forward compatibility horizon to 2021-03-07\n\nPiperOrigin-RevId: 361392925\nChange-Id: I588c1d653d3e7ffea3425430b51582f34db4f1a8"",""distinct"":true,""url"":""https://api.github.com/repos/osmaelo/tensorflow/commits/86b2eda252f56be6b357195b3809d8a365987f62""},{""sha"":""3b95a6316b47b10e877151fbca3d12e49a38fdf5"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Update GraphDef version to 698.\n\nPiperOrigin-RevId: 361392931\nChange-Id: Id814635746941c0666d2cf136f6acc424e7d0e9c"",""distinct"":true,""url"":""https://api.github.com/repos/osmaelo/tensorflow/commits/3b95a6316b47b10e877151fbca3d12e49a38fdf5""}]",,,,,,,,,,
15436047651,PullRequestEvent,true,2021-03-07 11:29:41.000000 UTC,39814207,pull[bot],164577447,osmaelo/tensorflow,,,,,,,,"""closed""",5125,,,,,,,,
15436047795,PullRequestEvent,true,2021-03-07 11:29:44.000000 UTC,39814207,pull[bot],206156535,icpm/tensorflow,,,,,,,,"""opened""",4894,,,,,,,,
15436049711,PushEvent,true,2021-03-07 11:30:11.000000 UTC,39814207,pull[bot],206156535,icpm/tensorflow,"""refs/heads/master""",,,6659243463,3,3,"[{""sha"":""c8e6a3fb8f9ee595fe292e63449c65a2607a37e1"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Op documentation update.\n\tupdate of g3doc/includes/tf_passes.md\n\nPiperOrigin-RevId: 361390469\nChange-Id: I021164c4d178203466995dc14d99b49f504682dc"",""distinct"":true,""url"":""https://api.github.com/repos/icpm/tensorflow/commits/c8e6a3fb8f9ee595fe292e63449c65a2607a37e1""},{""sha"":""86b2eda252f56be6b357195b3809d8a365987f62"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""compat: Update forward compatibility horizon to 2021-03-07\n\nPiperOrigin-RevId: 361392925\nChange-Id: I588c1d653d3e7ffea3425430b51582f34db4f1a8"",""distinct"":true,""url"":""https://api.github.com/repos/icpm/tensorflow/commits/86b2eda252f56be6b357195b3809d8a365987f62""},{""sha"":""3b95a6316b47b10e877151fbca3d12e49a38fdf5"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Update GraphDef version to 698.\n\nPiperOrigin-RevId: 361392931\nChange-Id: Id814635746941c0666d2cf136f6acc424e7d0e9c"",""distinct"":true,""url"":""https://api.github.com/repos/icpm/tensorflow/commits/3b95a6316b47b10e877151fbca3d12e49a38fdf5""}]",,,,,,,,,,
15436049738,PullRequestEvent,true,2021-03-07 11:30:12.000000 UTC,39814207,pull[bot],206156535,icpm/tensorflow,,,,,,,,"""closed""",4894,,,,,,,,
15436060178,PullRequestEvent,true,2021-03-07 11:32:37.000000 UTC,39814207,pull[bot],159132812,mark0725/tensorflow,,,,,,,,"""opened""",8182,,,,,,,,
15436063440,PushEvent,true,2021-03-07 11:33:25.000000 UTC,39814207,pull[bot],159132812,mark0725/tensorflow,"""refs/heads/master""",,,6659252129,2,2,"[{""sha"":""86b2eda252f56be6b357195b3809d8a365987f62"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""compat: Update forward compatibility horizon to 2021-03-07\n\nPiperOrigin-RevId: 361392925\nChange-Id: I588c1d653d3e7ffea3425430b51582f34db4f1a8"",""distinct"":true,""url"":""https://api.github.com/repos/mark0725/tensorflow/commits/86b2eda252f56be6b357195b3809d8a365987f62""},{""sha"":""3b95a6316b47b10e877151fbca3d12e49a38fdf5"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Update GraphDef version to 698.\n\nPiperOrigin-RevId: 361392931\nChange-Id: Id814635746941c0666d2cf136f6acc424e7d0e9c"",""distinct"":true,""url"":""https://api.github.com/repos/mark0725/tensorflow/commits/3b95a6316b47b10e877151fbca3d12e49a38fdf5""}]",,,,,,,,,,
15436063475,PullRequestEvent,true,2021-03-07 11:33:25.000000 UTC,39814207,pull[bot],159132812,mark0725/tensorflow,,,,,,,,"""closed""",8182,,,,,,,,
15436133363,PullRequestEvent,true,2021-03-07 11:50:44.000000 UTC,39814207,pull[bot],211211919,Mu-L/tensorflow,,,,,,,,"""opened""",1255,,,,,,,,
15436139581,PushEvent,true,2021-03-07 11:52:15.000000 UTC,39814207,pull[bot],211211919,Mu-L/tensorflow,"""refs/heads/master""",,,6659299819,2,2,"[{""sha"":""86b2eda252f56be6b357195b3809d8a365987f62"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""compat: Update forward compatibility horizon to 2021-03-07\n\nPiperOrigin-RevId: 361392925\nChange-Id: I588c1d653d3e7ffea3425430b51582f34db4f1a8"",""distinct"":true,""url"":""https://api.github.com/repos/Mu-L/tensorflow/commits/86b2eda252f56be6b357195b3809d8a365987f62""},{""sha"":""3b95a6316b47b10e877151fbca3d12e49a38fdf5"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Update GraphDef version to 698.\n\nPiperOrigin-RevId: 361392931\nChange-Id: Id814635746941c0666d2cf136f6acc424e7d0e9c"",""distinct"":true,""url"":""https://api.github.com/repos/Mu-L/tensorflow/commits/3b95a6316b47b10e877151fbca3d12e49a38fdf5""}]",,,,,,,,,,
15436139627,PullRequestEvent,true,2021-03-07 11:52:16.000000 UTC,39814207,pull[bot],211211919,Mu-L/tensorflow,,,,,,,,"""closed""",1255,,,,,,,,
15436142185,PullRequestEvent,true,2021-03-07 11:52:51.000000 UTC,39814207,pull[bot],157488097,greedisgoood/tensorflow,,,,,,,,"""opened""",404,,,,,,,,
15436146043,PushEvent,true,2021-03-07 11:53:47.000000 UTC,39814207,pull[bot],157488097,greedisgoood/tensorflow,"""refs/heads/master""",,,6659303862,2,2,"[{""sha"":""86b2eda252f56be6b357195b3809d8a365987f62"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""compat: Update forward compatibility horizon to 2021-03-07\n\nPiperOrigin-RevId: 361392925\nChange-Id: I588c1d653d3e7ffea3425430b51582f34db4f1a8"",""distinct"":true,""url"":""https://api.github.com/repos/greedisgoood/tensorflow/commits/86b2eda252f56be6b357195b3809d8a365987f62""},{""sha"":""3b95a6316b47b10e877151fbca3d12e49a38fdf5"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Update GraphDef version to 698.\n\nPiperOrigin-RevId: 361392931\nChange-Id: Id814635746941c0666d2cf136f6acc424e7d0e9c"",""distinct"":true,""url"":""https://api.github.com/repos/greedisgoood/tensorflow/commits/3b95a6316b47b10e877151fbca3d12e49a38fdf5""}]",,,,,,,,,,
15436146070,PullRequestEvent,true,2021-03-07 11:53:48.000000 UTC,39814207,pull[bot],157488097,greedisgoood/tensorflow,,,,,,,,"""closed""",404,,,,,,,,
15436166136,PullRequestEvent,true,2021-03-07 11:58:47.000000 UTC,39814207,pull[bot],209611938,Alan-love/tensorflow,,,,,,,,"""opened""",1436,,,,,,,,
15436167900,PushEvent,true,2021-03-07 11:59:11.000000 UTC,39814207,pull[bot],209611938,Alan-love/tensorflow,"""refs/heads/master""",,,6659317312,2,2,"[{""sha"":""86b2eda252f56be6b357195b3809d8a365987f62"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""compat: Update forward compatibility horizon to 2021-03-07\n\nPiperOrigin-RevId: 361392925\nChange-Id: I588c1d653d3e7ffea3425430b51582f34db4f1a8"",""distinct"":true,""url"":""https://api.github.com/repos/Alan-love/tensorflow/commits/86b2eda252f56be6b357195b3809d8a365987f62""},{""sha"":""3b95a6316b47b10e877151fbca3d12e49a38fdf5"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Update GraphDef version to 698.\n\nPiperOrigin-RevId: 361392931\nChange-Id: Id814635746941c0666d2cf136f6acc424e7d0e9c"",""distinct"":true,""url"":""https://api.github.com/repos/Alan-love/tensorflow/commits/3b95a6316b47b10e877151fbca3d12e49a38fdf5""}]",,,,,,,,,,
15436167931,PullRequestEvent,true,2021-03-07 11:59:11.000000 UTC,39814207,pull[bot],209611938,Alan-love/tensorflow,,,,,,,,"""closed""",1436,,,,,,,,
15436169195,PushEvent,true,2021-03-07 11:59:30.000000 UTC,49916559,VitoBravis,345320613,VitoBravis/react,"""refs/heads/main""",,,6659318119,1,1,"[{""sha"":""a9cfecd37b6846922448e2f0ebdf09b9ab589bf4"",""author"":{""name"":""Andrei"",""email"":""4eb3da953f3171a25bb26b51997a8ec1c9bd769b@gmail.com""},""message"":""new info"",""distinct"":true,""url"":""https://api.github.com/repos/VitoBravis/react/commits/a9cfecd37b6846922448e2f0ebdf09b9ab589bf4""}]",,,,,,,,,,
15435939872,CreateEvent,true,2021-03-07 11:03:48.000000 UTC,53345195,buri-1029,345323852,buri-1029/react,,"""repository""","""user""",,,,,,,,,,,,,,
15436153459,PushEvent,true,2021-03-07 11:55:36.000000 UTC,55460763,around-star,342383462,around-star/tensorflow,"""refs/heads/patch-2""",,,6659308328,1,1,"[{""sha"":""e95ce0aaf3dc62d8f05b6de903c736acac8b8766"",""author"":{""name"":""Hiran Sarkar"",""email"":""3dac4bd7767b5285559b9f5db233ca3be9276e6d@nsec.ac.in""},""message"":""Update normalization.py"",""distinct"":true,""url"":""https://api.github.com/repos/around-star/tensorflow/commits/e95ce0aaf3dc62d8f05b6de903c736acac8b8766""}]",,,,,,,,,,
15436110449,WatchEvent,true,2021-03-07 11:45:16.000000 UTC,55842329,guisuy,75396575,duxianwei520/react,,,,,,,,"""started""",,,,,,,,,
15436165162,CreateEvent,true,2021-03-07 11:58:33.000000 UTC,57619377,MagamedRus,345334645,MagamedRus/react,,"""repository""","""user""",,,,,,,,,,,,,,
15436132308,WatchEvent,true,2021-03-07 11:50:29.000000 UTC,73667127,ErfanhanifezadeDeveloper,285589238,BenNeighbour/react,,,,,,,,"""started""",,,,,,,,,
15436015057,PushEvent,true,2021-03-07 11:21:29.000000 UTC,78459073,tt-oo,345038874,tt-oo/tensorflow,"""refs/heads/master""",,,6659221614,1,1,"[{""sha"":""c634d6972d335b64bdb989fed60b53f1574214b8"",""author"":{""name"":""tt-oo"",""email"":""22bd561ded33f76bba821d0da56672be4deecfb3@users.noreply.github.com""},""message"":""Update cpu.Dockerfile"",""distinct"":true,""url"":""https://api.github.com/repos/tt-oo/tensorflow/commits/c634d6972d335b64bdb989fed60b53f1574214b8""}]",,,,,,,,,,
15436150926,PushEvent,true,2021-03-07 11:55:00.000000 UTC,79533578,Isabel-Puertas9,345079710,Isabel-Puertas9/netbeans,"""refs/heads/master""",,,6659306836,2,2,"[{""sha"":""4ad98d1b4e2e473db4cbfea4007222edf05cf8c3"",""author"":{""name"":""Isabel-Puertas9"",""email"":""7067367fc939a6576d3f388723ff3ca34b62fcfb@gmail.com""},""message"":""goya"",""distinct"":true,""url"":""https://api.github.com/repos/Isabel-Puertas9/netbeans/commits/4ad98d1b4e2e473db4cbfea4007222edf05cf8c3""},{""sha"":""28b586f432e3b7a36d2466abe0dff0d4b91f5dbf"",""author"":{""name"":""Isabel-Puertas9"",""email"":""7067367fc939a6576d3f388723ff3ca34b62fcfb@gmail.com""},""message"":""domingo7"",""distinct"":true,""url"":""https://api.github.com/repos/Isabel-Puertas9/netbeans/commits/28b586f432e3b7a36d2466abe0dff0d4b91f5dbf""}]",,,,,,,,,,
15436157087,PushEvent,true,2021-03-07 11:56:31.000000 UTC,79533578,Isabel-Puertas9,345079710,Isabel-Puertas9/netbeans,"""refs/heads/master""",,,6659310589,1,1,"[{""sha"":""d4097b2eb8d0f43de5f6b52ca964a0ccaf50f559"",""author"":{""name"":""Isabel-Puertas9"",""email"":""7067367fc939a6576d3f388723ff3ca34b62fcfb@gmail.com""},""message"":""domingo7marzo"",""distinct"":true,""url"":""https://api.github.com/repos/Isabel-Puertas9/netbeans/commits/d4097b2eb8d0f43de5f6b52ca964a0ccaf50f559""}]",,,,,,,,,,
15436073817,IssueCommentEvent,true,2021-03-07 11:35:58.000000 UTC,11349569,tomchan2015,4710920,apache/dubbo,,,,,,,,"""created""",,,,,,,,,
15436135557,WatchEvent,true,2021-03-07 11:51:17.000000 UTC,26158377,kzf32,4710920,apache/dubbo,,,,,,,,"""started""",,,,,,,,,
15436122450,WatchEvent,true,2021-03-07 11:48:07.000000 UTC,79546883,ibtihalghanam,102083576,apache/netbeans,,,,,,,,"""started""",,,,,,,,,
15436169340,WatchEvent,true,2021-03-07 11:59:31.000000 UTC,6221149,mszmida,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15436096202,WatchEvent,true,2021-03-07 11:41:40.000000 UTC,25073221,617429782,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15436096484,ForkEvent,true,2021-03-07 11:41:45.000000 UTC,25073221,617429782,10270250,facebook/react,,,,,,,,,,"""617429782/react""",,,,,,,
15436052367,WatchEvent,true,2021-03-07 11:30:47.000000 UTC,28984469,matinrezakhani,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15435929179,WatchEvent,true,2021-03-07 11:01:16.000000 UTC,40361390,bernadd,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15435976847,WatchEvent,true,2021-03-07 11:11:58.000000 UTC,43779222,hongckh,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15436045012,ForkEvent,true,2021-03-07 11:29:02.000000 UTC,47385382,claudiobrt,10270250,facebook/react,,,,,,,,,,"""claudiobrt/react""",,,,,,,
15435989678,WatchEvent,true,2021-03-07 11:15:01.000000 UTC,54270856,obadakhalili,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15436030121,ForkEvent,true,2021-03-07 11:25:15.000000 UTC,59882993,DoGukKim,10270250,facebook/react,,,,,,,,,,"""DoGukKim/react""",,,,,,,
15436115684,WatchEvent,true,2021-03-07 11:46:28.000000 UTC,62937,barakplasma,658518,ipython/ipython,,,,,,,,"""started""",,,,,,,,,
15436085807,WatchEvent,true,2021-03-07 11:39:02.000000 UTC,460748,mengguang,843222,scikit-learn/scikit-learn,,,,,,,,"""started""",,,,,,,,,
15436090331,WatchEvent,true,2021-03-07 11:40:12.000000 UTC,31685096,leeswan,843222,scikit-learn/scikit-learn,,,,,,,,"""started""",,,,,,,,,
15436054621,ForkEvent,true,2021-03-07 11:31:19.000000 UTC,57462844,ankitrajixr,843222,scikit-learn/scikit-learn,,,,,,,,,,"""ankitrajixr/scikit-learn""",,,,,,,
15436128454,PushEvent,true,2021-03-07 11:49:34.000000 UTC,15213161,pld-gitsync,5035239,pld-linux/opencv,"""refs/heads/master""",,,6659292779,1,1,"[{""sha"":""57f8064794be7bce50df88e27ae4741195ff77fa"",""author"":{""name"":""Elan Ruusamäe"",""email"":""c226bcbeea1369fe10f943fcc1abb3ac7d5f8286@pld-linux.org""},""message"":""Update BR (maybe bogus)\n\nAUTO: /usr/include/GL/glext.h:56:10: fatal error: KHR/khrplatform.h: No such file or directory"",""distinct"":true,""url"":""https://api.github.com/repos/pld-linux/opencv/commits/57f8064794be7bce50df88e27ae4741195ff77fa""}]",,,,,,,,,,
15435957163,ForkEvent,true,2021-03-07 11:07:36.000000 UTC,38594941,emrekokk,5108051,opencv/opencv,,,,,,,,,,"""emrekokk/opencv""",,,,,,,
15436050777,WatchEvent,true,2021-03-07 11:30:26.000000 UTC,80172370,ojretti,5108051,opencv/opencv,,,,,,,,"""started""",,,,,,,,,
15436101568,WatchEvent,true,2021-03-07 11:43:01.000000 UTC,57332230,BirolAYDIN,16072585,phoenixframework/phoenix,,,,,,,,"""started""",,,,,,,,,
15436003083,IssueCommentEvent,true,2021-03-07 11:18:27.000000 UTC,662003,mdickinson,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15436035661,IssueCommentEvent,true,2021-03-07 11:26:40.000000 UTC,3203059,abattery,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15436156028,WatchEvent,true,2021-03-07 11:56:14.000000 UTC,16538437,sebastianvillarroel,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15436117526,ForkEvent,true,2021-03-07 11:46:55.000000 UTC,57861109,Han-Zihang,45717250,tensorflow/tensorflow,,,,,,,,,,"""Han-Zihang/tensorflow""",,,,,,,
15436050118,WatchEvent,true,2021-03-07 11:30:17.000000 UTC,80172370,ojretti,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15436123920,IssueCommentEvent,true,2021-03-07 11:48:30.000000 UTC,354555,struanb,7691631,moby/moby,,,,,,,,"""created""",,,,,,,,,
15436124772,IssueCommentEvent,true,2021-03-07 11:48:43.000000 UTC,354555,struanb,7691631,moby/moby,,,,,,,,"""created""",,,,,,,,,
15436126129,IssueCommentEvent,true,2021-03-07 11:49:03.000000 UTC,354555,struanb,7691631,moby/moby,,,,,,,,"""created""",,,,,,,,,
15436128727,IssueCommentEvent,true,2021-03-07 11:49:38.000000 UTC,354555,struanb,7691631,moby/moby,,,,,,,,"""created""",,,,,,,,,
15436081303,ForkEvent,true,2021-03-07 11:37:51.000000 UTC,54615873,cestevens,7691631,moby/moby,,,,,,,,,,"""cestevens/moby""",,,,,,,
15436032930,WatchEvent,true,2021-03-07 11:25:57.000000 UTC,12432799,EZZAHED,135786093,typescript-cheatsheets/react,,,,,,,,"""started""",,,,,,,,,
15435602833,PushEvent,true,2021-03-07 09:36:15.000000 UTC,963123,mosoft521,28760797,mosoft521/react,"""refs/heads/master""",,,6658972051,2,2,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/mosoft521/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/mosoft521/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15435647943,PushEvent,true,2021-03-07 09:48:44.000000 UTC,12149691,stephaneclavel,285273470,stephaneclavel/terraform,"""refs/heads/master""",,,6658999477,1,1,"[{""sha"":""357458d586f37df557945d66094679cd0dde7938"",""author"":{""name"":""stephaneclavel"",""email"":""c2311bc8109c097b42c5a11f9b94d04edc1cc98c@users.noreply.github.com""},""message"":""Update readme.md"",""distinct"":true,""url"":""https://api.github.com/repos/stephaneclavel/terraform/commits/357458d586f37df557945d66094679cd0dde7938""}]",,,,,,,,,,
15435661583,PushEvent,true,2021-03-07 09:52:21.000000 UTC,12149691,stephaneclavel,285273470,stephaneclavel/terraform,"""refs/heads/master""",,,6659007768,1,1,"[{""sha"":""4b5c673b741fbaef8e6102d9a50c9cc0b86607ca"",""author"":{""name"":""steph"",""email"":""740545988cc2cf5900f90202a7c7c00ffa5fdb85@sita.aero""},""message"":""renamed project"",""distinct"":true,""url"":""https://api.github.com/repos/stephaneclavel/terraform/commits/4b5c673b741fbaef8e6102d9a50c9cc0b86607ca""}]",,,,,,,,,,
15435579833,CreateEvent,true,2021-03-07 09:30:17.000000 UTC,12292047,eps1lon,152847300,eps1lon/react,"""fix/act-cleanup-propagation""","""branch""","""user""",,,,,,,,,,,,,,
15435584740,PushEvent,true,2021-03-07 09:31:28.000000 UTC,12292047,eps1lon,152847300,eps1lon/react,"""refs/heads/fix/act-cleanup-propagation""",,,6658961052,3,3,"[{""sha"":""c2b9b181ed923dc30e929343efdc86e6de02dfec"",""author"":{""name"":""eps1lon"",""email"":""84fc128bc6cda84e77606b9e3bddd28c2b9ce031@gmail.com""},""message"":""test(act): Add expected behavior for unmount"",""distinct"":true,""url"":""https://api.github.com/repos/eps1lon/react/commits/c2b9b181ed923dc30e929343efdc86e6de02dfec""},{""sha"":""a2e5090ed88d1b93d2b9c947402f620c30391714"",""author"":{""name"":""eps1lon"",""email"":""84fc128bc6cda84e77606b9e3bddd28c2b9ce031@gmail.com""},""message"":""test(act): Add expected behavior for error propagation of effect destroy functions"",""distinct"":true,""url"":""https://api.github.com/repos/eps1lon/react/commits/a2e5090ed88d1b93d2b9c947402f620c30391714""},{""sha"":""ed27ebbb78eba2785995606a16948ad374b7b37b"",""author"":{""name"":""eps1lon"",""email"":""84fc128bc6cda84e77606b9e3bddd28c2b9ce031@gmail.com""},""message"":""Needs skipUnmountedBoundaries"",""distinct"":true,""url"":""https://api.github.com/repos/eps1lon/react/commits/ed27ebbb78eba2785995606a16948ad374b7b37b""}]",,,,,,,,,,
15435622083,PushEvent,true,2021-03-07 09:41:36.000000 UTC,16717283,OPY-bbt,268778714,OPY-bbt/react,"""refs/heads/zy""",,,6658983865,1,1,"[{""sha"":""fa5e6a877306c32eeb40e3bbd14524d8d02e39cb"",""author"":{""name"":""张岩"",""email"":""4ec7102a1e0afcbff3fa1b14f1297f9d8f040a15@gmail.com""},""message"":""update"",""distinct"":true,""url"":""https://api.github.com/repos/OPY-bbt/react/commits/fa5e6a877306c32eeb40e3bbd14524d8d02e39cb""}]",,,,,,,,,,
15435547718,PushEvent,true,2021-03-07 09:21:45.000000 UTC,18548473,giladbarnea,339453595,giladbarnea/ipython,"""refs/heads/master""",,,6658938231,6,6,"[{""sha"":""b7c3508ab118da113aacc7bc7ccc6455adc9cad1"",""author"":{""name"":""Talley Lambert"",""email"":""3836dcf403262fef88f81babe8087bf49c008298@gmail.com""},""message"":""add patch"",""distinct"":true,""url"":""https://api.github.com/repos/giladbarnea/ipython/commits/b7c3508ab118da113aacc7bc7ccc6455adc9cad1""},{""sha"":""e57c06148fb744fadd0dc5b3b0346dd70ecd2147"",""author"":{""name"":""Talley Lambert"",""email"":""3836dcf403262fef88f81babe8087bf49c008298@gmail.com""},""message"":""formatting"",""distinct"":true,""url"":""https://api.github.com/repos/giladbarnea/ipython/commits/e57c06148fb744fadd0dc5b3b0346dd70ecd2147""},{""sha"":""1f03cd0d3d566aac68084e35c2034cd6256c7b15"",""author"":{""name"":""Blazej Michalik"",""email"":""5274fa5ed41bc0ab80b761dc4b8355b126300494@nokia.com""},""message"":""ipdb: fix ULE when running 'context' without argument"",""distinct"":true,""url"":""https://api.github.com/repos/giladbarnea/ipython/commits/1f03cd0d3d566aac68084e35c2034cd6256c7b15""},{""sha"":""b15315709185fa137b6541ea7147a8247c01fba6"",""author"":{""name"":""Matthias Bussonnier"",""email"":""bc6ce7c050ee90e1f3b70c16cec57d4205e63b6c@gmail.com""},""message"":""Merge pull request #12842 from tlambert-forks/qt-exchook\n\nReclaim sys.excepthook for interactive shell in %gui qt"",""distinct"":true,""url"":""https://api.github.com/repos/giladbarnea/ipython/commits/b15315709185fa137b6541ea7147a8247c01fba6""},{""sha"":""bfcfb6d5b1b96cae0e277df916e4b00f6873baa7"",""author"":{""name"":""Matthias Bussonnier"",""email"":""bc6ce7c050ee90e1f3b70c16cec57d4205e63b6c@gmail.com""},""message"":""Merge pull request #12844 from MrMino/ipdb_set_context_command\n\nFix UnboundLocalError in IPDB when running 'context' command without argument"",""distinct"":true,""url"":""https://api.github.com/repos/giladbarnea/ipython/commits/bfcfb6d5b1b96cae0e277df916e4b00f6873baa7""},{""sha"":""5d7be741c37304ff7ed095393c0ba5248e0e15fa"",""author"":{""name"":""Gilad Barnea"",""email"":""1772595c9eeb450e088bf64b4e110f11cc2db307@allot.com""},""message"":""Merge branch 'master' of git://github.com/ipython/ipython"",""distinct"":true,""url"":""https://api.github.com/repos/giladbarnea/ipython/commits/5d7be741c37304ff7ed095393c0ba5248e0e15fa""}]",,,,,,,,,,
15435469156,PullRequestEvent,true,2021-03-07 09:00:42.000000 UTC,39814207,pull[bot],95080482,xiaoxiaopingzi/tensorflow,,,,,,,,"""opened""",4490,,,,,,,,
15435470026,PushEvent,true,2021-03-07 09:00:57.000000 UTC,39814207,pull[bot],95080482,xiaoxiaopingzi/tensorflow,"""refs/heads/master""",,,6658890693,1,1,"[{""sha"":""c8e6a3fb8f9ee595fe292e63449c65a2607a37e1"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Op documentation update.\n\tupdate of g3doc/includes/tf_passes.md\n\nPiperOrigin-RevId: 361390469\nChange-Id: I021164c4d178203466995dc14d99b49f504682dc"",""distinct"":true,""url"":""https://api.github.com/repos/xiaoxiaopingzi/tensorflow/commits/c8e6a3fb8f9ee595fe292e63449c65a2607a37e1""}]",,,,,,,,,,
15435470057,PullRequestEvent,true,2021-03-07 09:00:57.000000 UTC,39814207,pull[bot],95080482,xiaoxiaopingzi/tensorflow,,,,,,,,"""closed""",4490,,,,,,,,
15435472195,PullRequestEvent,true,2021-03-07 09:01:33.000000 UTC,39814207,pull[bot],83310415,NeatNerdPrime/tensorflow,,,,,,,,"""opened""",4482,,,,,,,,
15435472688,PushEvent,true,2021-03-07 09:01:41.000000 UTC,39814207,pull[bot],83310415,NeatNerdPrime/tensorflow,"""refs/heads/master""",,,6658892387,1,1,"[{""sha"":""c8e6a3fb8f9ee595fe292e63449c65a2607a37e1"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Op documentation update.\n\tupdate of g3doc/includes/tf_passes.md\n\nPiperOrigin-RevId: 361390469\nChange-Id: I021164c4d178203466995dc14d99b49f504682dc"",""distinct"":true,""url"":""https://api.github.com/repos/NeatNerdPrime/tensorflow/commits/c8e6a3fb8f9ee595fe292e63449c65a2607a37e1""}]",,,,,,,,,,
15435472707,PullRequestEvent,true,2021-03-07 09:01:41.000000 UTC,39814207,pull[bot],83310415,NeatNerdPrime/tensorflow,,,,,,,,"""closed""",4482,,,,,,,,
15435473619,PullRequestEvent,true,2021-03-07 09:01:56.000000 UTC,39814207,pull[bot],130050312,Rachelmorrell/tensorflow,,,,,,,,"""opened""",5250,,,,,,,,
15435474257,PushEvent,true,2021-03-07 09:02:06.000000 UTC,39814207,pull[bot],130050312,Rachelmorrell/tensorflow,"""refs/heads/master""",,,6658893345,1,1,"[{""sha"":""c8e6a3fb8f9ee595fe292e63449c65a2607a37e1"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Op documentation update.\n\tupdate of g3doc/includes/tf_passes.md\n\nPiperOrigin-RevId: 361390469\nChange-Id: I021164c4d178203466995dc14d99b49f504682dc"",""distinct"":true,""url"":""https://api.github.com/repos/Rachelmorrell/tensorflow/commits/c8e6a3fb8f9ee595fe292e63449c65a2607a37e1""}]",,,,,,,,,,
15435474287,PullRequestEvent,true,2021-03-07 09:02:06.000000 UTC,39814207,pull[bot],130050312,Rachelmorrell/tensorflow,,,,,,,,"""closed""",5250,,,,,,,,
15435475729,PullRequestEvent,true,2021-03-07 09:02:28.000000 UTC,39814207,pull[bot],329235466,gouda1a1/react,,,,,,,,"""opened""",67,,,,,,,,
15435476130,PushEvent,true,2021-03-07 09:02:34.000000 UTC,39814207,pull[bot],329235466,gouda1a1/react,"""refs/heads/master""",,,6658894464,2,2,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/gouda1a1/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/gouda1a1/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15435476159,PullRequestEvent,true,2021-03-07 09:02:34.000000 UTC,39814207,pull[bot],329235466,gouda1a1/react,,,,,,,,"""closed""",67,,,,,,,,
15435492691,PullRequestEvent,true,2021-03-07 09:06:56.000000 UTC,39814207,pull[bot],333612678,51461/dubbo,,,,,,,,"""opened""",28,,,,,,,,
15435493683,PushEvent,true,2021-03-07 09:07:11.000000 UTC,39814207,pull[bot],333612678,51461/dubbo,"""refs/heads/master""",,,6658905105,1,1,"[{""sha"":""96e44f60365832225990360f9485ace45fad85f0"",""author"":{""name"":""xiaoheng1"",""email"":""6350aee017b26f4750917972de057d2f54c2e260@qq.com""},""message"":""Solve local exposure, the server opens the token, and the client call fails (#7334)\n\n* fix #7024 Solve local exposure, the server opens the token, and the client call fails.\r\n\r\n* delete issue link"",""distinct"":true,""url"":""https://api.github.com/repos/51461/dubbo/commits/96e44f60365832225990360f9485ace45fad85f0""}]",,,,,,,,,,
15435493721,PullRequestEvent,true,2021-03-07 09:07:11.000000 UTC,39814207,pull[bot],333612678,51461/dubbo,,,,,,,,"""closed""",28,,,,,,,,
15435496009,PullRequestEvent,true,2021-03-07 09:07:49.000000 UTC,39814207,pull[bot],281212457,rafsanulhasan/react,,,,,,,,"""opened""",271,,,,,,,,
15435496985,PushEvent,true,2021-03-07 09:08:06.000000 UTC,39814207,pull[bot],281212457,rafsanulhasan/react,"""refs/heads/master""",,,6658907153,2,2,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/rafsanulhasan/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/rafsanulhasan/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15435497018,PullRequestEvent,true,2021-03-07 09:08:06.000000 UTC,39814207,pull[bot],281212457,rafsanulhasan/react,,,,,,,,"""closed""",271,,,,,,,,
15435500028,PullRequestEvent,true,2021-03-07 09:08:58.000000 UTC,39814207,pull[bot],266801149,tbergq/react,,,,,,,,"""opened""",334,,,,,,,,
15435501411,PushEvent,true,2021-03-07 09:09:21.000000 UTC,39814207,pull[bot],266801149,tbergq/react,"""refs/heads/master""",,,6658909870,2,2,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/tbergq/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/tbergq/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15435501438,PullRequestEvent,true,2021-03-07 09:09:22.000000 UTC,39814207,pull[bot],266801149,tbergq/react,,,,,,,,"""closed""",334,,,,,,,,
15435538531,PullRequestEvent,true,2021-03-07 09:19:12.000000 UTC,39814207,pull[bot],163274816,kokizzu/tensorflow,,,,,,,,"""opened""",3476,,,,,,,,
15435540487,PushEvent,true,2021-03-07 09:19:46.000000 UTC,39814207,pull[bot],163274816,kokizzu/tensorflow,"""refs/heads/master""",,,6658933652,3,3,"[{""sha"":""c8e6a3fb8f9ee595fe292e63449c65a2607a37e1"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Op documentation update.\n\tupdate of g3doc/includes/tf_passes.md\n\nPiperOrigin-RevId: 361390469\nChange-Id: I021164c4d178203466995dc14d99b49f504682dc"",""distinct"":true,""url"":""https://api.github.com/repos/kokizzu/tensorflow/commits/c8e6a3fb8f9ee595fe292e63449c65a2607a37e1""},{""sha"":""86b2eda252f56be6b357195b3809d8a365987f62"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""compat: Update forward compatibility horizon to 2021-03-07\n\nPiperOrigin-RevId: 361392925\nChange-Id: I588c1d653d3e7ffea3425430b51582f34db4f1a8"",""distinct"":true,""url"":""https://api.github.com/repos/kokizzu/tensorflow/commits/86b2eda252f56be6b357195b3809d8a365987f62""},{""sha"":""3b95a6316b47b10e877151fbca3d12e49a38fdf5"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Update GraphDef version to 698.\n\nPiperOrigin-RevId: 361392931\nChange-Id: Id814635746941c0666d2cf136f6acc424e7d0e9c"",""distinct"":true,""url"":""https://api.github.com/repos/kokizzu/tensorflow/commits/3b95a6316b47b10e877151fbca3d12e49a38fdf5""}]",,,,,,,,,,
15435540509,PullRequestEvent,true,2021-03-07 09:19:46.000000 UTC,39814207,pull[bot],163274816,kokizzu/tensorflow,,,,,,,,"""closed""",3476,,,,,,,,
15435542700,PullRequestEvent,true,2021-03-07 09:20:22.000000 UTC,39814207,pull[bot],211283192,Alan-love/react,,,,,,,,"""opened""",345,,,,,,,,
15435543357,PushEvent,true,2021-03-07 09:20:33.000000 UTC,39814207,pull[bot],211283192,Alan-love/react,"""refs/heads/master""",,,6658935552,2,2,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/Alan-love/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/Alan-love/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15435543380,PullRequestEvent,true,2021-03-07 09:20:33.000000 UTC,39814207,pull[bot],211283192,Alan-love/react,,,,,,,,"""closed""",345,,,,,,,,
15435555005,PullRequestEvent,true,2021-03-07 09:23:47.000000 UTC,39814207,pull[bot],308687720,linbingquan/react,,,,,,,,"""opened""",136,,,,,,,,
15435555808,PushEvent,true,2021-03-07 09:24:01.000000 UTC,39814207,pull[bot],308687720,linbingquan/react,"""refs/heads/master""",,,6658943251,2,2,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/linbingquan/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/linbingquan/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15435555826,PullRequestEvent,true,2021-03-07 09:24:01.000000 UTC,39814207,pull[bot],308687720,linbingquan/react,,,,,,,,"""closed""",136,,,,,,,,
15435576213,PullRequestEvent,true,2021-03-07 09:29:27.000000 UTC,39814207,pull[bot],107213661,Geolem/tensorflow,,,,,,,,"""opened""",25,,,,,,,,
15435577092,PushEvent,true,2021-03-07 09:29:39.000000 UTC,39814207,pull[bot],107213661,Geolem/tensorflow,"""refs/heads/master""",,,6658956218,3,3,"[{""sha"":""c8e6a3fb8f9ee595fe292e63449c65a2607a37e1"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Op documentation update.\n\tupdate of g3doc/includes/tf_passes.md\n\nPiperOrigin-RevId: 361390469\nChange-Id: I021164c4d178203466995dc14d99b49f504682dc"",""distinct"":true,""url"":""https://api.github.com/repos/Geolem/tensorflow/commits/c8e6a3fb8f9ee595fe292e63449c65a2607a37e1""},{""sha"":""86b2eda252f56be6b357195b3809d8a365987f62"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""compat: Update forward compatibility horizon to 2021-03-07\n\nPiperOrigin-RevId: 361392925\nChange-Id: I588c1d653d3e7ffea3425430b51582f34db4f1a8"",""distinct"":true,""url"":""https://api.github.com/repos/Geolem/tensorflow/commits/86b2eda252f56be6b357195b3809d8a365987f62""},{""sha"":""3b95a6316b47b10e877151fbca3d12e49a38fdf5"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Update GraphDef version to 698.\n\nPiperOrigin-RevId: 361392931\nChange-Id: Id814635746941c0666d2cf136f6acc424e7d0e9c"",""distinct"":true,""url"":""https://api.github.com/repos/Geolem/tensorflow/commits/3b95a6316b47b10e877151fbca3d12e49a38fdf5""}]",,,,,,,,,,
15435577123,PullRequestEvent,true,2021-03-07 09:29:39.000000 UTC,39814207,pull[bot],107213661,Geolem/tensorflow,,,,,,,,"""closed""",25,,,,,,,,
15435585930,PullRequestEvent,true,2021-03-07 09:31:46.000000 UTC,39814207,pull[bot],117140827,testkevinbonz/tensorflow,,,,,,,,"""opened""",6917,,,,,,,,
15435587735,PushEvent,true,2021-03-07 09:32:11.000000 UTC,39814207,pull[bot],117140827,testkevinbonz/tensorflow,"""refs/heads/master""",,,6658962815,3,3,"[{""sha"":""c8e6a3fb8f9ee595fe292e63449c65a2607a37e1"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Op documentation update.\n\tupdate of g3doc/includes/tf_passes.md\n\nPiperOrigin-RevId: 361390469\nChange-Id: I021164c4d178203466995dc14d99b49f504682dc"",""distinct"":true,""url"":""https://api.github.com/repos/testkevinbonz/tensorflow/commits/c8e6a3fb8f9ee595fe292e63449c65a2607a37e1""},{""sha"":""86b2eda252f56be6b357195b3809d8a365987f62"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""compat: Update forward compatibility horizon to 2021-03-07\n\nPiperOrigin-RevId: 361392925\nChange-Id: I588c1d653d3e7ffea3425430b51582f34db4f1a8"",""distinct"":true,""url"":""https://api.github.com/repos/testkevinbonz/tensorflow/commits/86b2eda252f56be6b357195b3809d8a365987f62""},{""sha"":""3b95a6316b47b10e877151fbca3d12e49a38fdf5"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Update GraphDef version to 698.\n\nPiperOrigin-RevId: 361392931\nChange-Id: Id814635746941c0666d2cf136f6acc424e7d0e9c"",""distinct"":true,""url"":""https://api.github.com/repos/testkevinbonz/tensorflow/commits/3b95a6316b47b10e877151fbca3d12e49a38fdf5""}]",,,,,,,,,,
15435587747,PullRequestEvent,true,2021-03-07 09:32:12.000000 UTC,39814207,pull[bot],117140827,testkevinbonz/tensorflow,,,,,,,,"""closed""",6917,,,,,,,,
15435599019,PullRequestEvent,true,2021-03-07 09:35:09.000000 UTC,39814207,pull[bot],295401342,apshada/react,,,,,,,,"""opened""",193,,,,,,,,
15435600075,PushEvent,true,2021-03-07 09:35:26.000000 UTC,39814207,pull[bot],295401342,apshada/react,"""refs/heads/master""",,,6658970345,2,2,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/apshada/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/apshada/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15435600102,PullRequestEvent,true,2021-03-07 09:35:27.000000 UTC,39814207,pull[bot],295401342,apshada/react,,,,,,,,"""closed""",193,,,,,,,,
15435628529,PullRequestEvent,true,2021-03-07 09:43:26.000000 UTC,39814207,pull[bot],190277211,KabirKwatra/tensorflow,,,,,,,,"""opened""",5521,,,,,,,,
15435630064,PushEvent,true,2021-03-07 09:43:46.000000 UTC,39814207,pull[bot],190277211,KabirKwatra/tensorflow,"""refs/heads/master""",,,6658988612,3,3,"[{""sha"":""c8e6a3fb8f9ee595fe292e63449c65a2607a37e1"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Op documentation update.\n\tupdate of g3doc/includes/tf_passes.md\n\nPiperOrigin-RevId: 361390469\nChange-Id: I021164c4d178203466995dc14d99b49f504682dc"",""distinct"":true,""url"":""https://api.github.com/repos/KabirKwatra/tensorflow/commits/c8e6a3fb8f9ee595fe292e63449c65a2607a37e1""},{""sha"":""86b2eda252f56be6b357195b3809d8a365987f62"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""compat: Update forward compatibility horizon to 2021-03-07\n\nPiperOrigin-RevId: 361392925\nChange-Id: I588c1d653d3e7ffea3425430b51582f34db4f1a8"",""distinct"":true,""url"":""https://api.github.com/repos/KabirKwatra/tensorflow/commits/86b2eda252f56be6b357195b3809d8a365987f62""},{""sha"":""3b95a6316b47b10e877151fbca3d12e49a38fdf5"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Update GraphDef version to 698.\n\nPiperOrigin-RevId: 361392931\nChange-Id: Id814635746941c0666d2cf136f6acc424e7d0e9c"",""distinct"":true,""url"":""https://api.github.com/repos/KabirKwatra/tensorflow/commits/3b95a6316b47b10e877151fbca3d12e49a38fdf5""}]",,,,,,,,,,
15435630142,PullRequestEvent,true,2021-03-07 09:43:47.000000 UTC,39814207,pull[bot],190277211,KabirKwatra/tensorflow,,,,,,,,"""closed""",5521,,,,,,,,
15435638303,PullRequestEvent,true,2021-03-07 09:46:03.000000 UTC,39814207,pull[bot],66892771,JackEasons/react,,,,,,,,"""opened""",129,,,,,,,,
15435638699,PushEvent,true,2021-03-07 09:46:10.000000 UTC,39814207,pull[bot],66892771,JackEasons/react,"""refs/heads/master""",,,6658993886,2,2,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/JackEasons/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/JackEasons/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15435638729,PullRequestEvent,true,2021-03-07 09:46:10.000000 UTC,39814207,pull[bot],66892771,JackEasons/react,,,,,,,,"""closed""",129,,,,,,,,
15435654360,PullRequestEvent,true,2021-03-07 09:50:20.000000 UTC,39814207,pull[bot],105981784,manojsdeveloper/react,,,,,,,,"""opened""",311,,,,,,,,
15435654942,PushEvent,true,2021-03-07 09:50:29.000000 UTC,39814207,pull[bot],105981784,manojsdeveloper/react,"""refs/heads/master""",,,6659003538,2,2,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/manojsdeveloper/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/manojsdeveloper/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15435654957,PullRequestEvent,true,2021-03-07 09:50:29.000000 UTC,39814207,pull[bot],105981784,manojsdeveloper/react,,,,,,,,"""closed""",311,,,,,,,,
15435655498,PullRequestEvent,true,2021-03-07 09:50:38.000000 UTC,39814207,pull[bot],340715557,KaycoinsInc/tensorflow,,,,,,,,"""opened""",38,,,,,,,,
15435657906,PushEvent,true,2021-03-07 09:51:19.000000 UTC,39814207,pull[bot],340715557,KaycoinsInc/tensorflow,"""refs/heads/master""",,,6659005480,3,3,"[{""sha"":""c8e6a3fb8f9ee595fe292e63449c65a2607a37e1"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Op documentation update.\n\tupdate of g3doc/includes/tf_passes.md\n\nPiperOrigin-RevId: 361390469\nChange-Id: I021164c4d178203466995dc14d99b49f504682dc"",""distinct"":true,""url"":""https://api.github.com/repos/KaycoinsInc/tensorflow/commits/c8e6a3fb8f9ee595fe292e63449c65a2607a37e1""},{""sha"":""86b2eda252f56be6b357195b3809d8a365987f62"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""compat: Update forward compatibility horizon to 2021-03-07\n\nPiperOrigin-RevId: 361392925\nChange-Id: I588c1d653d3e7ffea3425430b51582f34db4f1a8"",""distinct"":true,""url"":""https://api.github.com/repos/KaycoinsInc/tensorflow/commits/86b2eda252f56be6b357195b3809d8a365987f62""},{""sha"":""3b95a6316b47b10e877151fbca3d12e49a38fdf5"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Update GraphDef version to 698.\n\nPiperOrigin-RevId: 361392931\nChange-Id: Id814635746941c0666d2cf136f6acc424e7d0e9c"",""distinct"":true,""url"":""https://api.github.com/repos/KaycoinsInc/tensorflow/commits/3b95a6316b47b10e877151fbca3d12e49a38fdf5""}]",,,,,,,,,,
15435657953,PullRequestEvent,true,2021-03-07 09:51:20.000000 UTC,39814207,pull[bot],340715557,KaycoinsInc/tensorflow,,,,,,,,"""closed""",38,,,,,,,,
15435538810,CreateEvent,true,2021-03-07 09:19:17.000000 UTC,43564988,hesamoddinh,345303836,hesamoddinh/terraform,,"""repository""","""user""",,,,,,,,,,,,,,
15435538856,CreateEvent,true,2021-03-07 09:19:18.000000 UTC,43564988,hesamoddinh,345303836,hesamoddinh/terraform,"""main""","""branch""","""user""",,,,,,,,,,,,,,
15435495067,CreateEvent,true,2021-03-07 09:07:33.000000 UTC,47500211,liki2124,345301681,liki2124/terraform,,"""repository""","""user""",,,,,,,,,,,,,,
15435466093,PushEvent,true,2021-03-07 09:00:03.000000 UTC,59663022,bic-harness,232630157,bic-harness/terraform,"""refs/heads/master""",,,6658888160,1,1,"[{""sha"":""ef008e446dc4f9d185f9faa6e0d5fcf06363a34d"",""author"":{""name"":""bic-harness"",""email"":""958a8fce0d8c4daa7a8f2b84b587df9162e56ab2@harness.io""},""message"":""Update main.tf"",""distinct"":true,""url"":""https://api.github.com/repos/bic-harness/terraform/commits/ef008e446dc4f9d185f9faa6e0d5fcf06363a34d""}]",,,,,,,,,,
15435494208,PushEvent,true,2021-03-07 09:07:19.000000 UTC,59663022,bic-harness,232630157,bic-harness/terraform,"""refs/heads/master""",,,6658905407,1,1,"[{""sha"":""a5c5d92285fa39ef7af9d648c1e6d9b275d928f6"",""author"":{""name"":""bic-harness"",""email"":""958a8fce0d8c4daa7a8f2b84b587df9162e56ab2@harness.io""},""message"":""Update main.tf"",""distinct"":true,""url"":""https://api.github.com/repos/bic-harness/terraform/commits/a5c5d92285fa39ef7af9d648c1e6d9b275d928f6""}]",,,,,,,,,,
15435499863,PushEvent,true,2021-03-07 09:08:55.000000 UTC,59663022,bic-harness,232630157,bic-harness/terraform,"""refs/heads/master""",,,6658908939,1,1,"[{""sha"":""ce760d96cff2465dde0be51f17b4ccb7f0eadb79"",""author"":{""name"":""bic-harness"",""email"":""958a8fce0d8c4daa7a8f2b84b587df9162e56ab2@harness.io""},""message"":""Update main.tf"",""distinct"":true,""url"":""https://api.github.com/repos/bic-harness/terraform/commits/ce760d96cff2465dde0be51f17b4ccb7f0eadb79""}]",,,,,,,,,,
15435508484,PushEvent,true,2021-03-07 09:11:17.000000 UTC,59663022,bic-harness,232630157,bic-harness/terraform,"""refs/heads/master""",,,6658914251,1,1,"[{""sha"":""ac515d6306db579d66e7c0c73c75d5cd02135fb2"",""author"":{""name"":""bic-harness"",""email"":""958a8fce0d8c4daa7a8f2b84b587df9162e56ab2@harness.io""},""message"":""Update main.tf"",""distinct"":true,""url"":""https://api.github.com/repos/bic-harness/terraform/commits/ac515d6306db579d66e7c0c73c75d5cd02135fb2""}]",,,,,,,,,,
15435539050,PushEvent,true,2021-03-07 09:19:21.000000 UTC,59663022,bic-harness,232630157,bic-harness/terraform,"""refs/heads/master""",,,6658932766,1,1,"[{""sha"":""753f6b2d6faa1041e5e6dc1de9a6329423285316"",""author"":{""name"":""bic-harness"",""email"":""958a8fce0d8c4daa7a8f2b84b587df9162e56ab2@harness.io""},""message"":""Update outputs.tf"",""distinct"":true,""url"":""https://api.github.com/repos/bic-harness/terraform/commits/753f6b2d6faa1041e5e6dc1de9a6329423285316""}]",,,,,,,,,,
15435542146,PushEvent,true,2021-03-07 09:20:13.000000 UTC,59663022,bic-harness,232630157,bic-harness/terraform,"""refs/heads/master""",,,6658934752,1,1,"[{""sha"":""aaa35b482c08d4046aafe0cd9624858884d320a1"",""author"":{""name"":""bic-harness"",""email"":""958a8fce0d8c4daa7a8f2b84b587df9162e56ab2@harness.io""},""message"":""Update outputs.tf"",""distinct"":true,""url"":""https://api.github.com/repos/bic-harness/terraform/commits/aaa35b482c08d4046aafe0cd9624858884d320a1""}]",,,,,,,,,,
15435557241,PushEvent,true,2021-03-07 09:24:23.000000 UTC,59663022,bic-harness,232630157,bic-harness/terraform,"""refs/heads/master""",,,6658944115,1,1,"[{""sha"":""778e515716b61cb741b4ce2ed883020ca9571c52"",""author"":{""name"":""bic-harness"",""email"":""958a8fce0d8c4daa7a8f2b84b587df9162e56ab2@harness.io""},""message"":""Update main.tf"",""distinct"":true,""url"":""https://api.github.com/repos/bic-harness/terraform/commits/778e515716b61cb741b4ce2ed883020ca9571c52""}]",,,,,,,,,,
15435608440,PushEvent,true,2021-03-07 09:37:52.000000 UTC,59663022,bic-harness,232630157,bic-harness/terraform,"""refs/heads/master""",,,6658975453,1,1,"[{""sha"":""1ff255d62dc24499dd9b288bdecba6ad6a625fc3"",""author"":{""name"":""bic-harness"",""email"":""958a8fce0d8c4daa7a8f2b84b587df9162e56ab2@harness.io""},""message"":""Update main.tf"",""distinct"":true,""url"":""https://api.github.com/repos/bic-harness/terraform/commits/1ff255d62dc24499dd9b288bdecba6ad6a625fc3""}]",,,,,,,,,,
15435629931,PushEvent,true,2021-03-07 09:43:44.000000 UTC,59663022,bic-harness,232630157,bic-harness/terraform,"""refs/heads/master""",,,6658988552,1,1,"[{""sha"":""8000799edb3fde289d25cea8a5844f3a59d35183"",""author"":{""name"":""bic-harness"",""email"":""958a8fce0d8c4daa7a8f2b84b587df9162e56ab2@harness.io""},""message"":""Update main.tf"",""distinct"":true,""url"":""https://api.github.com/repos/bic-harness/terraform/commits/8000799edb3fde289d25cea8a5844f3a59d35183""}]",,,,,,,,,,
15435650620,PushEvent,true,2021-03-07 09:49:20.000000 UTC,59663022,bic-harness,232630157,bic-harness/terraform,"""refs/heads/master""",,,6659000799,1,1,"[{""sha"":""03c8051d24443f6c811ca83e6b4450f843175c8e"",""author"":{""name"":""bic-harness"",""email"":""958a8fce0d8c4daa7a8f2b84b587df9162e56ab2@harness.io""},""message"":""singular lb"",""distinct"":true,""url"":""https://api.github.com/repos/bic-harness/terraform/commits/03c8051d24443f6c811ca83e6b4450f843175c8e""}]",,,,,,,,,,
15435661343,PushEvent,true,2021-03-07 09:52:17.000000 UTC,59663022,bic-harness,232630157,bic-harness/terraform,"""refs/heads/master""",,,6659007623,1,1,"[{""sha"":""6aec47cf6139e564ea2e249aae261b62bd08fd4d"",""author"":{""name"":""bic-harness"",""email"":""958a8fce0d8c4daa7a8f2b84b587df9162e56ab2@harness.io""},""message"":""Update main.tf"",""distinct"":true,""url"":""https://api.github.com/repos/bic-harness/terraform/commits/6aec47cf6139e564ea2e249aae261b62bd08fd4d""}]",,,,,,,,,,
15435503424,PushEvent,true,2021-03-07 09:09:57.000000 UTC,62678380,hoseong511,337725901,hoseong511/react,"""refs/heads/main""",,,6658911116,1,1,"[{""sha"":""d82692bc6929b9b4ca78a3fddf54406a796c6a7a"",""author"":{""name"":""hoseong511"",""email"":""a36dadccc456be5ebc9ef6dde5556946ac5d6d4c@naver.com""},""message"":""update README.md"",""distinct"":true,""url"":""https://api.github.com/repos/hoseong511/react/commits/d82692bc6929b9b4ca78a3fddf54406a796c6a7a""}]",,,,,,,,,,
15435619429,PushEvent,true,2021-03-07 09:40:51.000000 UTC,71822585,Mar-992,335993971,Mar-992/react,"""refs/heads/master""",,,6658982210,1,1,"[{""sha"":""7cc83f41cc82bb2f4fab32e52f390dd52bdd52ea"",""author"":{""name"":""unknown"",""email"":""c9412fd672672f6bf87711c9d993df70b0dc5747@hotmail.com""},""message"":""cas12"",""distinct"":true,""url"":""https://api.github.com/repos/Mar-992/react/commits/7cc83f41cc82bb2f4fab32e52f390dd52bdd52ea""}]",,,,,,,,,,
15435650509,WatchEvent,true,2021-03-07 09:49:18.000000 UTC,75008413,dahmc,21743740,kasper/phoenix,,,,,,,,"""started""",,,,,,,,,
15435489127,PushEvent,true,2021-03-07 09:05:56.000000 UTC,78459073,tt-oo,345038874,tt-oo/tensorflow,"""refs/heads/master""",,,6658902268,1,1,"[{""sha"":""e78ae9ce302268fc38e0020bc435900cb36b1834"",""author"":{""name"":""tt-oo"",""email"":""22bd561ded33f76bba821d0da56672be4deecfb3@users.noreply.github.com""},""message"":""Update cpu.Dockerfile"",""distinct"":true,""url"":""https://api.github.com/repos/tt-oo/tensorflow/commits/e78ae9ce302268fc38e0020bc435900cb36b1834""}]",,,,,,,,,,
15435500936,IssueCommentEvent,true,2021-03-07 09:09:13.000000 UTC,8655789,codecov-io,4710920,apache/dubbo,,,,,,,,"""created""",,,,,,,,,
15435555015,PullRequestEvent,true,2021-03-07 09:23:47.000000 UTC,9292748,AlbumenJ,4710920,apache/dubbo,,,,,,,,"""closed""",7337,,,,,,,,
15435555399,PushEvent,true,2021-03-07 09:23:54.000000 UTC,9292748,AlbumenJ,4710920,apache/dubbo,"""refs/heads/3.0""",,,6658942990,1,1,"[{""sha"":""e0cba81952bc96cb0994552cd0cfc8e50296fca9"",""author"":{""name"":""xiaoheng1"",""email"":""6350aee017b26f4750917972de057d2f54c2e260@qq.com""},""message"":""Solve local exposure, the server opens the token, and the client call fails. (#7337)"",""distinct"":true,""url"":""https://api.github.com/repos/apache/dubbo/commits/e0cba81952bc96cb0994552cd0cfc8e50296fca9""}]",,,,,,,,,,
15435471500,IssueCommentEvent,true,2021-03-07 09:01:21.000000 UTC,12539730,xiaoheng1,4710920,apache/dubbo,,,,,,,,"""created""",,,,,,,,,
15435588061,IssueCommentEvent,true,2021-03-07 09:32:16.000000 UTC,12292047,eps1lon,10270250,facebook/react,,,,,,,,"""created""",,,,,,,,,
15435469657,WatchEvent,true,2021-03-07 09:00:51.000000 UTC,13931965,GoodbyeRonnie,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15435518764,ForkEvent,true,2021-03-07 09:13:57.000000 UTC,52202474,seojihwan,10270250,facebook/react,,,,,,,,,,"""seojihwan/react""",,,,,,,
15435537150,WatchEvent,true,2021-03-07 09:18:49.000000 UTC,67843601,caseyjoy,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15435563942,ForkEvent,true,2021-03-07 09:26:10.000000 UTC,80166255,stevenzchao,10270250,facebook/react,,,,,,,,,,"""stevenzchao/react""",,,,,,,
15435667014,IssueCommentEvent,true,2021-03-07 09:53:51.000000 UTC,1190450,NicolasHug,843222,scikit-learn/scikit-learn,,,,,,,,"""created""",,,,,,,,,
15435472770,IssueCommentEvent,true,2021-03-07 09:01:43.000000 UTC,15890747,PGijsbers,843222,scikit-learn/scikit-learn,,,,,,,,"""created""",,,,,,,,,
15435544539,WatchEvent,true,2021-03-07 09:20:53.000000 UTC,6814527,ramanshrivastava,17728164,hashicorp/terraform,,,,,,,,"""started""",,,,,,,,,
15435685579,WatchEvent,true,2021-03-07 09:59:01.000000 UTC,12638701,ldhnam,17728164,hashicorp/terraform,,,,,,,,"""started""",,,,,,,,,
15435573401,PullRequestReviewEvent,true,2021-03-07 09:28:46.000000 UTC,2536374,asmorkalov,5108051,opencv/opencv,,,,,,,,"""created""",19687,,,"""approved""","""CONTRIBUTOR""",,,,
15435486237,WatchEvent,true,2021-03-07 09:05:09.000000 UTC,67882797,shihe000,5108051,opencv/opencv,,,,,,,,"""started""",,,,,,,,,
15435518674,WatchEvent,true,2021-03-07 09:13:56.000000 UTC,76659596,baishalidutta,5108051,opencv/opencv,,,,,,,,"""started""",,,,,,,,,
15435478927,PullRequestEvent,true,2021-03-07 09:03:17.000000 UTC,39814207,pull[bot],306008166,miqdigital/react,,,,,,,,"""opened""",147,,,,,,,,
15435479280,PushEvent,true,2021-03-07 09:03:22.000000 UTC,39814207,pull[bot],306008166,miqdigital/react,"""refs/heads/master""",,,6658896461,2,2,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/miqdigital/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/miqdigital/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15435479298,PullRequestEvent,true,2021-03-07 09:03:23.000000 UTC,39814207,pull[bot],306008166,miqdigital/react,,,,,,,,"""closed""",147,,,,,,,,
15435555897,IssueCommentEvent,true,2021-03-07 09:24:03.000000 UTC,34361793,ruks001,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15435581153,WatchEvent,true,2021-03-07 09:30:35.000000 UTC,49122112,preetamvarun,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15435509557,PushEvent,true,2021-03-07 09:11:34.000000 UTC,56741989,copybara-service[bot],45717250,tensorflow/tensorflow,"""refs/heads/master""",,,6658914466,1,1,"[{""sha"":""3b95a6316b47b10e877151fbca3d12e49a38fdf5"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Update GraphDef version to 698.\n\nPiperOrigin-RevId: 361392931\nChange-Id: Id814635746941c0666d2cf136f6acc424e7d0e9c"",""distinct"":true,""url"":""https://api.github.com/repos/tensorflow/tensorflow/commits/3b95a6316b47b10e877151fbca3d12e49a38fdf5""}]",,,,,,,,,,
15435676213,WatchEvent,true,2021-03-07 09:56:22.000000 UTC,32612556,tharavel,7691631,moby/moby,,,,,,,,"""started""",,,,,,,,,
15435466993,PushEvent,true,2021-03-07 09:00:12.000000 UTC,19616653,ArmageddonKnight,204371788,UofT-EcoSystem/tensorflow,"""refs/heads/master""",,,6658888799,1,1,"[{""sha"":""c8e6a3fb8f9ee595fe292e63449c65a2607a37e1"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Op documentation update.\n\tupdate of g3doc/includes/tf_passes.md\n\nPiperOrigin-RevId: 361390469\nChange-Id: I021164c4d178203466995dc14d99b49f504682dc"",""distinct"":true,""url"":""https://api.github.com/repos/UofT-EcoSystem/tensorflow/commits/c8e6a3fb8f9ee595fe292e63449c65a2607a37e1""}]",,,,,,,,,,
15435533141,PullRequestEvent,true,2021-03-07 09:17:43.000000 UTC,39814207,pull[bot],256536409,zys-contrib/react,,,,,,,,"""opened""",183,,,,,,,,
15435534174,PushEvent,true,2021-03-07 09:18:00.000000 UTC,39814207,pull[bot],256536409,zys-contrib/react,"""refs/heads/master""",,,6658929761,2,2,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/zys-contrib/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/zys-contrib/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15435534199,PullRequestEvent,true,2021-03-07 09:18:00.000000 UTC,39814207,pull[bot],256536409,zys-contrib/react,,,,,,,,"""closed""",183,,,,,,,,
15435598622,WatchEvent,true,2021-03-07 09:35:04.000000 UTC,2196208,ruffle1986,135786093,typescript-cheatsheets/react,,,,,,,,"""started""",,,,,,,,,
15435516755,WatchEvent,true,2021-03-07 09:13:27.000000 UTC,28840551,O2F2,135786093,typescript-cheatsheets/react,,,,,,,,"""started""",,,,,,,,,
15435622284,PullRequestEvent,true,2021-03-07 09:41:40.000000 UTC,39814207,pull[bot],268754920,MLH-Fellowship/react,,,,,,,,"""opened""",227,,,,,,,,
15435622628,PushEvent,true,2021-03-07 09:41:47.000000 UTC,39814207,pull[bot],268754920,MLH-Fellowship/react,"""refs/heads/master""",,,6658984208,2,2,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/MLH-Fellowship/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/MLH-Fellowship/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""}]",,,,,,,,,,
15435622647,PullRequestEvent,true,2021-03-07 09:41:47.000000 UTC,39814207,pull[bot],268754920,MLH-Fellowship/react,,,,,,,,"""closed""",227,,,,,,,,
15435524049,WatchEvent,true,2021-03-07 09:15:19.000000 UTC,28840551,O2F2,248295170,geist-org/react,,,,,,,,"""started""",,,,,,,,,
15437440392,PushEvent,true,2021-03-07 16:42:36.000000 UTC,29597,bvaughn,74410855,bvaughn/react,"""refs/heads/devtools-profiler-log-scale""",,,6660118451,3,3,"[{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/bvaughn/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/bvaughn/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""},{""sha"":""b5ac359b55b8918850df63337beab05cfec76faf"",""author"":{""name"":""Brian Vaughn"",""email"":""59942a8ec08225673b377c556396ca24baabd1b2@fb.com""},""message"":""Improve DevTools Profiler commit-selector UX\n\n1. Replace linear scale for commit durations with log scale. This reduces the impact of one (or few) outlier times on more common smaller durations.\n2. Decrease the minimum bar height to make the differences in height more noticeable.\n3. Add a backgound hover highlight to increase contrast.\n4. Add hover tooltip with commit duration and timestamp."",""distinct"":true,""url"":""https://api.github.com/repos/bvaughn/react/commits/b5ac359b55b8918850df63337beab05cfec76faf""}]",,,,,,,,,,
15437504204,CreateEvent,true,2021-03-07 16:56:55.000000 UTC,143270,xandox,345401165,xandox/tensorflow,"""windows-static-build""","""branch""","""user""",,,,,,,,,,,,,,
15437499988,PushEvent,true,2021-03-07 16:55:59.000000 UTC,166966,jameshfisher,345401181,jameshfisher/tensorflow,"""refs/heads/patch-1""",,,6660155852,1,1,"[{""sha"":""1ed3a0a72613bd05939a2d7c2d8fb12112fd663b"",""author"":{""name"":""Jim Fisher"",""email"":""512d36c09fbace901af778b26e970b10099cc43c@gmail.com""},""message"":""tf.saved_model.load does not export SavedModels\n\nI'm guessing it is supposed to say .save"",""distinct"":true,""url"":""https://api.github.com/repos/jameshfisher/tensorflow/commits/1ed3a0a72613bd05939a2d7c2d8fb12112fd663b""}]",,,,,,,,,,
15437396666,PullRequestEvent,true,2021-03-07 16:33:08.000000 UTC,1931010,awibox,241086439,awibox/react,,,,,,,,"""closed""",13,,,,,,,,
15437399329,PushEvent,true,2021-03-07 16:33:40.000000 UTC,1931010,awibox,241086439,awibox/react,"""refs/heads/master""",,,6660092570,2,2,"[{""sha"":""08713b64bc3ea1f7a1f9a2c9d47520e81cbd6b0e"",""author"":{""name"":""dependabot[bot]"",""email"":""1c358da00a777d4e9898c1280ab801e2df165188@users.noreply.github.com""},""message"":""Bump node-fetch from 1.6.3 to 2.6.1 in /fixtures/ssr\n\nBumps [node-fetch](https://github.com/bitinn/node-fetch) from 1.6.3 to 2.6.1.\n- [Release notes](https://github.com/bitinn/node-fetch/releases)\n- [Changelog](https://github.com/node-fetch/node-fetch/blob/master/docs/CHANGELOG.md)\n- [Commits](https://github.com/bitinn/node-fetch/compare/v1.6.3...v2.6.1)\n\nSigned-off-by: dependabot[bot] <support@github.com>"",""distinct"":true,""url"":""https://api.github.com/repos/awibox/react/commits/08713b64bc3ea1f7a1f9a2c9d47520e81cbd6b0e""},{""sha"":""cb707f175ecae32b3d923e7ab0a9c573a940741d"",""author"":{""name"":""Andrei Arkhipov"",""email"":""8dc7c09356db0b1762fb140617d7375c0a5a4131@awb.pw""},""message"":""Merge pull request #10 from awibox/dependabot/npm_and_yarn/fixtures/ssr/node-fetch-2.6.1\n\nBump node-fetch from 1.6.3 to 2.6.1 in /fixtures/ssr"",""distinct"":true,""url"":""https://api.github.com/repos/awibox/react/commits/cb707f175ecae32b3d923e7ab0a9c573a940741d""}]",,,,,,,,,,
15437399349,PushEvent,true,2021-03-07 16:33:40.000000 UTC,1931010,awibox,241086439,awibox/react,"""refs/heads/master""",,,6660092584,2,2,"[{""sha"":""54e34294f9f87362317f380f6fda6002e9634eb6"",""author"":{""name"":""dependabot[bot]"",""email"":""1c358da00a777d4e9898c1280ab801e2df165188@users.noreply.github.com""},""message"":""Bump handlebars from 4.0.6 to 4.7.7 in /fixtures/ssr\n\nBumps [handlebars](https://github.com/wycats/handlebars.js) from 4.0.6 to 4.7.7.\n- [Release notes](https://github.com/wycats/handlebars.js/releases)\n- [Changelog](https://github.com/handlebars-lang/handlebars.js/blob/master/release-notes.md)\n- [Commits](https://github.com/wycats/handlebars.js/compare/v4.0.6...v4.7.7)\n\nSigned-off-by: dependabot[bot] <support@github.com>"",""distinct"":true,""url"":""https://api.github.com/repos/awibox/react/commits/54e34294f9f87362317f380f6fda6002e9634eb6""},{""sha"":""c8ef62fe188415ed7d0c41553194b79530d34e20"",""author"":{""name"":""Andrei Arkhipov"",""email"":""8dc7c09356db0b1762fb140617d7375c0a5a4131@awb.pw""},""message"":""Merge pull request #13 from awibox/dependabot/npm_and_yarn/fixtures/ssr/handlebars-4.7.7\n\nBump handlebars from 4.0.6 to 4.7.7 in /fixtures/ssr"",""distinct"":true,""url"":""https://api.github.com/repos/awibox/react/commits/c8ef62fe188415ed7d0c41553194b79530d34e20""}]",,,,,,,,,,
15437399352,PushEvent,true,2021-03-07 16:33:40.000000 UTC,1931010,awibox,241086439,awibox/react,"""refs/heads/master""",,,6660092586,2,1,"[{""sha"":""3427714383c9b6e68ff9e11670747f02f10a3b1a"",""author"":{""name"":""dependabot[bot]"",""email"":""1c358da00a777d4e9898c1280ab801e2df165188@users.noreply.github.com""},""message"":""Bump http-proxy from 1.16.2 to 1.18.1 in /fixtures/ssr\n\nBumps [http-proxy](https://github.com/http-party/node-http-proxy) from 1.16.2 to 1.18.1.\n- [Release notes](https://github.com/http-party/node-http-proxy/releases)\n- [Changelog](https://github.com/http-party/node-http-proxy/blob/master/CHANGELOG.md)\n- [Commits](https://github.com/http-party/node-http-proxy/compare/1.16.2...1.18.1)\n\nSigned-off-by: dependabot[bot] <support@github.com>"",""distinct"":false,""url"":""https://api.github.com/repos/awibox/react/commits/3427714383c9b6e68ff9e11670747f02f10a3b1a""},{""sha"":""54de15bc5b87ad91c3a93d2900a42f4a87f4b310"",""author"":{""name"":""Andrei Arkhipov"",""email"":""8dc7c09356db0b1762fb140617d7375c0a5a4131@awb.pw""},""message"":""Merge pull request #12 from awibox/dependabot/npm_and_yarn/fixtures/ssr/http-proxy-1.18.1\n\nBump http-proxy from 1.16.2 to 1.18.1 in /fixtures/ssr"",""distinct"":true,""url"":""https://api.github.com/repos/awibox/react/commits/54de15bc5b87ad91c3a93d2900a42f4a87f4b310""}]",,,,,,,,,,
15437395364,PullRequestReviewEvent,true,2021-03-07 16:32:52.000000 UTC,1931010,awibox,241086439,awibox/react,,,,,,,,"""created""",14,,,"""approved""","""OWNER""",,,,
15437395697,PullRequestEvent,true,2021-03-07 16:32:56.000000 UTC,1931010,awibox,241086439,awibox/react,,,,,,,,"""closed""",14,,,,,,,,
15437399328,PushEvent,true,2021-03-07 16:33:40.000000 UTC,1931010,awibox,241086439,awibox/react,"""refs/heads/master""",,,6660092572,2,2,"[{""sha"":""52ef3197c5b1aeab5c78fa77cb500e2f557edfda"",""author"":{""name"":""dependabot[bot]"",""email"":""1c358da00a777d4e9898c1280ab801e2df165188@users.noreply.github.com""},""message"":""Bump tree-kill from 1.1.0 to 1.2.2 in /fixtures/ssr\n\nBumps [tree-kill](https://github.com/pkrumins/node-tree-kill) from 1.1.0 to 1.2.2.\n- [Release notes](https://github.com/pkrumins/node-tree-kill/releases)\n- [Commits](https://github.com/pkrumins/node-tree-kill/compare/v1.1.0...v1.2.2)\n\nSigned-off-by: dependabot[bot] <support@github.com>"",""distinct"":true,""url"":""https://api.github.com/repos/awibox/react/commits/52ef3197c5b1aeab5c78fa77cb500e2f557edfda""},{""sha"":""182a84ddb4f6fa2eeb26497527bc8ba48fc6b194"",""author"":{""name"":""Andrei Arkhipov"",""email"":""8dc7c09356db0b1762fb140617d7375c0a5a4131@awb.pw""},""message"":""Merge pull request #14 from awibox/dependabot/npm_and_yarn/fixtures/ssr/tree-kill-1.2.2\n\nBump tree-kill from 1.1.0 to 1.2.2 in /fixtures/ssr"",""distinct"":true,""url"":""https://api.github.com/repos/awibox/react/commits/182a84ddb4f6fa2eeb26497527bc8ba48fc6b194""}]",,,,,,,,,,
15437399138,PullRequestEvent,true,2021-03-07 16:33:37.000000 UTC,1931010,awibox,241086439,awibox/react,,,,,,,,"""closed""",12,,,,,,,,
15437397622,PullRequestEvent,true,2021-03-07 16:33:19.000000 UTC,1931010,awibox,241086439,awibox/react,,,,,,,,"""closed""",10,,,,,,,,
15437399333,PushEvent,true,2021-03-07 16:33:40.000000 UTC,1931010,awibox,241086439,awibox/react,"""refs/heads/master""",,,6660092569,2,2,"[{""sha"":""53d305f3a235ceb1379f922c1fb99a358534fc24"",""author"":{""name"":""dependabot[bot]"",""email"":""1c358da00a777d4e9898c1280ab801e2df165188@users.noreply.github.com""},""message"":""Bump ini from 1.3.4 to 1.3.8 in /fixtures/ssr\n\nBumps [ini](https://github.com/isaacs/ini) from 1.3.4 to 1.3.8.\n- [Release notes](https://github.com/isaacs/ini/releases)\n- [Commits](https://github.com/isaacs/ini/compare/v1.3.4...v1.3.8)\n\nSigned-off-by: dependabot[bot] <support@github.com>"",""distinct"":true,""url"":""https://api.github.com/repos/awibox/react/commits/53d305f3a235ceb1379f922c1fb99a358534fc24""},{""sha"":""8deeb581ce1cab83f97b228a671c810fac527343"",""author"":{""name"":""Andrei Arkhipov"",""email"":""8dc7c09356db0b1762fb140617d7375c0a5a4131@awb.pw""},""message"":""Merge pull request #11 from awibox/dependabot/npm_and_yarn/fixtures/ssr/ini-1.3.8\n\nBump ini from 1.3.4 to 1.3.8 in /fixtures/ssr"",""distinct"":true,""url"":""https://api.github.com/repos/awibox/react/commits/8deeb581ce1cab83f97b228a671c810fac527343""}]",,,,,,,,,,
15437398383,PullRequestEvent,true,2021-03-07 16:33:28.000000 UTC,1931010,awibox,241086439,awibox/react,,,,,,,,"""closed""",11,,,,,,,,
15437366577,PushEvent,true,2021-03-07 16:26:41.000000 UTC,4981219,alalek,337084139,danbey/opencv,"""refs/heads/setting_stereoBMImpl_in_init_list""",,,6660072179,1,1,"[{""sha"":""849a254f5194831259df5db2b2c2351a30a27ad2"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""drop useless copy/move ctor"",""distinct"":true,""url"":""https://api.github.com/repos/danbey/opencv/commits/849a254f5194831259df5db2b2c2351a30a27ad2""}]",,,,,,,,,,
15437469488,CreateEvent,true,2021-03-07 16:49:10.000000 UTC,4981219,alalek,11310533,alalek/opencv,"""videoio_docs_hwaccel""","""branch""","""user""",,,,,,,,,,,,,,
15437479441,PushEvent,true,2021-03-07 16:51:23.000000 UTC,5200066,atermolaev,249936789,atermolaev/react,"""refs/heads/master""",,,6660142813,1,1,"[{""sha"":""c3c1e7e593ce1e6120eb357004afa1bedcb34892"",""author"":{""name"":""Anton"",""email"":""a1017afcdd40ed7f78c8586d8322d9415c681922@mail.ru""},""message"":""Поправил название аттрибута"",""distinct"":true,""url"":""https://api.github.com/repos/atermolaev/react/commits/c3c1e7e593ce1e6120eb357004afa1bedcb34892""}]",,,,,,,,,,
15437388780,PushEvent,true,2021-03-07 16:31:28.000000 UTC,5402633,thomasjpfan,135866406,thomasjpfan/scikit-learn,"""refs/heads/fix_mlp_finetune""",,,6660086029,2,2,"[{""sha"":""aa396bc6131d1b8abd07ac87c764012d6ac763ec"",""author"":{""name"":""Thomas J. Fan"",""email"":""5e8796a332fafc9c261437cd1787ae2709a896a7@gmail.com""},""message"":""TST Adjust test for new interface"",""distinct"":true,""url"":""https://api.github.com/repos/thomasjpfan/scikit-learn/commits/aa396bc6131d1b8abd07ac87c764012d6ac763ec""},{""sha"":""7414977c551530c5f52de51377b5d33d40f32d21"",""author"":{""name"":""Thomas J. Fan"",""email"":""5e8796a332fafc9c261437cd1787ae2709a896a7@gmail.com""},""message"":""DOC Update line length"",""distinct"":true,""url"":""https://api.github.com/repos/thomasjpfan/scikit-learn/commits/7414977c551530c5f52de51377b5d33d40f32d21""}]",,,,,,,,,,
15437357312,PushEvent,true,2021-03-07 16:24:42.000000 UTC,22809044,velmuruganmani,293494782,velmuruganmani/react,"""refs/heads/reacttypescript""",,,6660066259,2,2,"[{""sha"":""4328a6320ddc34babd020a486acc231728ac3be7"",""author"":{""name"":""vel murugan mani"",""email"":""43f80fbd34d330890b8c5a0337ea97d8fc7bb150@live.in""},""message"":""base code"",""distinct"":true,""url"":""https://api.github.com/repos/velmuruganmani/react/commits/4328a6320ddc34babd020a486acc231728ac3be7""},{""sha"":""994d77c815d889943e61032f3b90d627bac57f8b"",""author"":{""name"":""vel murugan mani"",""email"":""43f80fbd34d330890b8c5a0337ea97d8fc7bb150@live.in""},""message"":""base code"",""distinct"":true,""url"":""https://api.github.com/repos/velmuruganmani/react/commits/994d77c815d889943e61032f3b90d627bac57f8b""}]",,,,,,,,,,
15437462974,PushEvent,true,2021-03-07 16:47:39.000000 UTC,28309026,ujjwalabhivns,345325661,ujjwalabhivns/terraform,"""refs/heads/master""",,,6660132601,1,1,"[{""sha"":""e5fac5cb5a568c959597b7db243d8e119b4b29a6"",""author"":{""name"":""Ujjawal Pathak"",""email"":""3dd91aebe0e32839e6616ce028261db4bdc1ff0d@atos.net""},""message"":""added hld"",""distinct"":true,""url"":""https://api.github.com/repos/ujjwalabhivns/terraform/commits/e5fac5cb5a568c959597b7db243d8e119b4b29a6""}]",,,,,,,,,,
15437451461,PushEvent,true,2021-03-07 16:45:04.000000 UTC,28309026,ujjwalabhivns,345325661,ujjwalabhivns/terraform,"""refs/heads/master""",,,6660125427,1,1,"[{""sha"":""521aa87897a165c185d61d70eb40a8aed4307dc8"",""author"":{""name"":""Ujjawal Pathak"",""email"":""3dd91aebe0e32839e6616ce028261db4bdc1ff0d@atos.net""},""message"":""added autoscaling policy and encrypted EBS block volume"",""distinct"":true,""url"":""https://api.github.com/repos/ujjwalabhivns/terraform/commits/521aa87897a165c185d61d70eb40a8aed4307dc8""}]",,,,,,,,,,
15437255795,PullRequestEvent,true,2021-03-07 16:03:15.000000 UTC,39188949,ksugama,323674246,ksugama/tensorflow,,,,,,,,"""opened""",1,,,,,,,,
15437457738,PullRequestEvent,true,2021-03-07 16:46:28.000000 UTC,39814207,pull[bot],222435850,clunietp/opencv,,,,,,,,"""opened""",1050,,,,,,,,
15437449085,PullRequestEvent,true,2021-03-07 16:44:32.000000 UTC,49699333,dependabot[bot],241086439,awibox/react,,,,,,,,"""opened""",17,,,,,,,,
15437449274,CreateEvent,true,2021-03-07 16:44:35.000000 UTC,49699333,dependabot[bot],241086439,awibox/react,"""dependabot/npm_and_yarn/fixtures/ssr/stringstream-0.0.6""","""branch""","""user""",,,,,,,,,,,,,,
15437399306,DeleteEvent,true,2021-03-07 16:33:40.000000 UTC,49699333,dependabot[bot],241086439,awibox/react,"""dependabot/npm_and_yarn/fixtures/ssr/tree-kill-1.2.2""","""branch""","""user""",,,,,,,,,,,,,,
15437399881,DeleteEvent,true,2021-03-07 16:33:47.000000 UTC,49699333,dependabot[bot],241086439,awibox/react,"""dependabot/npm_and_yarn/fixtures/ssr/http-proxy-1.18.1""","""branch""","""user""",,,,,,,,,,,,,,
15437399299,DeleteEvent,true,2021-03-07 16:33:40.000000 UTC,49699333,dependabot[bot],241086439,awibox/react,"""dependabot/npm_and_yarn/fixtures/ssr/node-fetch-2.6.1""","""branch""","""user""",,,,,,,,,,,,,,
15437399298,DeleteEvent,true,2021-03-07 16:33:40.000000 UTC,49699333,dependabot[bot],241086439,awibox/react,"""dependabot/npm_and_yarn/fixtures/ssr/handlebars-4.7.7""","""branch""","""user""",,,,,,,,,,,,,,
15437403220,PullRequestEvent,true,2021-03-07 16:34:33.000000 UTC,49699333,dependabot[bot],241086439,awibox/react,,,,,,,,"""opened""",16,,,,,,,,
15437403361,CreateEvent,true,2021-03-07 16:34:35.000000 UTC,49699333,dependabot[bot],241086439,awibox/react,"""dependabot/npm_and_yarn/fixtures/ssr/is-my-json-valid-2.20.5""","""branch""","""user""",,,,,,,,,,,,,,
15437402591,PullRequestEvent,true,2021-03-07 16:34:24.000000 UTC,49699333,dependabot[bot],241086439,awibox/react,,,,,,,,"""opened""",15,,,,,,,,
15437402745,CreateEvent,true,2021-03-07 16:34:26.000000 UTC,49699333,dependabot[bot],241086439,awibox/react,"""dependabot/npm_and_yarn/fixtures/ssr/websocket-extensions-0.1.4""","""branch""","""user""",,,,,,,,,,,,,,
15437399304,DeleteEvent,true,2021-03-07 16:33:40.000000 UTC,49699333,dependabot[bot],241086439,awibox/react,"""dependabot/npm_and_yarn/fixtures/ssr/ini-1.3.8""","""branch""","""user""",,,,,,,,,,,,,,
15437432909,WatchEvent,true,2021-03-07 16:40:58.000000 UTC,50134160,gtx0023,75396575,duxianwei520/react,,,,,,,,"""started""",,,,,,,,,
15437409520,CreateEvent,true,2021-03-07 16:35:57.000000 UTC,61237128,JDW1337,344795760,JDW1337/yii2,"""master""","""branch""","""user""",,,,,,,,,,,,,,
15437384314,CreateEvent,true,2021-03-07 16:30:32.000000 UTC,64432791,mgguney,345396165,mgguney/react,,"""repository""","""user""",,,,,,,,,,,,,,
15437279847,PushEvent,true,2021-03-07 16:08:27.000000 UTC,80175090,dineshn-dsm,345189080,dineshn-dsm/terraform,"""refs/heads/main""",,,6660017760,1,1,"[{""sha"":""a226ba1860b89cfd86a036abda7a9793a554955b"",""author"":{""name"":""Dinesh DSM"",""email"":""a4ea2a0b1818f5cdaa1bbef01817c2bf4fc59aef@gmail.com""},""message"":""initial commit"",""distinct"":true,""url"":""https://api.github.com/repos/dineshn-dsm/terraform/commits/a226ba1860b89cfd86a036abda7a9793a554955b""}]",,,,,,,,,,
15437435956,PullRequestReviewCommentEvent,true,2021-03-07 16:41:36.000000 UTC,29597,bvaughn,10270250,facebook/react,,,,,,,,"""created""",20943,,,,,,,,
15437467042,IssueCommentEvent,true,2021-03-07 16:48:36.000000 UTC,29597,bvaughn,10270250,facebook/react,,,,,,,,"""created""",,,,,,,,,
15437461796,IssuesEvent,true,2021-03-07 16:47:23.000000 UTC,29597,bvaughn,10270250,facebook/react,,,,,,,,"""closed""",,,,,,,,,
15437461779,IssueCommentEvent,true,2021-03-07 16:47:23.000000 UTC,29597,bvaughn,10270250,facebook/react,,,,,,,,"""created""",,,,,,,,,
15437435951,PullRequestReviewEvent,true,2021-03-07 16:41:37.000000 UTC,29597,bvaughn,10270250,facebook/react,,,,,,,,"""created""",20943,,,"""commented""","""CONTRIBUTOR""",,,,
15437351566,IssueCommentEvent,true,2021-03-07 16:23:27.000000 UTC,2716369,gnoff,10270250,facebook/react,,,,,,,,"""created""",,,,,,,,,
15437261887,WatchEvent,true,2021-03-07 16:04:31.000000 UTC,36304491,roshanshilpakar,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15437297975,ForkEvent,true,2021-03-07 16:12:10.000000 UTC,48446684,r4ngga,10270250,facebook/react,,,,,,,,,,"""r4ngga/react""",,,,,,,
15437473999,WatchEvent,true,2021-03-07 16:50:13.000000 UTC,61888585,ViNoS-ab,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15437320147,WatchEvent,true,2021-03-07 16:16:41.000000 UTC,61936162,editfund-founder,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15437300039,ForkEvent,true,2021-03-07 16:12:35.000000 UTC,77978690,TFL-LeadDev,10270250,facebook/react,,,,,,,,,,"""TFL-LeadDev/react""",,,,,,,
15437409549,WatchEvent,true,2021-03-07 16:35:57.000000 UTC,80213656,patterapp,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15437480505,IssuesEvent,true,2021-03-07 16:51:38.000000 UTC,240623,dazza-codes,658518,ipython/ipython,,,,,,,,"""opened""",,,,,,,,,
15437486399,IssuesEvent,true,2021-03-07 16:52:54.000000 UTC,5402633,thomasjpfan,843222,scikit-learn/scikit-learn,,,,,,,,"""closed""",,,,,,,,,
15437465398,WatchEvent,true,2021-03-07 16:48:12.000000 UTC,291754,tblobaum,17728164,hashicorp/terraform,,,,,,,,"""started""",,,,,,,,,
15437363298,WatchEvent,true,2021-03-07 16:25:58.000000 UTC,11732981,jurisliepins,17728164,hashicorp/terraform,,,,,,,,"""started""",,,,,,,,,
15437475237,WatchEvent,true,2021-03-07 16:50:29.000000 UTC,15867310,StefanXhunga,17728164,hashicorp/terraform,,,,,,,,"""started""",,,,,,,,,
15437352711,PushEvent,true,2021-03-07 16:23:42.000000 UTC,2051563,opencv-pushbot,5108051,opencv/opencv,"""refs/heads/3.4""",,,6660063718,2,2,"[{""sha"":""85009800b3d98ec0370ab718a2afa32f2991b29b"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""videoio(docs): fixes"",""distinct"":true,""url"":""https://api.github.com/repos/opencv/opencv/commits/85009800b3d98ec0370ab718a2afa32f2991b29b""},{""sha"":""601690695e65fce9c8f85caf8926ab24364c5723"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19687 from alalek:videoio_docs_fixes_3.4"",""distinct"":true,""url"":""https://api.github.com/repos/opencv/opencv/commits/601690695e65fce9c8f85caf8926ab24364c5723""}]",,,,,,,,,,
15437352766,PullRequestEvent,true,2021-03-07 16:23:43.000000 UTC,2051563,opencv-pushbot,5108051,opencv/opencv,,,,,,,,"""closed""",19687,,,,,,,,
15437308067,WatchEvent,true,2021-03-07 16:14:10.000000 UTC,4112530,zy308718320,5108051,opencv/opencv,,,,,,,,"""started""",,,,,,,,,
15437475714,PullRequestEvent,true,2021-03-07 16:50:35.000000 UTC,4981219,alalek,5108051,opencv/opencv,,,,,,,,"""opened""",19688,,,,,,,,
15437422319,IssueCommentEvent,true,2021-03-07 16:38:46.000000 UTC,4981219,alalek,5108051,opencv/opencv,,,,,,,,"""created""",,,,,,,,,
15437397103,ForkEvent,true,2021-03-07 16:33:14.000000 UTC,10057038,akhilrana925,5108051,opencv/opencv,,,,,,,,,,"""akhilrana925/opencv""",,,,,,,
15437269105,WatchEvent,true,2021-03-07 16:06:07.000000 UTC,46624702,quocthinhvo,5108051,opencv/opencv,,,,,,,,"""started""",,,,,,,,,
15437247610,IssuesEvent,true,2021-03-07 16:01:30.000000 UTC,64692412,KyloEntro,5108051,opencv/opencv,,,,,,,,"""closed""",,,,,,,,,
15437247584,IssueCommentEvent,true,2021-03-07 16:01:30.000000 UTC,64692412,KyloEntro,5108051,opencv/opencv,,,,,,,,"""created""",,,,,,,,,
15437251855,WatchEvent,true,2021-03-07 16:02:25.000000 UTC,54560678,bittersweetshimmer,16072585,phoenixframework/phoenix,,,,,,,,"""started""",,,,,,,,,
15437290570,PushEvent,true,2021-03-07 16:10:41.000000 UTC,36920441,9inpachi,135442382,HSF/phoenix,"""refs/heads/master""",,,6660024519,1,1,"[{""sha"":""d18496cf9e700acd6c37ba1055a178b8e04a6fdd"",""author"":{""name"":""Fawad Ali"",""email"":""b5c6de5b3af979b770b56856c0ff9ccf460dec3c@gmail.com""},""message"":""docs(): fix up docs of phoenix-ui-components"",""distinct"":true,""url"":""https://api.github.com/repos/HSF/phoenix/commits/d18496cf9e700acd6c37ba1055a178b8e04a6fdd""}]",,,,,,,,,,
15437485059,ForkEvent,true,2021-03-07 16:52:37.000000 UTC,143270,xandox,45717250,tensorflow/tensorflow,,,,,,,,,,"""xandox/tensorflow""",,,,,,,
15437517139,IssueCommentEvent,true,2021-03-07 16:59:51.000000 UTC,143270,xandox,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15437508601,PullRequestEvent,true,2021-03-07 16:57:58.000000 UTC,143270,xandox,45717250,tensorflow/tensorflow,,,,,,,,"""opened""",47621,,,,,,,,
15437485475,ForkEvent,true,2021-03-07 16:52:42.000000 UTC,166966,jameshfisher,45717250,tensorflow/tensorflow,,,,,,,,,,"""jameshfisher/tensorflow""",,,,,,,
15437493390,PullRequestEvent,true,2021-03-07 16:54:27.000000 UTC,166966,jameshfisher,45717250,tensorflow/tensorflow,,,,,,,,"""opened""",47620,,,,,,,,
15437374460,WatchEvent,true,2021-03-07 16:28:24.000000 UTC,23388221,qoffee,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15437352002,ForkEvent,true,2021-03-07 16:23:33.000000 UTC,24572562,Brizhitskiyaa,45717250,tensorflow/tensorflow,,,,,,,,,,"""Brizhitskiyaa/tensorflow""",,,,,,,
15437464321,ForkEvent,true,2021-03-07 16:47:57.000000 UTC,31540189,PeYceBall,45717250,tensorflow/tensorflow,,,,,,,,,,"""PeYceBall/tensorflow""",,,,,,,
15437256469,WatchEvent,true,2021-03-07 16:03:23.000000 UTC,36304491,roshanshilpakar,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15437270402,ForkEvent,true,2021-03-07 16:06:23.000000 UTC,38850220,ret1s,45717250,tensorflow/tensorflow,,,,,,,,,,"""ret1s/tensorflow""",,,,,,,
15437308036,ForkEvent,true,2021-03-07 16:14:10.000000 UTC,39188949,ksugama,45717250,tensorflow/tensorflow,,,,,,,,,,"""ksugama/tensorflow""",,,,,,,
15437482172,WatchEvent,true,2021-03-07 16:51:59.000000 UTC,44160838,Gravifer,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15437508890,IssueCommentEvent,true,2021-03-07 16:58:01.000000 UTC,55858104,google-cla[bot],45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15437492224,WatchEvent,true,2021-03-07 16:54:11.000000 UTC,72220866,erikson99,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15437497719,WatchEvent,true,2021-03-07 16:55:27.000000 UTC,1781950,galaxyweb,135786093,typescript-cheatsheets/react,,,,,,,,"""started""",,,,,,,,,
15437296435,WatchEvent,true,2021-03-07 16:11:52.000000 UTC,65286171,lmint-dev,135786093,typescript-cheatsheets/react,,,,,,,,"""started""",,,,,,,,,
15437274022,IssueCommentEvent,true,2021-03-07 16:07:11.000000 UTC,55149962,SeanApplebaum,342694356,SkuaD01/scikit-learn,,,,,,,,"""created""",,,,,,,,,
15437274941,PullRequestEvent,true,2021-03-07 16:07:23.000000 UTC,55149962,SeanApplebaum,342694356,SkuaD01/scikit-learn,,,,,,,,"""closed""",2,,,,,,,,
15437275490,PushEvent,true,2021-03-07 16:07:31.000000 UTC,55149962,SeanApplebaum,342694356,SkuaD01/scikit-learn,"""refs/heads/main""",,,6660015071,2,1,"[{""sha"":""c847acf94072eab3898f4882490efbcb47d6d85d"",""author"":{""name"":""alex-greff"",""email"":""8689de38eb8caefb2835913c065215ee4beb9cb8@gmail.com""},""message"":""Stopped warning when alpha=0 for MultinomialNB BernoulliNB"",""distinct"":false,""url"":""https://api.github.com/repos/SkuaD01/scikit-learn/commits/c847acf94072eab3898f4882490efbcb47d6d85d""},{""sha"":""22d9d970667057f60805134461c7e6d6e700d1f8"",""author"":{""name"":""SeanApplebaum"",""email"":""9f3f70f403f36a87dff4224666de1e4131b6bdef@users.noreply.github.com""},""message"":""Merge pull request #2 from SkuaD01/d01-10772-alpha\n\nD01 10772 \""alpha\"""",""distinct"":true,""url"":""https://api.github.com/repos/SkuaD01/scikit-learn/commits/22d9d970667057f60805134461c7e6d6e700d1f8""}]",,,,,,,,,,
15436680055,PushEvent,true,2021-03-07 13:58:57.000000 UTC,3395998,freedomtan,86523950,freedomtan/tensorflow,"""refs/heads/enable_coreml_delegate_on_m1""",,,6659639090,1,1,"[{""sha"":""a6018a0604dbd029ac3314fb6bb3a3d5bf855b87"",""author"":{""name"":""Koan-Sin Tan"",""email"":""0f50d6f3c0f5df9b282683ddabaf63e2d4d09d2c@gmail.com""},""message"":""only include coreml and gpu delegate headers on M1\n\nDon't include coreml and gpu delegate headers on x86_64 machines"",""distinct"":true,""url"":""https://api.github.com/repos/freedomtan/tensorflow/commits/a6018a0604dbd029ac3314fb6bb3a3d5bf855b87""}]",,,,,,,,,,
15436440239,CreateEvent,true,2021-03-07 13:03:35.000000 UTC,16235396,likeAGoat,341553189,likeAGoat/react,"""master""","""branch""","""user""",,,,,,,,,,,,,,
15436453396,PushEvent,true,2021-03-07 13:06:40.000000 UTC,16235396,likeAGoat,341553189,likeAGoat/react,"""refs/heads/master""",,,6659496431,1,1,"[{""sha"":""0ac5bbd7b1ab112353185ff544f52da65650de13"",""author"":{""name"":""solsol"",""email"":""20fc436cf4f6e811441df21a67947cf0962a837a@gmail.com""},""message"":""Update readme.md"",""distinct"":true,""url"":""https://api.github.com/repos/likeAGoat/react/commits/0ac5bbd7b1ab112353185ff544f52da65650de13""}]",,,,,,,,,,
15436488395,PushEvent,true,2021-03-07 13:14:45.000000 UTC,30507318,vvsterlikov,345117413,vvsterlikov/react,"""refs/heads/my-app""",,,6659518467,1,1,"[{""sha"":""048ff7bd75d57e925aa243ae887d1782a0c956f3"",""author"":{""name"":""VSTERLIKOV"",""email"":""b3dc88bfceaadfb2bd7bbb423ff5fb8bbce84aeb@gmail.com""},""message"":""delete old and create empty js and css"",""distinct"":true,""url"":""https://api.github.com/repos/vvsterlikov/react/commits/048ff7bd75d57e925aa243ae887d1782a0c956f3""}]",,,,,,,,,,
15436483426,PushEvent,true,2021-03-07 13:13:38.000000 UTC,42023367,Kvicii,254893329,Kvicii/dubbo,"""refs/heads/2.6.x-read""",,,6659515359,2,2,"[{""sha"":""87a634db05262f0274176218f0a5e7ed2f909eb6"",""author"":{""name"":""Albumen Kevin"",""email"":""bbabf03ee0d7702e3da35298bd27899c57dc84be@gmail.com""},""message"":""Add Github Actions script for Dubbo 2.6.x (#7327)"",""distinct"":true,""url"":""https://api.github.com/repos/Kvicii/dubbo/commits/87a634db05262f0274176218f0a5e7ed2f909eb6""},{""sha"":""cdfa6005114e6fb96e3e7a8c8b4fe323e8c6e78b"",""author"":{""name"":""yuyang"",""email"":""f22a4dabcd7a5c804a015993a3b51bc2b7a4dd8d@mininglamp.com""},""message"":""Merge branch '2.6.x' of github.com:apache/dubbo into 2.6.x-read"",""distinct"":true,""url"":""https://api.github.com/repos/Kvicii/dubbo/commits/cdfa6005114e6fb96e3e7a8c8b4fe323e8c6e78b""}]",,,,,,,,,,
15436484232,PullRequestEvent,true,2021-03-07 13:13:50.000000 UTC,55306904,subhayuroy,297217555,subhayuroy/scikit-learn,,,,,,,,"""opened""",63,,,,,,,,
15436486241,PullRequestEvent,true,2021-03-07 13:14:17.000000 UTC,55306904,subhayuroy,297217555,subhayuroy/scikit-learn,,,,,,,,"""closed""",63,,,,,,,,
15436502999,PullRequestEvent,true,2021-03-07 13:18:02.000000 UTC,55306904,subhayuroy,291099516,subhayuroy/tensorflow,,,,,,,,"""opened""",73,,,,,,,,
15436504980,PullRequestEvent,true,2021-03-07 13:18:27.000000 UTC,55306904,subhayuroy,291099516,subhayuroy/tensorflow,,,,,,,,"""closed""",73,,,,,,,,
15436514068,PushEvent,true,2021-03-07 13:20:33.000000 UTC,55306904,subhayuroy,291099516,subhayuroy/tensorflow,"""refs/heads/master""",,,6659534601,283,283,"[{""sha"":""7e3d9c43ffe13bb6d72ba9b34ff35522dbc15ebf"",""author"":{""name"":""Måns Nilsson"",""email"":""f429d3ebc62bd10906847170cf9cafede1026db8@arm.com""},""message"":""TFLu: Port squeeze op from TFLite"",""distinct"":true,""url"":""https://api.github.com/repos/subhayuroy/tensorflow/commits/7e3d9c43ffe13bb6d72ba9b34ff35522dbc15ebf""},{""sha"":""a7f122ff48dcd533337e34ca655242d3c37b42c4"",""author"":{""name"":""Måns Nilsson"",""email"":""f429d3ebc62bd10906847170cf9cafede1026db8@arm.com""},""message"":""Update bazel build with squeeze op"",""distinct"":true,""url"":""https://api.github.com/repos/subhayuroy/tensorflow/commits/a7f122ff48dcd533337e34ca655242d3c37b42c4""},{""sha"":""a06164e9db9c6e99902219a996c54b45e8152585"",""author"":{""name"":""Måns Nilsson"",""email"":""f429d3ebc62bd10906847170cf9cafede1026db8@arm.com""},""message"":""TFLu: update squeeze op from review comments"",""distinct"":true,""url"":""https://api.github.com/repos/subhayuroy/tensorflow/commits/a06164e9db9c6e99902219a996c54b45e8152585""},{""sha"":""c4f7290410ccef51af45e3315cb721a8532a8dce"",""author"":{""name"":""Måns Nilsson"",""email"":""f429d3ebc62bd10906847170cf9cafede1026db8@arm.com""},""message"":""Merge remote-tracking branch origin/upstream/master"",""distinct"":true,""url"":""https://api.github.com/repos/subhayuroy/tensorflow/commits/c4f7290410ccef51af45e3315cb721a8532a8dce""},{""sha"":""4370563968769d00f823dc03b0a227a688468d09"",""author"":{""name"":""Stephan"",""email"":""5dd2b714e77158e70085a036dfec7245ce93d3aa@gmail.com""},""message"":""Copied files from lite/kernels to lite/micro/kernels"",""distinct"":true,""url"":""https://api.github.com/repos/subhayuroy/tensorflow/commits/4370563968769d00f823dc03b0a227a688468d09""},{""sha"":""04b6b6510f684cb2e3de3f5511655bdaffae9c65"",""author"":{""name"":""Måns Nilsson"",""email"":""f429d3ebc62bd10906847170cf9cafede1026db8@arm.com""},""message"":""TFLu: add squeeze.cc/squeeze_test.cc to Makefile"",""distinct"":true,""url"":""https://api.github.com/repos/subhayuroy/tensorflow/commits/04b6b6510f684cb2e3de3f5511655bdaffae9c65""},{""sha"":""c8b931b678bf56d225eeb82295d4fe1fbfac8787"",""author"":{""name"":""Stephan"",""email"":""5dd2b714e77158e70085a036dfec7245ce93d3aa@gmail.com""},""message"":""Included batch_to_space_nd.cc and space_to_batch_nd.cc into the BUILD-File in micro/kernels"",""distinct"":true,""url"":""https://api.github.com/repos/subhayuroy/tensorflow/commits/c8b931b678bf56d225eeb82295d4fe1fbfac8787""},{""sha"":""7da0f5ed2fb4e0f76fe7301965573a1477ce6710"",""author"":{""name"":""Stephan"",""email"":""5dd2b714e77158e70085a036dfec7245ce93d3aa@gmail.com""},""message"":""Merge branch 'master' of https://github.com/tensorflow/tensorflow into PR3"",""distinct"":true,""url"":""https://api.github.com/repos/subhayuroy/tensorflow/commits/7da0f5ed2fb4e0f76fe7301965573a1477ce6710""},{""sha"":""b23b19f9d50cb85c9cd71b9298e2a738e026c7ce"",""author"":{""name"":""Stephan"",""email"":""5dd2b714e77158e70085a036dfec7245ce93d3aa@gmail.com""},""message"":""Merge branch 'master' of https://github.com/tensorflow/tensorflow into PR3"",""distinct"":true,""url"":""https://api.github.com/repos/subhayuroy/tensorflow/commits/b23b19f9d50cb85c9cd71b9298e2a738e026c7ce""},{""sha"":""b546e04a958e7c3bf9b78358a6d104f0b7edc8f2"",""author"":{""name"":""Stephan"",""email"":""5dd2b714e77158e70085a036dfec7245ce93d3aa@gmail.com""},""message"":""Converted micro implementation to reference implementation only - got rid of optimized ops"",""distinct"":true,""url"":""https://api.github.com/repos/subhayuroy/tensorflow/commits/b546e04a958e7c3bf9b78358a6d104f0b7edc8f2""},{""sha"":""cce13214ed2a4fe256e27d662f82ba1abd2523c1"",""author"":{""name"":""Stephan"",""email"":""5dd2b714e77158e70085a036dfec7245ce93d3aa@gmail.com""},""message"":""Removed tests"",""distinct"":true,""url"":""https://api.github.com/repos/subhayuroy/tensorflow/commits/cce13214ed2a4fe256e27d662f82ba1abd2523c1""},{""sha"":""763df9a3b796226836d4ddc9f4b89cd519e9847b"",""author"":{""name"":""Stephan"",""email"":""5dd2b714e77158e70085a036dfec7245ce93d3aa@gmail.com""},""message"":""Merge branch 'master' of https://github.com/tensorflow/tensorflow into PR3"",""distinct"":true,""url"":""https://api.github.com/repos/subhayuroy/tensorflow/commits/763df9a3b796226836d4ddc9f4b89cd519e9847b""},{""sha"":""6f7da8e7714298cf35392f22319bbb83e3a67396"",""author"":{""name"":""Måns Nilsson"",""email"":""f429d3ebc62bd10906847170cf9cafede1026db8@arm.com""},""message"":""Merge remote-tracking branch origin/upstream/master"",""distinct"":true,""url"":""https://api.github.com/repos/subhayuroy/tensorflow/commits/6f7da8e7714298cf35392f22319bbb83e3a67396""},{""sha"":""3b6729c4259380168034335736de875f5d4e4751"",""author"":{""name"":""Måns Nilsson"",""email"":""f429d3ebc62bd10906847170cf9cafede1026db8@arm.com""},""message"":""Merge remote-tracking branch origin/upstream/master"",""distinct"":true,""url"":""https://api.github.com/repos/subhayuroy/tensorflow/commits/3b6729c4259380168034335736de875f5d4e4751""},{""sha"":""a63556a1671fd54b6b2b4db25da0386372c67b6c"",""author"":{""name"":""Stephan"",""email"":""5dd2b714e77158e70085a036dfec7245ce93d3aa@gmail.com""},""message"":""Merge branch 'master' of https://github.com/tensorflow/tensorflow into PR3"",""distinct"":true,""url"":""https://api.github.com/repos/subhayuroy/tensorflow/commits/a63556a1671fd54b6b2b4db25da0386372c67b6c""},{""sha"":""60c7be1cb67c8158e257e01d8c8330c303a22db6"",""author"":{""name"":""Måns Nilsson"",""email"":""f429d3ebc62bd10906847170cf9cafede1026db8@arm.com""},""message"":""TFLM: Fix squeeze kernel formatting"",""distinct"":true,""url"":""https://api.github.com/repos/subhayuroy/tensorflow/commits/60c7be1cb67c8158e257e01d8c8330c303a22db6""},{""sha"":""311f436f77b334f5462127d8cf179cce067969ca"",""author"":{""name"":""Marius Brehler"",""email"":""abd56436d8aebc844d7d6b7b8d888130526fdf6c@iml.fraunhofer.de""},""message"":""Adjust types of loop counters\n\nReduces some warnings about comparison of integers of different signs."",""distinct"":true,""url"":""https://api.github.com/repos/subhayuroy/tensorflow/commits/311f436f77b334f5462127d8cf179cce067969ca""},{""sha"":""a39a61c6e4ac2d6acf501d10139306d84d99e4a9"",""author"":{""name"":""Stephan"",""email"":""5dd2b714e77158e70085a036dfec7245ce93d3aa@gmail.com""},""message"":""Merged master and resolved conflicts"",""distinct"":true,""url"":""https://api.github.com/repos/subhayuroy/tensorflow/commits/a39a61c6e4ac2d6acf501d10139306d84d99e4a9""},{""sha"":""6f686584ff6c117fd6f1f7ad4360b7c78f69b2a1"",""author"":{""name"":""Omri Steiner"",""email"":""b189d1cbe86d37667d7b6375cec096d1066e7e93@insoundz.com""},""message"":""fix conjugate-transpose for matrices of certain sizes (issue #19200)"",""distinct"":true,""url"":""https://api.github.com/repos/subhayuroy/tensorflow/commits/6f686584ff6c117fd6f1f7ad4360b7c78f69b2a1""},{""sha"":""d3b2b5644c97d7f33a92857acc263b87b48436aa"",""author"":{""name"":""Stephan"",""email"":""5dd2b714e77158e70085a036dfec7245ce93d3aa@gmail.com""},""message"":""Merge branch 'master' of https://github.com/tensorflow/tensorflow into PR3"",""distinct"":true,""url"":""https://api.github.com/repos/subhayuroy/tensorflow/commits/d3b2b5644c97d7f33a92857acc263b87b48436aa""}]",,,,,,,,,,
15436656629,CreateEvent,true,2021-03-07 13:53:27.000000 UTC,60146426,SadxDarkness,345359414,SadxDarkness/react,,"""repository""","""user""",,,,,,,,,,,,,,
15436472875,CreateEvent,true,2021-03-07 13:11:14.000000 UTC,61084413,yksa,345344413,yksa/react,"""master""","""branch""","""user""",,,,,,,,,,,,,,
15436473439,PushEvent,true,2021-03-07 13:11:22.000000 UTC,74502149,RolandasSix,345337721,RolandasSix/react,"""refs/heads/master""",,,6659509077,1,1,"[{""sha"":""39227d1e7fb3b27f2c1d37c957b6166516b305f7"",""author"":{""name"":""Rolandas"",""email"":""772c238d29bd710ba36bf7fbce4b177c8ec5f674@users.noreply.github.com""},""message"":""Update .gitignore"",""distinct"":true,""url"":""https://api.github.com/repos/RolandasSix/react/commits/39227d1e7fb3b27f2c1d37c957b6166516b305f7""}]",,,,,,,,,,
15436673520,ForkEvent,true,2021-03-07 13:57:23.000000 UTC,2228834,akarazhev,10270250,facebook/react,,,,,,,,,,"""akarazhev/react""",,,,,,,
15436570191,ForkEvent,true,2021-03-07 13:33:28.000000 UTC,48912836,sromexs,10270250,facebook/react,,,,,,,,,,"""sromexs/react""",,,,,,,
15436437921,ForkEvent,true,2021-03-07 13:03:04.000000 UTC,58889432,everton-dgn,10270250,facebook/react,,,,,,,,,,"""everton-dgn/react""",,,,,,,
15436663799,IssueCommentEvent,true,2021-03-07 13:55:07.000000 UTC,78827,jnothman,843222,scikit-learn/scikit-learn,,,,,,,,"""created""",,,,,,,,,
15436439753,IssueCommentEvent,true,2021-03-07 13:03:28.000000 UTC,679350,diablodale,5108051,opencv/opencv,,,,,,,,"""created""",,,,,,,,,
15436664702,WatchEvent,true,2021-03-07 13:55:20.000000 UTC,50079521,tyuanyang,5108051,opencv/opencv,,,,,,,,"""started""",,,,,,,,,
15436504003,WatchEvent,true,2021-03-07 13:18:14.000000 UTC,53438635,affiqazrin,5108051,opencv/opencv,,,,,,,,"""started""",,,,,,,,,
15436637888,ForkEvent,true,2021-03-07 13:49:09.000000 UTC,80206395,dskeith,5108051,opencv/opencv,,,,,,,,,,"""dskeith/opencv""",,,,,,,
15436639121,IssuesEvent,true,2021-03-07 13:49:26.000000 UTC,67231977,Muhammadariesta,1352520,mdn/kuma,,,,,,,,"""opened""",,,,,,,,,
15436447961,WatchEvent,true,2021-03-07 13:05:23.000000 UTC,30991450,RENHAISHI,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15436467199,ForkEvent,true,2021-03-07 13:09:55.000000 UTC,30991450,RENHAISHI,45717250,tensorflow/tensorflow,,,,,,,,,,"""RENHAISHI/tensorflow""",,,,,,,
15436660695,WatchEvent,true,2021-03-07 13:54:24.000000 UTC,44777689,hieptran1812,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15436477265,IssueCommentEvent,true,2021-03-07 13:12:13.000000 UTC,48641743,researchofhemanth,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15436489255,WatchEvent,true,2021-03-07 13:14:57.000000 UTC,54549663,liza314,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15436442525,ForkEvent,true,2021-03-07 13:04:06.000000 UTC,68766971,yougithub1,45717250,tensorflow/tensorflow,,,,,,,,,,"""yougithub1/tensorflow""",,,,,,,
15436579066,ForkEvent,true,2021-03-07 13:35:30.000000 UTC,75583352,coqui-ai,45717250,tensorflow/tensorflow,,,,,,,,,,"""coqui-ai/tensorflow""",,,,,,,
15436442369,WatchEvent,true,2021-03-07 13:04:04.000000 UTC,35095726,YohanJhaveri,248295170,geist-org/react,,,,,,,,"""started""",,,,,,,,,
15436574673,CreateEvent,true,2021-03-07 13:34:30.000000 UTC,477142,reuben,345355253,coqui-ai/tensorflow,,"""repository""","""user""",,,,,,,,,,,,,,
15436595712,PushEvent,true,2021-03-07 13:39:26.000000 UTC,477142,reuben,345355493,coqui-ai/tensorflow,"""refs/heads/r2.3""",,,6659585979,4,4,"[{""sha"":""6fad14b203093e7a19301c4ef51a87fce71e38cb"",""author"":{""name"":""Alexandre Lissy"",""email"":""53711210c931d394cc01c0e04afd5dddfb3d7ac8@mozilla.com""},""message"":""Mozilla TensorFlow r2.3"",""distinct"":true,""url"":""https://api.github.com/repos/coqui-ai/tensorflow/commits/6fad14b203093e7a19301c4ef51a87fce71e38cb""},{""sha"":""4336a5b49fa6d650e24dbdba55bcef9581535244"",""author"":{""name"":""lissyx"",""email"":""f465f13e104201f26fe6b46a001eb8d61dbc125c@users.noreply.github.com""},""message"":""Merge pull request #123 from lissyx/r2.3+moz\n\nMozilla TensorFlow r2.3"",""distinct"":true,""url"":""https://api.github.com/repos/coqui-ai/tensorflow/commits/4336a5b49fa6d650e24dbdba55bcef9581535244""},{""sha"":""6dc2a1becfd1316eb4d77240133a548e93dbff63"",""author"":{""name"":""Bernardo Henz"",""email"":""c204f1ee83e63b19048b46f05c579089bd0f3e3c@gmail.com""},""message"":""Adding dependencies for layer normalization"",""distinct"":true,""url"":""https://api.github.com/repos/coqui-ai/tensorflow/commits/6dc2a1becfd1316eb4d77240133a548e93dbff63""},{""sha"":""23ad988fcde60fb01f9533e95004bbc4877a9143"",""author"":{""name"":""lissyx"",""email"":""f465f13e104201f26fe6b46a001eb8d61dbc125c@users.noreply.github.com""},""message"":""Merge pull request #124 from bernardohenz/layer-norm\n\nAdding dependencies for layer normalization"",""distinct"":true,""url"":""https://api.github.com/repos/coqui-ai/tensorflow/commits/23ad988fcde60fb01f9533e95004bbc4877a9143""}]",,,,,,,,,,
15436595794,PushEvent,true,2021-03-07 13:39:28.000000 UTC,477142,reuben,345355493,coqui-ai/tensorflow,"""refs/heads/r2.2""",,,6659586029,24,24,"[{""sha"":""7200135441b3c3f6ac4892edc11e37de2a3a04e7"",""author"":{""name"":""Alexandre Lissy"",""email"":""9bdd4e7c7490ab539cfdb963e649693284e07dfd@lissyx.dyndns.org""},""message"":""Use TensorFlow r2.2"",""distinct"":true,""url"":""https://api.github.com/repos/coqui-ai/tensorflow/commits/7200135441b3c3f6ac4892edc11e37de2a3a04e7""},{""sha"":""fc458fd78c09dd063f671520fd5a8f5c087e1ab3"",""author"":{""name"":""Alexandre Lissy"",""email"":""9bdd4e7c7490ab539cfdb963e649693284e07dfd@lissyx.dyndns.org""},""message"":""Cleanup macOS builds"",""distinct"":true,""url"":""https://api.github.com/repos/coqui-ai/tensorflow/commits/fc458fd78c09dd063f671520fd5a8f5c087e1ab3""},{""sha"":""ecde245ccc9383a589bb31ff8a2522794187afa3"",""author"":{""name"":""Alexandre Lissy"",""email"":""9bdd4e7c7490ab539cfdb963e649693284e07dfd@lissyx.dyndns.org""},""message"":""Disable non-required features"",""distinct"":true,""url"":""https://api.github.com/repos/coqui-ai/tensorflow/commits/ecde245ccc9383a589bb31ff8a2522794187afa3""},{""sha"":""9150ca195be7540f642624921b837179eb4b65c6"",""author"":{""name"":""Alexandre Lissy"",""email"":""9bdd4e7c7490ab539cfdb963e649693284e07dfd@lissyx.dyndns.org""},""message"":""Build TFLite with RUY GEMV"",""distinct"":true,""url"":""https://api.github.com/repos/coqui-ai/tensorflow/commits/9150ca195be7540f642624921b837179eb4b65c6""},{""sha"":""04c439d59c6e99e019a0dbef001d2ba31d7eef5f"",""author"":{""name"":""Alexandre Lissy"",""email"":""9bdd4e7c7490ab539cfdb963e649693284e07dfd@lissyx.dyndns.org""},""message"":""WIP: Disable convert_graphdef_memmapped_format"",""distinct"":true,""url"":""https://api.github.com/repos/coqui-ai/tensorflow/commits/04c439d59c6e99e019a0dbef001d2ba31d7eef5f""},{""sha"":""ddf74454fa0f04831dec875aa625b34eaf5966c9"",""author"":{""name"":""Alexandre Lissy"",""email"":""9bdd4e7c7490ab539cfdb963e649693284e07dfd@lissyx.dyndns.org""},""message"":""WIP: Bye bye numpy"",""distinct"":true,""url"":""https://api.github.com/repos/coqui-ai/tensorflow/commits/ddf74454fa0f04831dec875aa625b34eaf5966c9""},{""sha"":""cc3efead9c284e6b7a6a2bddb3e36879e1f30197"",""author"":{""name"":""Alexandre Lissy"",""email"":""9bdd4e7c7490ab539cfdb963e649693284e07dfd@lissyx.dyndns.org""},""message"":""WIP: Ensure more consistent build targets"",""distinct"":true,""url"":""https://api.github.com/repos/coqui-ai/tensorflow/commits/cc3efead9c284e6b7a6a2bddb3e36879e1f30197""},{""sha"":""c53555e739af90a330e25f08126e99ef4e2c5638"",""author"":{""name"":""Alexandre Lissy"",""email"":""9bdd4e7c7490ab539cfdb963e649693284e07dfd@lissyx.dyndns.org""},""message"":""Update toolchains / basesystems + CUDA"",""distinct"":true,""url"":""https://api.github.com/repos/coqui-ai/tensorflow/commits/c53555e739af90a330e25f08126e99ef4e2c5638""},{""sha"":""6f6b9241dfc6936c7c0a2a937da0c6a32a1c8135"",""author"":{""name"":""Alexandre Lissy"",""email"":""9bdd4e7c7490ab539cfdb963e649693284e07dfd@lissyx.dyndns.org""},""message"":""Update MSYS2"",""distinct"":true,""url"":""https://api.github.com/repos/coqui-ai/tensorflow/commits/6f6b9241dfc6936c7c0a2a937da0c6a32a1c8135""},{""sha"":""cfd407d08b406fcf6611976545525955b0c5e51c"",""author"":{""name"":""Alexandre Lissy"",""email"":""9bdd4e7c7490ab539cfdb963e649693284e07dfd@lissyx.dyndns.org""},""message"":""Update Homebrew"",""distinct"":true,""url"":""https://api.github.com/repos/coqui-ai/tensorflow/commits/cfd407d08b406fcf6611976545525955b0c5e51c""},{""sha"":""f1eb839f724c4d3a4bae1cb63fad898458d4dbca"",""author"":{""name"":""Alexandre Lissy"",""email"":""9bdd4e7c7490ab539cfdb963e649693284e07dfd@lissyx.dyndns.org""},""message"":""WIP: Fix invalid computations on ARMv7 / NodeJS"",""distinct"":true,""url"":""https://api.github.com/repos/coqui-ai/tensorflow/commits/f1eb839f724c4d3a4bae1cb63fad898458d4dbca""},{""sha"":""c29895fba1b9f9f48e2e54eefb024c69aa333473"",""author"":{""name"":""lissyx"",""email"":""f465f13e104201f26fe6b46a001eb8d61dbc125c@users.noreply.github.com""},""message"":""Merge pull request #116 from lissyx/r2.2-deepspeech\n\nUse TensorFlow r2.2"",""distinct"":true,""url"":""https://api.github.com/repos/coqui-ai/tensorflow/commits/c29895fba1b9f9f48e2e54eefb024c69aa333473""},{""sha"":""f1f3ac2bf9ef422f88a8b515ccea5df49c353257"",""author"":{""name"":""Alexandre Lissy"",""email"":""9bdd4e7c7490ab539cfdb963e649693284e07dfd@lissyx.dyndns.org""},""message"":""Prepare TensorFlow for submodule usage"",""distinct"":true,""url"":""https://api.github.com/repos/coqui-ai/tensorflow/commits/f1f3ac2bf9ef422f88a8b515ccea5df49c353257""},{""sha"":""7ead55807a2ded84c107720ebca61e6285e2c239"",""author"":{""name"":""lissyx"",""email"":""f465f13e104201f26fe6b46a001eb8d61dbc125c@users.noreply.github.com""},""message"":""Merge pull request #118 from lissyx/r2.2-submodule\n\nPrepare TensorFlow for submodule usage"",""distinct"":true,""url"":""https://api.github.com/repos/coqui-ai/tensorflow/commits/7ead55807a2ded84c107720ebca61e6285e2c239""},{""sha"":""518c1d04bf55d362bb11e973b8f5d0aa3e5bf44d"",""author"":{""name"":""Reuben Morais"",""email"":""22de9013331335f76e9b0b715ee861fbbd65603e@gmail.com""},""message"":""Add rules to use Boost libraries"",""distinct"":true,""url"":""https://api.github.com/repos/coqui-ai/tensorflow/commits/518c1d04bf55d362bb11e973b8f5d0aa3e5bf44d""},{""sha"":""fc464111ac5c49791e44122e5946e521b25840bd"",""author"":{""name"":""Reuben Morais"",""email"":""22de9013331335f76e9b0b715ee861fbbd65603e@gmail.com""},""message"":""Disable -soname linker parameter on iOS"",""distinct"":true,""url"":""https://api.github.com/repos/coqui-ai/tensorflow/commits/fc464111ac5c49791e44122e5946e521b25840bd""},{""sha"":""0854bb5188a3150a4d75a1c71ee610b0d45cfcb1"",""author"":{""name"":""Reuben Morais"",""email"":""22de9013331335f76e9b0b715ee861fbbd65603e@gmail.com""},""message"":""Omit incompatible linker options in iOS builds"",""distinct"":true,""url"":""https://api.github.com/repos/coqui-ai/tensorflow/commits/0854bb5188a3150a4d75a1c71ee610b0d45cfcb1""},{""sha"":""2a7ed17b9fa8c57ae1931d2d9307dc4a5d698996"",""author"":{""name"":""Alexandre Lissy"",""email"":""9bdd4e7c7490ab539cfdb963e649693284e07dfd@lissyx.dyndns.org""},""message"":""Fix #3207: do not force -shared on the linkage"",""distinct"":true,""url"":""https://api.github.com/repos/coqui-ai/tensorflow/commits/2a7ed17b9fa8c57ae1931d2d9307dc4a5d698996""},{""sha"":""f2f881a0ef23f25278ff3189d4a57e477af9e1c5"",""author"":{""name"":""lissyx"",""email"":""f465f13e104201f26fe6b46a001eb8d61dbc125c@users.noreply.github.com""},""message"":""Merge pull request #120 from lissyx/fix-linker\n\nFix #3207: do not force -shared on the linkage"",""distinct"":true,""url"":""https://api.github.com/repos/coqui-ai/tensorflow/commits/f2f881a0ef23f25278ff3189d4a57e477af9e1c5""},{""sha"":""56d94e69e151fed647e798c5c9168f87e1a83b7f"",""author"":{""name"":""Alexandre Lissy"",""email"":""9bdd4e7c7490ab539cfdb963e649693284e07dfd@lissyx.dyndns.org""},""message"":""Revert \""Merge pull request #120 from lissyx/fix-linker\""\n\nThis reverts commit f2f881a0ef23f25278ff3189d4a57e477af9e1c5, reversing\nchanges made to 518c1d04bf55d362bb11e973b8f5d0aa3e5bf44d."",""distinct"":true,""url"":""https://api.github.com/repos/coqui-ai/tensorflow/commits/56d94e69e151fed647e798c5c9168f87e1a83b7f""}]",,,,,,,,,,
15436598084,PushEvent,true,2021-03-07 13:39:59.000000 UTC,477142,reuben,345355493,coqui-ai/tensorflow,"""refs/heads/r2.4""",,,6659587428,0,0,[],,,,,,,,,,
15438732174,PushEvent,true,2021-03-07 21:27:10.000000 UTC,446130,lhofhansl,344250470,lhofhansl/phoenix,"""refs/heads/6402""",,,6660920888,1,1,"[{""sha"":""8a100d1972c78a335412b3be4284e96947151e9e"",""author"":{""name"":""Lars"",""email"":""8f86d20c2155d741e73d969ae07b3fbe5d2f8a03@apache.org""},""message"":""PHOENIX-6402 Allow using local indexes with uncovered columns in the WHERE clause."",""distinct"":true,""url"":""https://api.github.com/repos/lhofhansl/phoenix/commits/8a100d1972c78a335412b3be4284e96947151e9e""}]",,,,,,,,,,
15438783050,IssuesEvent,true,2021-03-07 21:39:03.000000 UTC,781074,odan,49452611,lulco/phoenix,,,,,,,,"""closed""",,,,,,,,,
15438807115,CreateEvent,true,2021-03-07 21:44:46.000000 UTC,800611,brukshut,130750793,brukshut/terraform,"""feature/route53-module-upgrade""","""branch""","""user""",,,,,,,,,,,,,,
15438643685,PullRequestEvent,true,2021-03-07 21:07:20.000000 UTC,1027024,penx,83466664,penx/react,,,,,,,,"""opened""",27,,,,,,,,
15438644223,PushEvent,true,2021-03-07 21:07:27.000000 UTC,1027024,penx,83466664,penx/react,"""refs/heads/snyk-fix-43e0b6252fa2c4875a37419d67305bd8""",,,6660867065,1,1,"[{""sha"":""cb16e46ce32e3d242e0c300d451fb1ab5c1f478e"",""author"":{""name"":""snyk-bot"",""email"":""6524ae312692b75c8ed05087d0aa3c757ac39348@snyk.io""},""message"":""fix: examples/basic-commonjs/package.json to reduce vulnerabilities\n\nThe following vulnerabilities are fixed with an upgrade:\n- https://snyk.io/vuln/SNYK-JS-GLOBPARENT-1016905"",""distinct"":true,""url"":""https://api.github.com/repos/penx/react/commits/cb16e46ce32e3d242e0c300d451fb1ab5c1f478e""}]",,,,,,,,,,
15438644233,CreateEvent,true,2021-03-07 21:07:27.000000 UTC,1027024,penx,83466664,penx/react,"""snyk-fix-43e0b6252fa2c4875a37419d67305bd8""","""branch""","""user""",,,,,,,,,,,,,,
15438724463,PullRequestEvent,true,2021-03-07 21:25:25.000000 UTC,1058663,UbuntuEvangelist,93318917,UbuntuEvangelist/react,,,,,,,,"""opened""",31,,,,,,,,
15438725196,PushEvent,true,2021-03-07 21:25:34.000000 UTC,1058663,UbuntuEvangelist,93318917,UbuntuEvangelist/react,"""refs/heads/snyk-fix-4407f8a04fd31c30a6d1dad8b2c06f8d""",,,6660916465,1,1,"[{""sha"":""b168886e5d973af8b8b8995f7a91f435c4f4e0ca"",""author"":{""name"":""snyk-bot"",""email"":""6524ae312692b75c8ed05087d0aa3c757ac39348@snyk.io""},""message"":""fix: fixtures/packaging/webpack/prod/package.json to reduce vulnerabilities\n\nThe following vulnerabilities are fixed with an upgrade:\n- https://snyk.io/vuln/SNYK-JS-GLOBPARENT-1016905"",""distinct"":true,""url"":""https://api.github.com/repos/UbuntuEvangelist/react/commits/b168886e5d973af8b8b8995f7a91f435c4f4e0ca""}]",,,,,,,,,,
15438725211,CreateEvent,true,2021-03-07 21:25:35.000000 UTC,1058663,UbuntuEvangelist,93318917,UbuntuEvangelist/react,"""snyk-fix-4407f8a04fd31c30a6d1dad8b2c06f8d""","""branch""","""user""",,,,,,,,,,,,,,
15438848742,PushEvent,true,2021-03-07 21:54:47.000000 UTC,1257990,acolley,269168895,acolley/phoenix,"""refs/heads/feature/cluster""",,,6660992617,1,1,"[{""sha"":""bf1a289f49924b6c47aa596574f95af3411e57c5"",""author"":{""name"":""osboxes.org"",""email"":""86718629f68cec5e1971b18f260197290b668c7c@localhost.localdomain""},""message"":""checkpoint"",""distinct"":true,""url"":""https://api.github.com/repos/acolley/phoenix/commits/bf1a289f49924b6c47aa596574f95af3411e57c5""}]",,,,,,,,,,
15438615173,PushEvent,true,2021-03-07 21:01:08.000000 UTC,12224985,chaowenGUO,295334863,chaowenGUO/tensorflow,"""refs/heads/master""",,,6660849292,1,1,"[{""sha"":""27f6320c652775e9d4013400e7fe2df67ffb507e"",""author"":{""name"":""chaowen guo"",""email"":""1c5b642634d6b3db81fee0eb82faf85722c920e9@gmail.com""},""message"":""Delete saved_model.pb"",""distinct"":true,""url"":""https://api.github.com/repos/chaowenGUO/tensorflow/commits/27f6320c652775e9d4013400e7fe2df67ffb507e""}]",,,,,,,,,,
15438615702,PushEvent,true,2021-03-07 21:01:15.000000 UTC,12224985,chaowenGUO,295334863,chaowenGUO/tensorflow,"""refs/heads/master""",,,6660849628,1,1,"[{""sha"":""43f31ca975118232881de44e10079ae917acc650"",""author"":{""name"":""chaowen guo"",""email"":""1c5b642634d6b3db81fee0eb82faf85722c920e9@gmail.com""},""message"":""Delete variables.index"",""distinct"":true,""url"":""https://api.github.com/repos/chaowenGUO/tensorflow/commits/43f31ca975118232881de44e10079ae917acc650""}]",,,,,,,,,,
15438616092,PushEvent,true,2021-03-07 21:01:20.000000 UTC,12224985,chaowenGUO,295334863,chaowenGUO/tensorflow,"""refs/heads/master""",,,6660849871,1,1,"[{""sha"":""03a13f8e8fd3228130e8e5c97ade565e06aeada0"",""author"":{""name"":""chaowen guo"",""email"":""1c5b642634d6b3db81fee0eb82faf85722c920e9@gmail.com""},""message"":""Delete variables.data-00000-of-00001"",""distinct"":true,""url"":""https://api.github.com/repos/chaowenGUO/tensorflow/commits/03a13f8e8fd3228130e8e5c97ade565e06aeada0""}]",,,,,,,,,,
15438625213,PushEvent,true,2021-03-07 21:03:20.000000 UTC,12224985,chaowenGUO,295334863,chaowenGUO/tensorflow,"""refs/heads/master""",,,6660855497,1,1,"[{""sha"":""bc5831d47af8c6973d841f8febedf9a7e945ae6f"",""author"":{""name"":""dummy"",""email"":""66c0c4ea9a244fbffccce99bc7963e1619b678e1""},""message"":"""",""distinct"":true,""url"":""https://api.github.com/repos/chaowenGUO/tensorflow/commits/bc5831d47af8c6973d841f8febedf9a7e945ae6f""}]",,,,,,,,,,
15438650612,PushEvent,true,2021-03-07 21:08:55.000000 UTC,12224985,chaowenGUO,295334863,chaowenGUO/tensorflow,"""refs/heads/master""",,,6660870957,1,1,"[{""sha"":""f78c41747b4ef5aea9d49c890d4517ed4034d520"",""author"":{""name"":""chaowen guo"",""email"":""1c5b642634d6b3db81fee0eb82faf85722c920e9@gmail.com""},""message"":""Update README.md"",""distinct"":true,""url"":""https://api.github.com/repos/chaowenGUO/tensorflow/commits/f78c41747b4ef5aea9d49c890d4517ed4034d520""}]",,,,,,,,,,
15438653086,PushEvent,true,2021-03-07 21:09:29.000000 UTC,12224985,chaowenGUO,295334863,chaowenGUO/tensorflow,"""refs/heads/master""",,,6660872520,1,1,"[{""sha"":""d32f6cedf88c025d027c4b1c63883c88a3ac72e4"",""author"":{""name"":""dummy"",""email"":""66c0c4ea9a244fbffccce99bc7963e1619b678e1""},""message"":"""",""distinct"":true,""url"":""https://api.github.com/repos/chaowenGUO/tensorflow/commits/d32f6cedf88c025d027c4b1c63883c88a3ac72e4""}]",,,,,,,,,,
15438788467,PullRequestEvent,true,2021-03-07 21:40:16.000000 UTC,12866748,akiramitsu,137795317,akiramitsu/react,,,,,,,,"""opened""",52,,,,,,,,
15438788582,CreateEvent,true,2021-03-07 21:40:18.000000 UTC,12866748,akiramitsu,137795317,akiramitsu/react,"""snyk-fix-b1bb7b1acf72160ec974ac2180ed70e9""","""branch""","""user""",,,,,,,,,,,,,,
15438788598,PushEvent,true,2021-03-07 21:40:18.000000 UTC,12866748,akiramitsu,137795317,akiramitsu/react,"""refs/heads/snyk-fix-b1bb7b1acf72160ec974ac2180ed70e9""",,,6660955897,1,1,"[{""sha"":""893fcb8c26fbca44bfd522f2f0d11c6676841199"",""author"":{""name"":""snyk-bot"",""email"":""6524ae312692b75c8ed05087d0aa3c757ac39348@snyk.io""},""message"":""fix: fixtures/packaging/webpack-alias/dev/package.json & fixtures/packaging/webpack-alias/dev/yarn.lock to reduce vulnerabilities\n\nThe following vulnerabilities are fixed with an upgrade:\n- https://snyk.io/vuln/SNYK-JS-GLOBPARENT-1016905"",""distinct"":true,""url"":""https://api.github.com/repos/akiramitsu/react/commits/893fcb8c26fbca44bfd522f2f0d11c6676841199""}]",,,,,,,,,,
15438826047,CreateEvent,true,2021-03-07 21:49:22.000000 UTC,25825341,kaverakoma,345460864,kaverakoma/react,,"""repository""","""user""",,,,,,,,,,,,,,
15438826088,CreateEvent,true,2021-03-07 21:49:22.000000 UTC,25825341,kaverakoma,345460864,kaverakoma/react,"""main""","""branch""","""user""",,,,,,,,,,,,,,
15438855046,CreateEvent,true,2021-03-07 21:56:18.000000 UTC,25825341,kaverakoma,345460864,kaverakoma/react,"""master""","""branch""","""user""",,,,,,,,,,,,,,
15438866830,CommitCommentEvent,true,2021-03-07 21:59:12.000000 UTC,25825341,kaverakoma,345460864,kaverakoma/react,,,,,,,,,,,,,,,,,
15438777556,PullRequestEvent,true,2021-03-07 21:37:48.000000 UTC,32247030,baophucct,149918416,baophucct/react,,,,,,,,"""opened""",41,,,,,,,,
15438777686,PushEvent,true,2021-03-07 21:37:50.000000 UTC,32247030,baophucct,149918416,baophucct/react,"""refs/heads/snyk-fix-01eb2e104121c359b40b96c9b2f5f54b""",,,6660949120,1,1,"[{""sha"":""c104035f5802670444783ad109c7d75cca7b45e3"",""author"":{""name"":""snyk-bot"",""email"":""6524ae312692b75c8ed05087d0aa3c757ac39348@snyk.io""},""message"":""fix: fixtures/packaging/webpack-alias/prod/package.json & fixtures/packaging/webpack-alias/prod/yarn.lock to reduce vulnerabilities\n\nThe following vulnerabilities are fixed with an upgrade:\n- https://snyk.io/vuln/SNYK-JS-GLOBPARENT-1016905"",""distinct"":true,""url"":""https://api.github.com/repos/baophucct/react/commits/c104035f5802670444783ad109c7d75cca7b45e3""}]",,,,,,,,,,
15438777702,CreateEvent,true,2021-03-07 21:37:50.000000 UTC,32247030,baophucct,149918416,baophucct/react,"""snyk-fix-01eb2e104121c359b40b96c9b2f5f54b""","""branch""","""user""",,,,,,,,,,,,,,
15438811641,CreateEvent,true,2021-03-07 21:45:50.000000 UTC,33604446,cuongdevjs,210651639,cuongdevjs/react,"""snyk-fix-ec527e326194f43962948bbbf992e218""","""branch""","""user""",,,,,,,,,,,,,,
15438811703,PushEvent,true,2021-03-07 21:45:51.000000 UTC,33604446,cuongdevjs,210651639,cuongdevjs/react,"""refs/heads/snyk-fix-ec527e326194f43962948bbbf992e218""",,,6660970011,1,1,"[{""sha"":""eca7242c002f54dc78e06a4faf9577213dc01a8f"",""author"":{""name"":""snyk-bot"",""email"":""6524ae312692b75c8ed05087d0aa3c757ac39348@snyk.io""},""message"":""fix: ch9/weather/package.json to reduce vulnerabilities\n\nThe following vulnerabilities are fixed with an upgrade:\n- https://snyk.io/vuln/SNYK-JS-GLOBPARENT-1016905"",""distinct"":true,""url"":""https://api.github.com/repos/cuongdevjs/react/commits/eca7242c002f54dc78e06a4faf9577213dc01a8f""}]",,,,,,,,,,
15438811723,PullRequestEvent,true,2021-03-07 21:45:51.000000 UTC,33604446,cuongdevjs,210651639,cuongdevjs/react,,,,,,,,"""opened""",33,,,,,,,,
15438675290,PullRequestEvent,true,2021-03-07 21:14:23.000000 UTC,35755639,Matthelonianxl,215675087,Matthelonianxl/react,,,,,,,,"""opened""",77,,,,,,,,
15438675896,CreateEvent,true,2021-03-07 21:14:31.000000 UTC,35755639,Matthelonianxl,215675087,Matthelonianxl/react,"""snyk-fix-28ca5794796426aba6ebf7bb9b4161c3""","""branch""","""user""",,,,,,,,,,,,,,
15438675903,PushEvent,true,2021-03-07 21:14:31.000000 UTC,35755639,Matthelonianxl,215675087,Matthelonianxl/react,"""refs/heads/snyk-fix-28ca5794796426aba6ebf7bb9b4161c3""",,,6660886420,1,1,"[{""sha"":""ca39c94705eb957f78e66ce6b4a69926ece087ea"",""author"":{""name"":""snyk-bot"",""email"":""6524ae312692b75c8ed05087d0aa3c757ac39348@snyk.io""},""message"":""fix: fixtures/packaging/webpack/prod/package.json & fixtures/packaging/webpack/prod/yarn.lock to reduce vulnerabilities\n\nThe following vulnerabilities are fixed with an upgrade:\n- https://snyk.io/vuln/SNYK-JS-GLOBPARENT-1016905"",""distinct"":true,""url"":""https://api.github.com/repos/Matthelonianxl/react/commits/ca39c94705eb957f78e66ce6b4a69926ece087ea""}]",,,,,,,,,,
15438808918,PullRequestEvent,true,2021-03-07 21:45:11.000000 UTC,38401724,sirinartk,213794072,sirinartk/react,,,,,,,,"""opened""",64,,,,,,,,
15438809263,PushEvent,true,2021-03-07 21:45:16.000000 UTC,38401724,sirinartk,213794072,sirinartk/react,"""refs/heads/snyk-fix-012cc9d54783b5645999e52ad6d1334a""",,,6660968535,1,1,"[{""sha"":""f187d35a16e6cd185bd3488e42fe1ce09aa8fc10"",""author"":{""name"":""snyk-bot"",""email"":""6524ae312692b75c8ed05087d0aa3c757ac39348@snyk.io""},""message"":""fix: fixtures/packaging/webpack/dev/package.json & fixtures/packaging/webpack/dev/yarn.lock to reduce vulnerabilities\n\nThe following vulnerabilities are fixed with an upgrade:\n- https://snyk.io/vuln/SNYK-JS-GLOBPARENT-1016905"",""distinct"":true,""url"":""https://api.github.com/repos/sirinartk/react/commits/f187d35a16e6cd185bd3488e42fe1ce09aa8fc10""}]",,,,,,,,,,
15438809280,CreateEvent,true,2021-03-07 21:45:16.000000 UTC,38401724,sirinartk,213794072,sirinartk/react,"""snyk-fix-012cc9d54783b5645999e52ad6d1334a""","""branch""","""user""",,,,,,,,,,,,,,
15438612798,PullRequestEvent,true,2021-03-07 21:00:40.000000 UTC,39814207,pull[bot],159132812,mark0725/tensorflow,,,,,,,,"""opened""",8183,,,,,,,,
15438630499,PushEvent,true,2021-03-07 21:04:28.000000 UTC,39814207,pull[bot],114650042,JochLAin/react,"""refs/heads/master""",,,6660858688,1,1,"[{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/JochLAin/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""}]",,,,,,,,,,
15438630529,PullRequestEvent,true,2021-03-07 21:04:28.000000 UTC,39814207,pull[bot],114650042,JochLAin/react,,,,,,,,"""closed""",182,,,,,,,,
15438642777,PushEvent,true,2021-03-07 21:07:08.000000 UTC,39814207,pull[bot],222435850,clunietp/opencv,"""refs/heads/3.4""",,,6660866152,1,1,"[{""sha"":""31f66766b7b179f67fa81e3f489a0a3f2a9a3437"",""author"":{""name"":""Dan Ben-Yosef"",""email"":""ea4c825ba4b366e28cc98b8221918d50819bef4d@gmail.com""},""message"":""Merge pull request #19685 from danbey:setting_stereoBMImpl_in_init_list\n\nInit params (StereoBMParams) in StereoBMImpl constructor initialization list\r\n\r\n* Init StereoBMImpl in initialization list\r\n\r\nTo improve preformence it is better to init the params (StereoBMImpl) in the\r\ninitialization list.\r\n\r\n* coding style\r\n\r\n* drop useless copy/move ctor\r\n\r\nCo-authored-by: Alexander Alekhin <alexander.a.alekhin@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/clunietp/opencv/commits/31f66766b7b179f67fa81e3f489a0a3f2a9a3437""}]",,,,,,,,,,
15438642825,PullRequestEvent,true,2021-03-07 21:07:08.000000 UTC,39814207,pull[bot],222435850,clunietp/opencv,,,,,,,,"""closed""",1051,,,,,,,,
15438647019,PushEvent,true,2021-03-07 21:08:06.000000 UTC,39814207,pull[bot],279894716,KaycoinsInc/react,"""refs/heads/master""",,,6660868766,1,1,"[{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/KaycoinsInc/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""}]",,,,,,,,,,
15438647067,PullRequestEvent,true,2021-03-07 21:08:07.000000 UTC,39814207,pull[bot],279894716,KaycoinsInc/react,,,,,,,,"""closed""",17,,,,,,,,
15438651295,PushEvent,true,2021-03-07 21:09:05.000000 UTC,39814207,pull[bot],56189869,xiaohanhuang/tensorflow,"""refs/heads/master""",,,6660871357,2,2,"[{""sha"":""6613bf0887142ae7f141bbc00d8cb3d791fdd1a4"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Fix stride mismatch propagation bug across convolutions\n\nPiperOrigin-RevId: 361429642\nChange-Id: I40e18cd9c2ce9750e1949b16f90e7182a682dd0f"",""distinct"":true,""url"":""https://api.github.com/repos/xiaohanhuang/tensorflow/commits/6613bf0887142ae7f141bbc00d8cb3d791fdd1a4""},{""sha"":""efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7"",""author"":{""name"":""Peter Hawkins"",""email"":""34b19541630131950b5f204f2c5f2c647a3a7475@google.com""},""message"":""[XLA:Python] Split DevicePut out of `jax_jit` and refactor it.\n\n* Creates a new py_values.cc/h file to contain device_put.\n* Moves some of the type helpers into the existing types module.\n* Change `PyClient::BufferFromPyval` to call DevicePut. There's no reason to have two similar but subtly different methods for copying a buffer-like object to a device.\n* Refactor and optimize some of the handler functions. In particular, avoid creating a number of unnecessary intermediate objects.\n\nPiperOrigin-RevId: 361430648\nChange-Id: I56b056eb8f0fde20b2f65170fcbf9530cd97d12b"",""distinct"":true,""url"":""https://api.github.com/repos/xiaohanhuang/tensorflow/commits/efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7""}]",,,,,,,,,,
15438651325,PullRequestEvent,true,2021-03-07 21:09:05.000000 UTC,39814207,pull[bot],56189869,xiaohanhuang/tensorflow,,,,,,,,"""closed""",2096,,,,,,,,
15438681040,PushEvent,true,2021-03-07 21:15:39.000000 UTC,39814207,pull[bot],146377921,Rachelmorrell/react,"""refs/heads/master""",,,6660889601,1,1,"[{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/Rachelmorrell/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""}]",,,,,,,,,,
15438681080,PullRequestEvent,true,2021-03-07 21:15:40.000000 UTC,39814207,pull[bot],146377921,Rachelmorrell/react,,,,,,,,"""closed""",901,,,,,,,,
15438686843,PullRequestEvent,true,2021-03-07 21:16:56.000000 UTC,39814207,pull[bot],211211919,Mu-L/tensorflow,,,,,,,,"""opened""",1256,,,,,,,,
15438700123,PushEvent,true,2021-03-07 21:19:57.000000 UTC,39814207,pull[bot],302953642,TheAssassinRen/tensorflow,"""refs/heads/master""",,,6660901172,2,2,"[{""sha"":""6613bf0887142ae7f141bbc00d8cb3d791fdd1a4"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Fix stride mismatch propagation bug across convolutions\n\nPiperOrigin-RevId: 361429642\nChange-Id: I40e18cd9c2ce9750e1949b16f90e7182a682dd0f"",""distinct"":true,""url"":""https://api.github.com/repos/TheAssassinRen/tensorflow/commits/6613bf0887142ae7f141bbc00d8cb3d791fdd1a4""},{""sha"":""efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7"",""author"":{""name"":""Peter Hawkins"",""email"":""34b19541630131950b5f204f2c5f2c647a3a7475@google.com""},""message"":""[XLA:Python] Split DevicePut out of `jax_jit` and refactor it.\n\n* Creates a new py_values.cc/h file to contain device_put.\n* Moves some of the type helpers into the existing types module.\n* Change `PyClient::BufferFromPyval` to call DevicePut. There's no reason to have two similar but subtly different methods for copying a buffer-like object to a device.\n* Refactor and optimize some of the handler functions. In particular, avoid creating a number of unnecessary intermediate objects.\n\nPiperOrigin-RevId: 361430648\nChange-Id: I56b056eb8f0fde20b2f65170fcbf9530cd97d12b"",""distinct"":true,""url"":""https://api.github.com/repos/TheAssassinRen/tensorflow/commits/efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7""}]",,,,,,,,,,
15438700161,PullRequestEvent,true,2021-03-07 21:19:58.000000 UTC,39814207,pull[bot],302953642,TheAssassinRen/tensorflow,,,,,,,,"""closed""",507,,,,,,,,
15438704409,PushEvent,true,2021-03-07 21:20:54.000000 UTC,39814207,pull[bot],233268851,Manas1820/tensorflow,"""refs/heads/master""",,,6660903795,2,2,"[{""sha"":""6613bf0887142ae7f141bbc00d8cb3d791fdd1a4"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Fix stride mismatch propagation bug across convolutions\n\nPiperOrigin-RevId: 361429642\nChange-Id: I40e18cd9c2ce9750e1949b16f90e7182a682dd0f"",""distinct"":true,""url"":""https://api.github.com/repos/Manas1820/tensorflow/commits/6613bf0887142ae7f141bbc00d8cb3d791fdd1a4""},{""sha"":""efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7"",""author"":{""name"":""Peter Hawkins"",""email"":""34b19541630131950b5f204f2c5f2c647a3a7475@google.com""},""message"":""[XLA:Python] Split DevicePut out of `jax_jit` and refactor it.\n\n* Creates a new py_values.cc/h file to contain device_put.\n* Moves some of the type helpers into the existing types module.\n* Change `PyClient::BufferFromPyval` to call DevicePut. There's no reason to have two similar but subtly different methods for copying a buffer-like object to a device.\n* Refactor and optimize some of the handler functions. In particular, avoid creating a number of unnecessary intermediate objects.\n\nPiperOrigin-RevId: 361430648\nChange-Id: I56b056eb8f0fde20b2f65170fcbf9530cd97d12b"",""distinct"":true,""url"":""https://api.github.com/repos/Manas1820/tensorflow/commits/efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7""}]",,,,,,,,,,
15438704437,PullRequestEvent,true,2021-03-07 21:20:54.000000 UTC,39814207,pull[bot],233268851,Manas1820/tensorflow,,,,,,,,"""closed""",841,,,,,,,,
15438745687,PushEvent,true,2021-03-07 21:30:26.000000 UTC,39814207,pull[bot],113451460,JCofman/react,"""refs/heads/master""",,,6660929374,1,1,"[{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/JCofman/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""}]",,,,,,,,,,
15438745730,PullRequestEvent,true,2021-03-07 21:30:26.000000 UTC,39814207,pull[bot],113451460,JCofman/react,,,,,,,,"""closed""",393,,,,,,,,
15438755651,PushEvent,true,2021-03-07 21:32:39.000000 UTC,39814207,pull[bot],49518776,SimenB/react,"""refs/heads/master""",,,6660935579,1,1,"[{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/SimenB/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""}]",,,,,,,,,,
15438755683,PullRequestEvent,true,2021-03-07 21:32:39.000000 UTC,39814207,pull[bot],49518776,SimenB/react,,,,,,,,"""closed""",1493,,,,,,,,
15438755815,PushEvent,true,2021-03-07 21:32:42.000000 UTC,39814207,pull[bot],228097715,njzjz/tensorflow,"""refs/heads/master""",,,6660935676,2,2,"[{""sha"":""6613bf0887142ae7f141bbc00d8cb3d791fdd1a4"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Fix stride mismatch propagation bug across convolutions\n\nPiperOrigin-RevId: 361429642\nChange-Id: I40e18cd9c2ce9750e1949b16f90e7182a682dd0f"",""distinct"":true,""url"":""https://api.github.com/repos/njzjz/tensorflow/commits/6613bf0887142ae7f141bbc00d8cb3d791fdd1a4""},{""sha"":""efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7"",""author"":{""name"":""Peter Hawkins"",""email"":""34b19541630131950b5f204f2c5f2c647a3a7475@google.com""},""message"":""[XLA:Python] Split DevicePut out of `jax_jit` and refactor it.\n\n* Creates a new py_values.cc/h file to contain device_put.\n* Moves some of the type helpers into the existing types module.\n* Change `PyClient::BufferFromPyval` to call DevicePut. There's no reason to have two similar but subtly different methods for copying a buffer-like object to a device.\n* Refactor and optimize some of the handler functions. In particular, avoid creating a number of unnecessary intermediate objects.\n\nPiperOrigin-RevId: 361430648\nChange-Id: I56b056eb8f0fde20b2f65170fcbf9530cd97d12b"",""distinct"":true,""url"":""https://api.github.com/repos/njzjz/tensorflow/commits/efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7""}]",,,,,,,,,,
15438755863,PullRequestEvent,true,2021-03-07 21:32:42.000000 UTC,39814207,pull[bot],228097715,njzjz/tensorflow,,,,,,,,"""closed""",1746,,,,,,,,
15438759748,PushEvent,true,2021-03-07 21:33:34.000000 UTC,39814207,pull[bot],195336714,db-apps/react,"""refs/heads/master""",,,6660938063,1,1,"[{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/db-apps/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""}]",,,,,,,,,,
15438759772,PullRequestEvent,true,2021-03-07 21:33:34.000000 UTC,39814207,pull[bot],195336714,db-apps/react,,,,,,,,"""closed""",1095,,,,,,,,
15438764764,PushEvent,true,2021-03-07 21:34:46.000000 UTC,39814207,pull[bot],142352962,chanhong/react,"""refs/heads/master""",,,6660941130,1,1,"[{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/chanhong/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""}]",,,,,,,,,,
15438764806,PullRequestEvent,true,2021-03-07 21:34:46.000000 UTC,39814207,pull[bot],142352962,chanhong/react,,,,,,,,"""closed""",4,,,,,,,,
15438779175,PushEvent,true,2021-03-07 21:38:09.000000 UTC,39814207,pull[bot],174166640,Cache-Cloud/tensorflow,"""refs/heads/master""",,,6660950032,2,2,"[{""sha"":""6613bf0887142ae7f141bbc00d8cb3d791fdd1a4"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Fix stride mismatch propagation bug across convolutions\n\nPiperOrigin-RevId: 361429642\nChange-Id: I40e18cd9c2ce9750e1949b16f90e7182a682dd0f"",""distinct"":true,""url"":""https://api.github.com/repos/Cache-Cloud/tensorflow/commits/6613bf0887142ae7f141bbc00d8cb3d791fdd1a4""},{""sha"":""efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7"",""author"":{""name"":""Peter Hawkins"",""email"":""34b19541630131950b5f204f2c5f2c647a3a7475@google.com""},""message"":""[XLA:Python] Split DevicePut out of `jax_jit` and refactor it.\n\n* Creates a new py_values.cc/h file to contain device_put.\n* Moves some of the type helpers into the existing types module.\n* Change `PyClient::BufferFromPyval` to call DevicePut. There's no reason to have two similar but subtly different methods for copying a buffer-like object to a device.\n* Refactor and optimize some of the handler functions. In particular, avoid creating a number of unnecessary intermediate objects.\n\nPiperOrigin-RevId: 361430648\nChange-Id: I56b056eb8f0fde20b2f65170fcbf9530cd97d12b"",""distinct"":true,""url"":""https://api.github.com/repos/Cache-Cloud/tensorflow/commits/efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7""}]",,,,,,,,,,
15438779201,PullRequestEvent,true,2021-03-07 21:38:09.000000 UTC,39814207,pull[bot],174166640,Cache-Cloud/tensorflow,,,,,,,,"""closed""",6981,,,,,,,,
15438799924,PushEvent,true,2021-03-07 21:43:00.000000 UTC,39814207,pull[bot],179607331,isanjit3/tensorflow,"""refs/heads/master""",,,6660962831,2,2,"[{""sha"":""6613bf0887142ae7f141bbc00d8cb3d791fdd1a4"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Fix stride mismatch propagation bug across convolutions\n\nPiperOrigin-RevId: 361429642\nChange-Id: I40e18cd9c2ce9750e1949b16f90e7182a682dd0f"",""distinct"":true,""url"":""https://api.github.com/repos/isanjit3/tensorflow/commits/6613bf0887142ae7f141bbc00d8cb3d791fdd1a4""},{""sha"":""efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7"",""author"":{""name"":""Peter Hawkins"",""email"":""34b19541630131950b5f204f2c5f2c647a3a7475@google.com""},""message"":""[XLA:Python] Split DevicePut out of `jax_jit` and refactor it.\n\n* Creates a new py_values.cc/h file to contain device_put.\n* Moves some of the type helpers into the existing types module.\n* Change `PyClient::BufferFromPyval` to call DevicePut. There's no reason to have two similar but subtly different methods for copying a buffer-like object to a device.\n* Refactor and optimize some of the handler functions. In particular, avoid creating a number of unnecessary intermediate objects.\n\nPiperOrigin-RevId: 361430648\nChange-Id: I56b056eb8f0fde20b2f65170fcbf9530cd97d12b"",""distinct"":true,""url"":""https://api.github.com/repos/isanjit3/tensorflow/commits/efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7""}]",,,,,,,,,,
15438799948,PullRequestEvent,true,2021-03-07 21:43:00.000000 UTC,39814207,pull[bot],179607331,isanjit3/tensorflow,,,,,,,,"""closed""",869,,,,,,,,
15438803799,PushEvent,true,2021-03-07 21:43:58.000000 UTC,39814207,pull[bot],133704084,melG81/tensorflow,"""refs/heads/master""",,,6660965191,2,2,"[{""sha"":""6613bf0887142ae7f141bbc00d8cb3d791fdd1a4"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Fix stride mismatch propagation bug across convolutions\n\nPiperOrigin-RevId: 361429642\nChange-Id: I40e18cd9c2ce9750e1949b16f90e7182a682dd0f"",""distinct"":true,""url"":""https://api.github.com/repos/melG81/tensorflow/commits/6613bf0887142ae7f141bbc00d8cb3d791fdd1a4""},{""sha"":""efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7"",""author"":{""name"":""Peter Hawkins"",""email"":""34b19541630131950b5f204f2c5f2c647a3a7475@google.com""},""message"":""[XLA:Python] Split DevicePut out of `jax_jit` and refactor it.\n\n* Creates a new py_values.cc/h file to contain device_put.\n* Moves some of the type helpers into the existing types module.\n* Change `PyClient::BufferFromPyval` to call DevicePut. There's no reason to have two similar but subtly different methods for copying a buffer-like object to a device.\n* Refactor and optimize some of the handler functions. In particular, avoid creating a number of unnecessary intermediate objects.\n\nPiperOrigin-RevId: 361430648\nChange-Id: I56b056eb8f0fde20b2f65170fcbf9530cd97d12b"",""distinct"":true,""url"":""https://api.github.com/repos/melG81/tensorflow/commits/efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7""}]",,,,,,,,,,
15438803828,PullRequestEvent,true,2021-03-07 21:43:58.000000 UTC,39814207,pull[bot],133704084,melG81/tensorflow,,,,,,,,"""closed""",675,,,,,,,,
15438808177,PushEvent,true,2021-03-07 21:45:02.000000 UTC,39814207,pull[bot],82160236,waterdrops/tensorflow,"""refs/heads/master""",,,6660967855,2,2,"[{""sha"":""6613bf0887142ae7f141bbc00d8cb3d791fdd1a4"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Fix stride mismatch propagation bug across convolutions\n\nPiperOrigin-RevId: 361429642\nChange-Id: I40e18cd9c2ce9750e1949b16f90e7182a682dd0f"",""distinct"":true,""url"":""https://api.github.com/repos/waterdrops/tensorflow/commits/6613bf0887142ae7f141bbc00d8cb3d791fdd1a4""},{""sha"":""efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7"",""author"":{""name"":""Peter Hawkins"",""email"":""34b19541630131950b5f204f2c5f2c647a3a7475@google.com""},""message"":""[XLA:Python] Split DevicePut out of `jax_jit` and refactor it.\n\n* Creates a new py_values.cc/h file to contain device_put.\n* Moves some of the type helpers into the existing types module.\n* Change `PyClient::BufferFromPyval` to call DevicePut. There's no reason to have two similar but subtly different methods for copying a buffer-like object to a device.\n* Refactor and optimize some of the handler functions. In particular, avoid creating a number of unnecessary intermediate objects.\n\nPiperOrigin-RevId: 361430648\nChange-Id: I56b056eb8f0fde20b2f65170fcbf9530cd97d12b"",""distinct"":true,""url"":""https://api.github.com/repos/waterdrops/tensorflow/commits/efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7""}]",,,,,,,,,,
15438808209,PullRequestEvent,true,2021-03-07 21:45:02.000000 UTC,39814207,pull[bot],82160236,waterdrops/tensorflow,,,,,,,,"""closed""",43,,,,,,,,
15438817179,PushEvent,true,2021-03-07 21:47:13.000000 UTC,39814207,pull[bot],164577447,osmaelo/tensorflow,"""refs/heads/master""",,,6660973315,2,2,"[{""sha"":""6613bf0887142ae7f141bbc00d8cb3d791fdd1a4"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Fix stride mismatch propagation bug across convolutions\n\nPiperOrigin-RevId: 361429642\nChange-Id: I40e18cd9c2ce9750e1949b16f90e7182a682dd0f"",""distinct"":true,""url"":""https://api.github.com/repos/osmaelo/tensorflow/commits/6613bf0887142ae7f141bbc00d8cb3d791fdd1a4""},{""sha"":""efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7"",""author"":{""name"":""Peter Hawkins"",""email"":""34b19541630131950b5f204f2c5f2c647a3a7475@google.com""},""message"":""[XLA:Python] Split DevicePut out of `jax_jit` and refactor it.\n\n* Creates a new py_values.cc/h file to contain device_put.\n* Moves some of the type helpers into the existing types module.\n* Change `PyClient::BufferFromPyval` to call DevicePut. There's no reason to have two similar but subtly different methods for copying a buffer-like object to a device.\n* Refactor and optimize some of the handler functions. In particular, avoid creating a number of unnecessary intermediate objects.\n\nPiperOrigin-RevId: 361430648\nChange-Id: I56b056eb8f0fde20b2f65170fcbf9530cd97d12b"",""distinct"":true,""url"":""https://api.github.com/repos/osmaelo/tensorflow/commits/efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7""}]",,,,,,,,,,
15438817207,PullRequestEvent,true,2021-03-07 21:47:13.000000 UTC,39814207,pull[bot],164577447,osmaelo/tensorflow,,,,,,,,"""closed""",5126,,,,,,,,
15438819049,PushEvent,true,2021-03-07 21:47:40.000000 UTC,39814207,pull[bot],206156535,icpm/tensorflow,"""refs/heads/master""",,,6660974420,2,2,"[{""sha"":""6613bf0887142ae7f141bbc00d8cb3d791fdd1a4"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Fix stride mismatch propagation bug across convolutions\n\nPiperOrigin-RevId: 361429642\nChange-Id: I40e18cd9c2ce9750e1949b16f90e7182a682dd0f"",""distinct"":true,""url"":""https://api.github.com/repos/icpm/tensorflow/commits/6613bf0887142ae7f141bbc00d8cb3d791fdd1a4""},{""sha"":""efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7"",""author"":{""name"":""Peter Hawkins"",""email"":""34b19541630131950b5f204f2c5f2c647a3a7475@google.com""},""message"":""[XLA:Python] Split DevicePut out of `jax_jit` and refactor it.\n\n* Creates a new py_values.cc/h file to contain device_put.\n* Moves some of the type helpers into the existing types module.\n* Change `PyClient::BufferFromPyval` to call DevicePut. There's no reason to have two similar but subtly different methods for copying a buffer-like object to a device.\n* Refactor and optimize some of the handler functions. In particular, avoid creating a number of unnecessary intermediate objects.\n\nPiperOrigin-RevId: 361430648\nChange-Id: I56b056eb8f0fde20b2f65170fcbf9530cd97d12b"",""distinct"":true,""url"":""https://api.github.com/repos/icpm/tensorflow/commits/efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7""}]",,,,,,,,,,
15438819066,PullRequestEvent,true,2021-03-07 21:47:41.000000 UTC,39814207,pull[bot],206156535,icpm/tensorflow,,,,,,,,"""closed""",4895,,,,,,,,
15438828263,PushEvent,true,2021-03-07 21:49:55.000000 UTC,39814207,pull[bot],159132812,mark0725/tensorflow,"""refs/heads/master""",,,6660980065,2,2,"[{""sha"":""6613bf0887142ae7f141bbc00d8cb3d791fdd1a4"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Fix stride mismatch propagation bug across convolutions\n\nPiperOrigin-RevId: 361429642\nChange-Id: I40e18cd9c2ce9750e1949b16f90e7182a682dd0f"",""distinct"":true,""url"":""https://api.github.com/repos/mark0725/tensorflow/commits/6613bf0887142ae7f141bbc00d8cb3d791fdd1a4""},{""sha"":""efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7"",""author"":{""name"":""Peter Hawkins"",""email"":""34b19541630131950b5f204f2c5f2c647a3a7475@google.com""},""message"":""[XLA:Python] Split DevicePut out of `jax_jit` and refactor it.\n\n* Creates a new py_values.cc/h file to contain device_put.\n* Moves some of the type helpers into the existing types module.\n* Change `PyClient::BufferFromPyval` to call DevicePut. There's no reason to have two similar but subtly different methods for copying a buffer-like object to a device.\n* Refactor and optimize some of the handler functions. In particular, avoid creating a number of unnecessary intermediate objects.\n\nPiperOrigin-RevId: 361430648\nChange-Id: I56b056eb8f0fde20b2f65170fcbf9530cd97d12b"",""distinct"":true,""url"":""https://api.github.com/repos/mark0725/tensorflow/commits/efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7""}]",,,,,,,,,,
15438828297,PullRequestEvent,true,2021-03-07 21:49:55.000000 UTC,39814207,pull[bot],159132812,mark0725/tensorflow,,,,,,,,"""closed""",8183,,,,,,,,
15438684640,IssuesEvent,true,2021-03-07 21:16:26.000000 UTC,46760451,ObaidaSaleh,338179606,swarupsrini/scikit-learn,,,,,,,,"""closed""",,,,,,,,,
15438684838,IssuesEvent,true,2021-03-07 21:16:29.000000 UTC,46760451,ObaidaSaleh,338179606,swarupsrini/scikit-learn,,,,,,,,"""closed""",,,,,,,,,
15438685011,IssuesEvent,true,2021-03-07 21:16:31.000000 UTC,46760451,ObaidaSaleh,338179606,swarupsrini/scikit-learn,,,,,,,,"""closed""",,,,,,,,,
15438684193,PullRequestEvent,true,2021-03-07 21:16:21.000000 UTC,55159299,ArielHaruv,207646236,ArielHaruv/react,,,,,,,,"""opened""",67,,,,,,,,
15438684302,CreateEvent,true,2021-03-07 21:16:22.000000 UTC,55159299,ArielHaruv,207646236,ArielHaruv/react,"""snyk-fix-d2f2c177255ae3158a166ab07bed171e""","""branch""","""user""",,,,,,,,,,,,,,
15438684343,PushEvent,true,2021-03-07 21:16:23.000000 UTC,55159299,ArielHaruv,207646236,ArielHaruv/react,"""refs/heads/snyk-fix-d2f2c177255ae3158a166ab07bed171e""",,,6660891618,1,1,"[{""sha"":""c90a48b67f4a82e1a6a737b03261bcbec93fa1b1"",""author"":{""name"":""snyk-bot"",""email"":""6524ae312692b75c8ed05087d0aa3c757ac39348@snyk.io""},""message"":""fix: fixtures/packaging/webpack/prod/package.json to reduce vulnerabilities\n\nThe following vulnerabilities are fixed with an upgrade:\n- https://snyk.io/vuln/SNYK-JS-GLOBPARENT-1016905"",""distinct"":true,""url"":""https://api.github.com/repos/ArielHaruv/react/commits/c90a48b67f4a82e1a6a737b03261bcbec93fa1b1""}]",,,,,,,,,,
15438678157,PullRequestEvent,true,2021-03-07 21:15:03.000000 UTC,56318596,blubfoo,213726541,blubfoo/react,,,,,,,,"""opened""",67,,,,,,,,
15438678244,CreateEvent,true,2021-03-07 21:15:04.000000 UTC,56318596,blubfoo,213726541,blubfoo/react,"""snyk-fix-28ca5794796426aba6ebf7bb9b4161c3""","""branch""","""user""",,,,,,,,,,,,,,
15438678316,PushEvent,true,2021-03-07 21:15:04.000000 UTC,56318596,blubfoo,213726541,blubfoo/react,"""refs/heads/snyk-fix-28ca5794796426aba6ebf7bb9b4161c3""",,,6660887901,1,1,"[{""sha"":""c1bf843487c96b86acc48607ef9546e5c73d65e1"",""author"":{""name"":""snyk-bot"",""email"":""6524ae312692b75c8ed05087d0aa3c757ac39348@snyk.io""},""message"":""fix: fixtures/packaging/webpack/prod/package.json & fixtures/packaging/webpack/prod/yarn.lock to reduce vulnerabilities\n\nThe following vulnerabilities are fixed with an upgrade:\n- https://snyk.io/vuln/SNYK-JS-GLOBPARENT-1016905"",""distinct"":true,""url"":""https://api.github.com/repos/blubfoo/react/commits/c1bf843487c96b86acc48607ef9546e5c73d65e1""}]",,,,,,,,,,
15438629971,PullRequestEvent,true,2021-03-07 21:04:21.000000 UTC,56575816,smk579702,215233412,smk579702/react,,,,,,,,"""opened""",66,,,,,,,,
15438630478,PushEvent,true,2021-03-07 21:04:28.000000 UTC,56575816,smk579702,215233412,smk579702/react,"""refs/heads/snyk-fix-012cc9d54783b5645999e52ad6d1334a""",,,6660858678,1,1,"[{""sha"":""84c246fdaa22757a4d1fac5283bab51a4ca232e8"",""author"":{""name"":""snyk-bot"",""email"":""6524ae312692b75c8ed05087d0aa3c757ac39348@snyk.io""},""message"":""fix: fixtures/packaging/webpack/dev/package.json & fixtures/packaging/webpack/dev/yarn.lock to reduce vulnerabilities\n\nThe following vulnerabilities are fixed with an upgrade:\n- https://snyk.io/vuln/SNYK-JS-GLOBPARENT-1016905"",""distinct"":true,""url"":""https://api.github.com/repos/smk579702/react/commits/84c246fdaa22757a4d1fac5283bab51a4ca232e8""}]",,,,,,,,,,
15438630501,CreateEvent,true,2021-03-07 21:04:28.000000 UTC,56575816,smk579702,215233412,smk579702/react,"""snyk-fix-012cc9d54783b5645999e52ad6d1334a""","""branch""","""user""",,,,,,,,,,,,,,
15438838478,PushEvent,true,2021-03-07 21:52:22.000000 UTC,64424206,stumblefiend,345426997,stumblefiend/terraform,"""refs/heads/patch-1""",,,6660986377,1,1,"[{""sha"":""aaecfd64408f3d403a1ff66ad9c6f28a650ba533"",""author"":{""name"":""Jeremy Pugh"",""email"":""9212ab3cf972c34f26075bbe0ff459e167237e5a@users.noreply.github.com""},""message"":""Update apply_test.go\n\nupdate unit test to support grammar fix made to error output in apply.go"",""distinct"":true,""url"":""https://api.github.com/repos/stumblefiend/terraform/commits/aaecfd64408f3d403a1ff66ad9c6f28a650ba533""}]",,,,,,,,,,
15438733640,IssueCommentEvent,true,2021-03-07 21:27:32.000000 UTC,446130,lhofhansl,20473418,apache/phoenix,,,,,,,,"""created""",,,,,,,,,
15438650960,PullRequestReviewCommentEvent,true,2021-03-07 21:08:59.000000 UTC,26788611,sdedic,102083576,apache/netbeans,,,,,,,,"""created""",2795,,,,,,,,
15438650948,PullRequestReviewEvent,true,2021-03-07 21:09:00.000000 UTC,26788611,sdedic,102083576,apache/netbeans,,,,,,,,"""created""",2795,,,"""commented""","""MEMBER""",,,,
15438674827,WatchEvent,true,2021-03-07 21:14:16.000000 UTC,11678366,dragon-yamamoto,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15438611678,WatchEvent,true,2021-03-07 21:00:26.000000 UTC,48347865,combowomb0,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15438827097,PullRequestEvent,true,2021-03-07 21:49:37.000000 UTC,31703176,linjun9,843222,scikit-learn/scikit-learn,,,,,,,,"""opened""",19640,,,,,,,,
15438831852,PullRequestEvent,true,2021-03-07 21:50:47.000000 UTC,31703176,linjun9,843222,scikit-learn/scikit-learn,,,,,,,,"""closed""",19640,,,,,,,,
15438858468,IssueCommentEvent,true,2021-03-07 21:57:10.000000 UTC,22429695,codecov[bot],17728164,hashicorp/terraform,,,,,,,,"""created""",,,,,,,,,
15438656165,ForkEvent,true,2021-03-07 21:10:09.000000 UTC,61416506,jurijssalijevs,5108051,opencv/opencv,,,,,,,,,,"""jurijssalijevs/opencv""",,,,,,,
15438683963,ForkEvent,true,2021-03-07 21:16:18.000000 UTC,66952748,goliksim,5108051,opencv/opencv,,,,,,,,,,"""goliksim/opencv""",,,,,,,
15438773234,ForkEvent,true,2021-03-07 21:36:49.000000 UTC,1569955,cnsgsz,45717250,tensorflow/tensorflow,,,,,,,,,,"""cnsgsz/tensorflow""",,,,,,,
15438789220,WatchEvent,true,2021-03-07 21:40:26.000000 UTC,16759790,dpeters93,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15438635827,IssueCommentEvent,true,2021-03-07 21:05:38.000000 UTC,1804568,thaJeztah,7691631,moby/moby,,,,,,,,"""created""",,,,,,,,,
15438807930,IssueCommentEvent,true,2021-03-07 21:44:58.000000 UTC,13720190,joakim-tjernlund,7691631,moby/moby,,,,,,,,"""created""",,,,,,,,,
15438632886,PullRequestEvent,true,2021-03-07 21:05:01.000000 UTC,5459824,jakubdyszkiewicz,175425051,kumahq/kuma,,,,,,,,"""opened""",1642,,,,,,,,
15438638868,PushEvent,true,2021-03-07 21:06:16.000000 UTC,5459824,jakubdyszkiewicz,175425051,kumahq/kuma,"""refs/heads/chore/backwards-compatibility-fix""",,,6660863734,1,1,"[{""sha"":""8eed49e2dfd258755a91c978c097b744be70c9b3"",""author"":{""name"":""Jakub Dyszkiewicz"",""email"":""a6f04ef8d80fa8efd1814afa8bd5430baa35e6d9@gmail.com""},""message"":""chore(kuma-cp) keep backward compatibility with Kuma DP 1.0.x\n\nSigned-off-by: Jakub Dyszkiewicz <jakub.dyszkiewicz@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/kumahq/kuma/commits/8eed49e2dfd258755a91c978c097b744be70c9b3""}]",,,,,,,,,,
15437904403,PushEvent,true,2021-03-07 18:24:46.000000 UTC,293363,ehelms,4041354,ehelms/katello,"""refs/heads/support-ruby-2.7""",,,6660409824,1,1,"[{""sha"":""ba86706245872fc39f228e77528a5ec1dcd80347"",""author"":{""name"":""Eric D. Helms"",""email"":""5c98d53ef48a8013e3d283964fdb3493785fa373@gmail.com""},""message"":""Support Ruby 2.7"",""distinct"":true,""url"":""https://api.github.com/repos/ehelms/katello/commits/ba86706245872fc39f228e77528a5ec1dcd80347""}]",,,,,,,,,,
15438036377,PushEvent,true,2021-03-07 18:54:07.000000 UTC,8010926,carbonscott,326333912,carbonscott/helix,"""refs/heads/main""",,,6660493553,1,1,"[{""sha"":""8387c82633571e21d9bab34d69f46e14f1f06491"",""author"":{""name"":""Cong Wang"",""email"":""49f58f94b7d3ecd78b9053d24b787a65d2386650@gmail.com""},""message"":""Provides an argument in the checking function which allows a user to specify which atom to check"",""distinct"":true,""url"":""https://api.github.com/repos/carbonscott/helix/commits/8387c82633571e21d9bab34d69f46e14f1f06491""}]",,,,,,,,,,
15437886780,CreateEvent,true,2021-03-07 18:20:59.000000 UTC,8557871,TheFirstAvenger,176971989,TheFirstAvenger/phoenix,"""mb-2841-config-access-message-on-compilation""","""branch""","""user""",,,,,,,,,,,,,,
15437891333,PushEvent,true,2021-03-07 18:21:54.000000 UTC,8557871,TheFirstAvenger,176971989,TheFirstAvenger/phoenix,"""refs/heads/mb-2841-config-access-message-on-compilation""",,,6660401518,1,1,"[{""sha"":""9265e66f47739455d4c44f9411b8a00f3f79a4e6"",""author"":{""name"":""TheFirstAvenger"",""email"":""a17fed27eaa842282862ff7c1b9c8395a26ac320@mikebinns.net""},""message"":""Helpful error message when accessing endpoint config at compile time"",""distinct"":true,""url"":""https://api.github.com/repos/TheFirstAvenger/phoenix/commits/9265e66f47739455d4c44f9411b8a00f3f79a4e6""}]",,,,,,,,,,
15438018661,PushEvent,true,2021-03-07 18:50:04.000000 UTC,16261078,mwtarnowski,266541866,mwtarnowski/opencv,"""refs/heads/master""",,,6660482197,472,472,"[{""sha"":""9e6b7f5dc1e4ed91dc6cffebb8cdb242d47b54dd"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""videoio: plugins API versioning"",""distinct"":true,""url"":""https://api.github.com/repos/mwtarnowski/opencv/commits/9e6b7f5dc1e4ed91dc6cffebb8cdb242d47b54dd""},{""sha"":""c3cebc3ac570a67acb42a1c489d6cf23bd335082"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""android: use gradle 5.6.4"",""distinct"":true,""url"":""https://api.github.com/repos/mwtarnowski/opencv/commits/c3cebc3ac570a67acb42a1c489d6cf23bd335082""},{""sha"":""da5bfefc78eed582764258d14997086e4e7e65a3"",""author"":{""name"":""Anton Potapov"",""email"":""46a4e7c6e329e26e2944dd3051648ee305c41419@intel.com""},""message"":""GAPI: fix Clang warning for dangling references in for loop variable"",""distinct"":true,""url"":""https://api.github.com/repos/mwtarnowski/opencv/commits/da5bfefc78eed582764258d14997086e4e7e65a3""},{""sha"":""fe3893ff01b13619da1e2c1ab62af2ea8b19cfbc"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""cmake: don't define ENABLE_NEON flags in non-cross-compiling mode\n\n- NEON / ANDROID_ARM_NEON are toolchain-specific flags\n- they are usually not defined for native builds\n- let work CPU_BASELINE=DETECT properly"",""distinct"":true,""url"":""https://api.github.com/repos/mwtarnowski/opencv/commits/fe3893ff01b13619da1e2c1ab62af2ea8b19cfbc""},{""sha"":""8ebe320270cf18040a154ae6d981cf16937dc754"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""cmake: don't define ENABLE_NEON flags in non-cross-compiling mode\n\n- NEON / ANDROID_ARM_NEON are toolchain-specific flags\n- they are usually not defined for native builds\n- let work CPU_BASELINE=DETECT properly"",""distinct"":true,""url"":""https://api.github.com/repos/mwtarnowski/opencv/commits/8ebe320270cf18040a154ae6d981cf16937dc754""},{""sha"":""7eaa548b6dec75d0b2cbb3ca25a2188806bf6768"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""flann: drop wrapping of Index class\n\n- due to lifetime restrictions on passed 'features' parameter and its dangling pointers\n- dangling pointer issue is fixed for OpenCV 4.5.1+"",""distinct"":true,""url"":""https://api.github.com/repos/mwtarnowski/opencv/commits/7eaa548b6dec75d0b2cbb3ca25a2188806bf6768""},{""sha"":""b3937288e5e3b98da824ce5d132c0f917ee3d665"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""cmake: update MKL library searching\n\n- allow to specify MKL_LIBRARIES through command-line"",""distinct"":true,""url"":""https://api.github.com/repos/mwtarnowski/opencv/commits/b3937288e5e3b98da824ce5d132c0f917ee3d665""},{""sha"":""3e5d7e1718cf6470c34fb29db9d913d6cd352168"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""imgproc: fix minAreaRect()"",""distinct"":true,""url"":""https://api.github.com/repos/mwtarnowski/opencv/commits/3e5d7e1718cf6470c34fb29db9d913d6cd352168""},{""sha"":""d1ea2ad143eebf1897735ef2f42d276f9f880ad9"",""author"":{""name"":""Giles Payne"",""email"":""f9e5bf5b97040708f608892f09fcdf902218fc74@gmail.com""},""message"":""CMake version checks for iOS and macOS builds"",""distinct"":true,""url"":""https://api.github.com/repos/mwtarnowski/opencv/commits/d1ea2ad143eebf1897735ef2f42d276f9f880ad9""},{""sha"":""f2422ace7dc0c0e1f995d8f2c940997f81146cb7"",""author"":{""name"":""Anastasia Murzova"",""email"":""8bc365a45af96f6305a79f5acc72147e62a77709@xperience.ai""},""message"":""Added TF nearest neighbour resize behaviour alignment\n\nRelates to OpenCV issue #18721"",""distinct"":true,""url"":""https://api.github.com/repos/mwtarnowski/opencv/commits/f2422ace7dc0c0e1f995d8f2c940997f81146cb7""},{""sha"":""55a2bcbe15e26afd7678686d4ed722989c56bab8"",""author"":{""name"":""Maksim Shabunin"",""email"":""df7bbd2e1b30f9cbe316b888d25da4f669e20ac7@gmail.com""},""message"":""videoio: turn off syncronized sink in GStreamer"",""distinct"":true,""url"":""https://api.github.com/repos/mwtarnowski/opencv/commits/55a2bcbe15e26afd7678686d4ed722989c56bab8""},{""sha"":""d84a9484b717706d811b249cfb279f795ccfd095"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""dnn: fix build with Halide, skip tests with crashes"",""distinct"":true,""url"":""https://api.github.com/repos/mwtarnowski/opencv/commits/d84a9484b717706d811b249cfb279f795ccfd095""},{""sha"":""32377ce57dcf42dedce81b265f8b02ca51ff1f0b"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""android: add -llog for libprotobuf"",""distinct"":true,""url"":""https://api.github.com/repos/mwtarnowski/opencv/commits/32377ce57dcf42dedce81b265f8b02ca51ff1f0b""},{""sha"":""8ce08dedfed946cef9de1bd2c3b5e4a2681aa1c7"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19072 from mshabunin:sink-sync-off"",""distinct"":true,""url"":""https://api.github.com/repos/mwtarnowski/opencv/commits/8ce08dedfed946cef9de1bd2c3b5e4a2681aa1c7""},{""sha"":""d6a7f5e1e033ab883dcbd78666157ebd2ca05f10"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19075 from alalek:dnn_fix_halide_build"",""distinct"":true,""url"":""https://api.github.com/repos/mwtarnowski/opencv/commits/d6a7f5e1e033ab883dcbd78666157ebd2ca05f10""},{""sha"":""9f522445748949f7ec2a62aaeb350deec66b0996"",""author"":{""name"":""Jonathan Cole"",""email"":""d711854f195fad73b41145c5d250127bfb0d61e7@gmail.com""},""message"":""Merge pull request #19076 from Rightpoint:bugfix/colejd/fix-path-resolution-bugs\n\nFix path resolution bugs for XCFramework builds\r\n\r\n* Fix incorrect paths for intermediate frameworks\r\n\r\n* Remove unnecessary `./` prepend preventing use of absolute paths"",""distinct"":true,""url"":""https://api.github.com/repos/mwtarnowski/opencv/commits/9f522445748949f7ec2a62aaeb350deec66b0996""},{""sha"":""175cd03ff2237eca57089f14f866fe17186130b4"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""calib3d: fix findCirclesGrid hang\n\n- detect case with infinite loop and raise NoConv exception\n- handle such exception\n- add support for case with missing `blobDetector` (image contains Point2f array of candidates)\n- add regression test\n- undone rectification for \""failed\"" detections too\n- drop redirectError() usage"",""distinct"":true,""url"":""https://api.github.com/repos/mwtarnowski/opencv/commits/175cd03ff2237eca57089f14f866fe17186130b4""},{""sha"":""fdeac73a59652e61a339844603fb4b35d6580609"",""author"":{""name"":""Yosshi999"",""email"":""ae25b83ba083b455d96d3c2ec56827d7dc91d707@users.noreply.github.com""},""message"":""Merge pull request #18983 from Yosshi999:bitexact-gaussian-16U-faster\n\nsupport SIMD for larger symmetric Bit-exact 16U gaussian blur\r\n\r\n* support SIMD for bit-exact 16U symmetric gaussian blur\r\n\r\n* use tighter SIMD registers"",""distinct"":true,""url"":""https://api.github.com/repos/mwtarnowski/opencv/commits/fdeac73a59652e61a339844603fb4b35d6580609""},{""sha"":""1f3255d76b78cf59173bdc487c5cc97b04d821f9"",""author"":{""name"":""Sergei Slashchinin"",""email"":""b480a9bc40f3236639f1dff4594691efcb7e45b4@users.noreply.github.com""},""message"":""Merge pull request #18591 from sl-sergei:download_utilities\n\nScripts for downloading models in DNN samples\r\n\r\n* Initial commit. Utility classes and functions for downloading files\r\n\r\n* updated download script\r\n\r\n* Support YAML parsing, update download script and configs\r\n\r\n* Fix problem with archived files\r\n\r\n* fix models.yml\r\n\r\n* Move download utilities to more appropriate place\r\n\r\n* Fix script description\r\n\r\n* Update README\r\n\r\n* update utilities for broader range of files\r\n\r\n* fix loading with no hashsum provided\r\n\r\n* remove unnecessary import\r\n\r\n* fix for Python2\r\n\r\n* Add usage examples for downloadFile function\r\n\r\n* Add more secure cache folder selection\r\n\r\n* Remove trailing whitespaces\r\n\r\n* Fix indentation\r\n\r\n* Update function interface\r\n\r\n* Change function for temp dir, change entry name in models.yml\r\n\r\n* Update getCacheDirectory function call\r\n\r\n* Return python implementation for cache directory selection, use more specific env variable\r\n\r\n* Fix whitespace"",""distinct"":true,""url"":""https://api.github.com/repos/mwtarnowski/opencv/commits/1f3255d76b78cf59173bdc487c5cc97b04d821f9""},{""sha"":""9f01b97e1401ecb9d746ebff4a1c20cbdecc7d75"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19024 from komakai:cmake319-proposal2"",""distinct"":true,""url"":""https://api.github.com/repos/mwtarnowski/opencv/commits/9f01b97e1401ecb9d746ebff4a1c20cbdecc7d75""}]",,,,,,,,,,
15437885920,PushEvent,true,2021-03-07 18:20:47.000000 UTC,32069184,haripraghash,344886112,haripraghash/terraform,"""refs/heads/master""",,,6660398050,1,1,"[{""sha"":""c4301f75ada5399adf04f27fb5b9adea2b6b25fc"",""author"":{""name"":""haripraghash"",""email"":""dd8e4c71f742f1884a66cdad76be02ea0f53e194@hotmail.com""},""message"":""Added backend configuration"",""distinct"":true,""url"":""https://api.github.com/repos/haripraghash/terraform/commits/c4301f75ada5399adf04f27fb5b9adea2b6b25fc""}]",,,,,,,,,,
15437919518,PullRequestEvent,true,2021-03-07 18:28:08.000000 UTC,39814207,pull[bot],268720602,YashKumarVerma/react,,,,,,,,"""closed""",321,,,,,,,,
15437900788,PullRequestEvent,true,2021-03-07 18:23:55.000000 UTC,39814207,pull[bot],329235466,gouda1a1/react,,,,,,,,"""opened""",68,,,,,,,,
15438012874,PullRequestEvent,true,2021-03-07 18:48:46.000000 UTC,39814207,pull[bot],308687720,linbingquan/react,,,,,,,,"""opened""",137,,,,,,,,
15438039094,PushEvent,true,2021-03-07 18:54:44.000000 UTC,39814207,pull[bot],157488097,greedisgoood/tensorflow,"""refs/heads/master""",,,6660495290,2,2,"[{""sha"":""6613bf0887142ae7f141bbc00d8cb3d791fdd1a4"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Fix stride mismatch propagation bug across convolutions\n\nPiperOrigin-RevId: 361429642\nChange-Id: I40e18cd9c2ce9750e1949b16f90e7182a682dd0f"",""distinct"":true,""url"":""https://api.github.com/repos/greedisgoood/tensorflow/commits/6613bf0887142ae7f141bbc00d8cb3d791fdd1a4""},{""sha"":""efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7"",""author"":{""name"":""Peter Hawkins"",""email"":""34b19541630131950b5f204f2c5f2c647a3a7475@google.com""},""message"":""[XLA:Python] Split DevicePut out of `jax_jit` and refactor it.\n\n* Creates a new py_values.cc/h file to contain device_put.\n* Moves some of the type helpers into the existing types module.\n* Change `PyClient::BufferFromPyval` to call DevicePut. There's no reason to have two similar but subtly different methods for copying a buffer-like object to a device.\n* Refactor and optimize some of the handler functions. In particular, avoid creating a number of unnecessary intermediate objects.\n\nPiperOrigin-RevId: 361430648\nChange-Id: I56b056eb8f0fde20b2f65170fcbf9530cd97d12b"",""distinct"":true,""url"":""https://api.github.com/repos/greedisgoood/tensorflow/commits/efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7""}]",,,,,,,,,,
15437890683,PullRequestEvent,true,2021-03-07 18:21:47.000000 UTC,39814207,pull[bot],95080482,xiaoxiaopingzi/tensorflow,,,,,,,,"""opened""",4492,,,,,,,,
15438040696,PullRequestEvent,true,2021-03-07 18:55:06.000000 UTC,39814207,pull[bot],107213661,Geolem/tensorflow,,,,,,,,"""opened""",26,,,,,,,,
15438053040,PullRequestEvent,true,2021-03-07 18:57:56.000000 UTC,39814207,pull[bot],117140827,testkevinbonz/tensorflow,,,,,,,,"""opened""",6918,,,,,,,,
15437817665,PushEvent,true,2021-03-07 18:05:44.000000 UTC,39814207,pull[bot],283146831,r4b3rt/react,"""refs/heads/master""",,,6660355908,1,1,"[{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/r4b3rt/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""}]",,,,,,,,,,
15437898410,PullRequestEvent,true,2021-03-07 18:23:24.000000 UTC,39814207,pull[bot],130050312,Rachelmorrell/tensorflow,,,,,,,,"""opened""",5252,,,,,,,,
15437817695,PullRequestEvent,true,2021-03-07 18:05:45.000000 UTC,39814207,pull[bot],283146831,r4b3rt/react,,,,,,,,"""closed""",270,,,,,,,,
15437989709,PullRequestEvent,true,2021-03-07 18:43:31.000000 UTC,39814207,pull[bot],163274816,kokizzu/tensorflow,,,,,,,,"""opened""",3477,,,,,,,,
15437919502,PushEvent,true,2021-03-07 18:28:08.000000 UTC,39814207,pull[bot],268720602,YashKumarVerma/react,"""refs/heads/master""",,,6660419148,1,1,"[{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/YashKumarVerma/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""}]",,,,,,,,,,
15438022169,PushEvent,true,2021-03-07 18:50:50.000000 UTC,39814207,pull[bot],211634994,Melon-Tropics/react,"""refs/heads/master""",,,6660484398,1,1,"[{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/Melon-Tropics/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""}]",,,,,,,,,,
15438027035,PushEvent,true,2021-03-07 18:51:58.000000 UTC,39814207,pull[bot],316339507,Jeffkeen7/react,"""refs/heads/master""",,,6660487533,1,1,"[{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/Jeffkeen7/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""}]",,,,,,,,,,
15437995372,PullRequestEvent,true,2021-03-07 18:44:50.000000 UTC,39814207,pull[bot],211283192,Alan-love/react,,,,,,,,"""opened""",346,,,,,,,,
15437880786,PullRequestEvent,true,2021-03-07 18:19:41.000000 UTC,39814207,pull[bot],209611938,Alan-love/tensorflow,,,,,,,,"""opened""",1437,,,,,,,,
15437895148,PullRequestEvent,true,2021-03-07 18:22:42.000000 UTC,39814207,pull[bot],83310415,NeatNerdPrime/tensorflow,,,,,,,,"""opened""",4484,,,,,,,,
15437926622,PullRequestEvent,true,2021-03-07 18:29:41.000000 UTC,39814207,pull[bot],281212457,rafsanulhasan/react,,,,,,,,"""opened""",272,,,,,,,,
15437847975,PushEvent,true,2021-03-07 18:12:30.000000 UTC,39814207,pull[bot],258565520,Qwerty0x64/react,"""refs/heads/master""",,,6660374747,1,1,"[{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/Qwerty0x64/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""}]",,,,,,,,,,
15437848021,PullRequestEvent,true,2021-03-07 18:12:31.000000 UTC,39814207,pull[bot],258565520,Qwerty0x64/react,,,,,,,,"""closed""",395,,,,,,,,
15437959796,PullRequestEvent,true,2021-03-07 18:36:37.000000 UTC,39814207,pull[bot],137995820,Mu-L/react,,,,,,,,"""closed""",302,,,,,,,,
15437843432,PullRequestEvent,true,2021-03-07 18:11:30.000000 UTC,39814207,pull[bot],316339507,Jeffkeen7/react,,,,,,,,"""opened""",108,,,,,,,,
15437934088,PullRequestEvent,true,2021-03-07 18:31:13.000000 UTC,39814207,pull[bot],266801149,tbergq/react,,,,,,,,"""opened""",335,,,,,,,,
15438022224,PullRequestEvent,true,2021-03-07 18:50:50.000000 UTC,39814207,pull[bot],211634994,Melon-Tropics/react,,,,,,,,"""closed""",658,,,,,,,,
15438027075,PullRequestEvent,true,2021-03-07 18:51:59.000000 UTC,39814207,pull[bot],316339507,Jeffkeen7/react,,,,,,,,"""closed""",108,,,,,,,,
15438039125,PullRequestEvent,true,2021-03-07 18:54:45.000000 UTC,39814207,pull[bot],157488097,greedisgoood/tensorflow,,,,,,,,"""closed""",405,,,,,,,,
15437838953,PullRequestEvent,true,2021-03-07 18:10:31.000000 UTC,39814207,pull[bot],211634994,Melon-Tropics/react,,,,,,,,"""opened""",658,,,,,,,,
15437959765,PushEvent,true,2021-03-07 18:36:37.000000 UTC,39814207,pull[bot],137995820,Mu-L/react,"""refs/heads/master""",,,6660444830,1,1,"[{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/Mu-L/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""}]",,,,,,,,,,
15437848486,PullRequestEvent,true,2021-03-07 18:12:38.000000 UTC,39814207,pull[bot],157488097,greedisgoood/tensorflow,,,,,,,,"""opened""",405,,,,,,,,
15437857369,PushEvent,true,2021-03-07 18:14:34.000000 UTC,60290913,Lexoice1997,344525600,Lexoice1997/react,"""refs/heads/master""",,,6660380518,1,1,"[{""sha"":""a7d06ff714ac28775638573708bb0ccb1e8c2ee4"",""author"":{""name"":""Lexoice1997"",""email"":""d65d71dc36a1fb81975cc0cdf113c837ce29ea67@gmail.com""},""message"":""Lesson 28"",""distinct"":true,""url"":""https://api.github.com/repos/Lexoice1997/react/commits/a7d06ff714ac28775638573708bb0ccb1e8c2ee4""}]",,,,,,,,,,
15437927464,IssueCommentEvent,true,2021-03-07 18:29:52.000000 UTC,65753204,yashkumarverma-assistant[bot],268720602,YashKumarVerma/react,,,,,,,,"""created""",,,,,,,,,
15437988675,PushEvent,true,2021-03-07 18:43:17.000000 UTC,67093357,Chuhj,337085542,Chuhj/react,"""refs/heads/main""",,,6660463176,4,4,"[{""sha"":""b8265939a036ab4cc2e5fa9686818335d9e7439c"",""author"":{""name"":""Chuhj"",""email"":""453b88e3bb595a69afa77441702cff348e81cd03@naver.com""},""message"":""6-5"",""distinct"":true,""url"":""https://api.github.com/repos/Chuhj/react/commits/b8265939a036ab4cc2e5fa9686818335d9e7439c""},{""sha"":""1a57ed466ca8997740b123ebd996989b597794f7"",""author"":{""name"":""Chuhj"",""email"":""453b88e3bb595a69afa77441702cff348e81cd03@naver.com""},""message"":""7-1"",""distinct"":true,""url"":""https://api.github.com/repos/Chuhj/react/commits/1a57ed466ca8997740b123ebd996989b597794f7""},{""sha"":""abe000dfb508c9a4e1942e27c5dec78c60bb1c9e"",""author"":{""name"":""Chuhj"",""email"":""453b88e3bb595a69afa77441702cff348e81cd03@naver.com""},""message"":""7-2"",""distinct"":true,""url"":""https://api.github.com/repos/Chuhj/react/commits/abe000dfb508c9a4e1942e27c5dec78c60bb1c9e""},{""sha"":""3adee90a1a8f6e94873cd925a097a5e89fe675e4"",""author"":{""name"":""Chuhj"",""email"":""453b88e3bb595a69afa77441702cff348e81cd03@naver.com""},""message"":""7-4"",""distinct"":true,""url"":""https://api.github.com/repos/Chuhj/react/commits/3adee90a1a8f6e94873cd925a097a5e89fe675e4""}]",,,,,,,,,,
15437870400,IssueCommentEvent,true,2021-03-07 18:17:24.000000 UTC,26887752,JaroslavTulach,102083576,apache/netbeans,,,,,,,,"""created""",,,,,,,,,
15437857955,WatchEvent,true,2021-03-07 18:14:42.000000 UTC,32960305,KimYangOfCat,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15438010423,WatchEvent,true,2021-03-07 18:48:10.000000 UTC,37458100,dashayaskova,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15437835090,WatchEvent,true,2021-03-07 18:09:41.000000 UTC,32424658,hkberlin,658518,ipython/ipython,,,,,,,,"""started""",,,,,,,,,
15438027722,ForkEvent,true,2021-03-07 18:52:08.000000 UTC,64424206,stumblefiend,17728164,hashicorp/terraform,,,,,,,,,,"""stumblefiend/terraform""",,,,,,,
15437826711,CreateEvent,true,2021-03-07 18:07:47.000000 UTC,8577314,bizley,3431193,yiisoft/yii2,"""bizley-patch-1""","""branch""","""user""",,,,,,,,,,,,,,
15437829790,PullRequestEvent,true,2021-03-07 18:08:30.000000 UTC,8577314,bizley,3431193,yiisoft/yii2,,,,,,,,"""opened""",18555,,,,,,,,
15437995674,WatchEvent,true,2021-03-07 18:44:54.000000 UTC,62840219,antoast,5108051,opencv/opencv,,,,,,,,"""started""",,,,,,,,,
15437904212,PullRequestEvent,true,2021-03-07 18:24:43.000000 UTC,39814207,pull[bot],306008166,miqdigital/react,,,,,,,,"""opened""",148,,,,,,,,
15438051875,PullRequestReviewCommentEvent,true,2021-03-07 18:57:37.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",4240,,,,,,,,
15438051867,PullRequestReviewEvent,true,2021-03-07 18:57:40.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",4240,,,"""commented""","""MEMBER""",,,,
15438034324,IssueCommentEvent,true,2021-03-07 18:53:38.000000 UTC,8557871,TheFirstAvenger,16072585,phoenixframework/phoenix,,,,,,,,"""created""",,,,,,,,,
15438047490,IssueCommentEvent,true,2021-03-07 18:56:42.000000 UTC,8557871,TheFirstAvenger,16072585,phoenixframework/phoenix,,,,,,,,"""created""",,,,,,,,,
15437906008,IssueCommentEvent,true,2021-03-07 18:25:09.000000 UTC,8557871,TheFirstAvenger,16072585,phoenixframework/phoenix,,,,,,,,"""created""",,,,,,,,,
15437894912,PullRequestEvent,true,2021-03-07 18:22:39.000000 UTC,8557871,TheFirstAvenger,16072585,phoenixframework/phoenix,,,,,,,,"""opened""",4240,,,,,,,,
15437824525,IssuesEvent,true,2021-03-07 18:07:16.000000 UTC,765202,max0x7ba,45717250,tensorflow/tensorflow,,,,,,,,"""opened""",,,,,,,,,
15438034015,WatchEvent,true,2021-03-07 18:53:34.000000 UTC,2179146,wenzhiwang,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15438044956,IssueCommentEvent,true,2021-03-07 18:56:06.000000 UTC,56610014,tensorflow-butler[bot],45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15438044891,IssueCommentEvent,true,2021-03-07 18:56:05.000000 UTC,56610014,tensorflow-butler[bot],45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15437989834,PushEvent,true,2021-03-07 18:43:33.000000 UTC,39814207,pull[bot],84768089,stackriot/react,"""refs/heads/master""",,,6660463957,1,1,"[{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/stackriot/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""}]",,,,,,,,,,
15437813161,PullRequestEvent,true,2021-03-07 18:04:46.000000 UTC,39814207,pull[bot],84768089,stackriot/react,,,,,,,,"""opened""",1712,,,,,,,,
15437989865,PullRequestEvent,true,2021-03-07 18:43:33.000000 UTC,39814207,pull[bot],84768089,stackriot/react,,,,,,,,"""closed""",1712,,,,,,,,
15437903461,WatchEvent,true,2021-03-07 18:24:32.000000 UTC,3141567,fulviog74,7691631,moby/moby,,,,,,,,"""started""",,,,,,,,,
15437934873,WatchEvent,true,2021-03-07 18:31:22.000000 UTC,52802082,wofra,7691631,moby/moby,,,,,,,,"""started""",,,,,,,,,
15437792591,PushEvent,true,2021-03-07 18:00:28.000000 UTC,19616653,ArmageddonKnight,204371788,UofT-EcoSystem/tensorflow,"""refs/heads/master""",,,6660340025,1,1,"[{""sha"":""6613bf0887142ae7f141bbc00d8cb3d791fdd1a4"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Fix stride mismatch propagation bug across convolutions\n\nPiperOrigin-RevId: 361429642\nChange-Id: I40e18cd9c2ce9750e1949b16f90e7182a682dd0f"",""distinct"":true,""url"":""https://api.github.com/repos/UofT-EcoSystem/tensorflow/commits/6613bf0887142ae7f141bbc00d8cb3d791fdd1a4""}]",,,,,,,,,,
15437982499,PullRequestEvent,true,2021-03-07 18:41:52.000000 UTC,39814207,pull[bot],256536409,zys-contrib/react,,,,,,,,"""opened""",184,,,,,,,,
15437904668,PullRequestEvent,true,2021-03-07 18:24:50.000000 UTC,3920663,ohager,164716981,burst-apps-team/phoenix,,,,,,,,"""opened""",1412,,,,,,,,
15437925469,PullRequestReviewEvent,true,2021-03-07 18:29:27.000000 UTC,3920663,ohager,164716981,burst-apps-team/phoenix,,,,,,,,"""created""",1412,,,"""commented""","""MEMBER""",,,,
15437858871,PushEvent,true,2021-03-07 18:14:55.000000 UTC,3920663,ohager,164716981,burst-apps-team/phoenix,"""refs/heads/burstjs/feat/extended_addresses""",,,6660381465,1,1,"[{""sha"":""aade696be81a409e6a6f2044739ae1cacb7431ca"",""author"":{""name"":""ohager"",""email"":""66d33830e4a2d67b6c95b3ea6abaa1cd22c27374@dextra-sw.com""},""message"":""feat: added extended address supprt"",""distinct"":true,""url"":""https://api.github.com/repos/burst-apps-team/phoenix/commits/aade696be81a409e6a6f2044739ae1cacb7431ca""}]",,,,,,,,,,
15437925476,PullRequestReviewCommentEvent,true,2021-03-07 18:29:26.000000 UTC,3920663,ohager,164716981,burst-apps-team/phoenix,,,,,,,,"""created""",1412,,,,,,,,
15437960909,IssuesEvent,true,2021-03-07 18:36:52.000000 UTC,26384082,stale[bot],135786093,typescript-cheatsheets/react,,,,,,,,"""closed""",,,,,,,,,
15437931187,WatchEvent,true,2021-03-07 18:30:38.000000 UTC,64442354,matheuspython,135786093,typescript-cheatsheets/react,,,,,,,,"""started""",,,,,,,,,
15437873500,PullRequestEvent,true,2021-03-07 18:18:04.000000 UTC,39814207,pull[bot],216880862,CrazyForks/react,,,,,,,,"""opened""",764,,,,,,,,
15437936444,PushEvent,true,2021-03-07 18:31:41.000000 UTC,39814207,pull[bot],267619984,vacantthinker-forks/react,"""refs/heads/master""",,,6660429629,1,1,"[{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/vacantthinker-forks/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""}]",,,,,,,,,,
15437936482,PullRequestEvent,true,2021-03-07 18:31:41.000000 UTC,39814207,pull[bot],267619984,vacantthinker-forks/react,,,,,,,,"""closed""",326,,,,,,,,
15436779030,PushEvent,true,2021-03-07 14:21:03.000000 UTC,2789958,advaitjain,214277424,advaitjain/tensorflow,"""refs/heads/local-continuous-builds""",,,6659701641,6,6,"[{""sha"":""fb7d34de0a7a892d070104aa4e385159817e7ef5"",""author"":{""name"":""Smit Hinsu"",""email"":""0f9dce5f2da36d8473ff9a50fbb0e06a148c5fae@google.com""},""message"":""Add prepare-tpu-computation-for-tf-export pass\n\nThis pass transforms the MLIR module attached to _TpuCompileMlir op to be legal for export to TensorFlow GraphDef. Currently, this pass handles mhlo.sharding attribute on function attributes by passing them through TF XlaSharding ops and dropping tf.aliasing_output attribute.\n\nThis will be used for using the old tf2xla bridge for second phase of the compilation.\n\nPiperOrigin-RevId: 361378341\nChange-Id: Id418212e65f5d177bc4bb8c279824ef8bfc2add2"",""distinct"":true,""url"":""https://api.github.com/repos/advaitjain/tensorflow/commits/fb7d34de0a7a892d070104aa4e385159817e7ef5""},{""sha"":""c8e6a3fb8f9ee595fe292e63449c65a2607a37e1"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Op documentation update.\n\tupdate of g3doc/includes/tf_passes.md\n\nPiperOrigin-RevId: 361390469\nChange-Id: I021164c4d178203466995dc14d99b49f504682dc"",""distinct"":true,""url"":""https://api.github.com/repos/advaitjain/tensorflow/commits/c8e6a3fb8f9ee595fe292e63449c65a2607a37e1""},{""sha"":""86b2eda252f56be6b357195b3809d8a365987f62"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""compat: Update forward compatibility horizon to 2021-03-07\n\nPiperOrigin-RevId: 361392925\nChange-Id: I588c1d653d3e7ffea3425430b51582f34db4f1a8"",""distinct"":true,""url"":""https://api.github.com/repos/advaitjain/tensorflow/commits/86b2eda252f56be6b357195b3809d8a365987f62""},{""sha"":""3b95a6316b47b10e877151fbca3d12e49a38fdf5"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Update GraphDef version to 698.\n\nPiperOrigin-RevId: 361392931\nChange-Id: Id814635746941c0666d2cf136f6acc424e7d0e9c"",""distinct"":true,""url"":""https://api.github.com/repos/advaitjain/tensorflow/commits/3b95a6316b47b10e877151fbca3d12e49a38fdf5""},{""sha"":""f23a094237765c86b6eaad06a58f26456d6e0cb1"",""author"":{""name"":""Advait Jain"",""email"":""381329857d3dce0cdb28ee10c109de30b1dd6745@users.noreply.github.com""},""message"":""Merge remote-tracking branch 'upstream/master' into local-continuous-builds"",""distinct"":true,""url"":""https://api.github.com/repos/advaitjain/tensorflow/commits/f23a094237765c86b6eaad06a58f26456d6e0cb1""},{""sha"":""cf9cea36306307503a7d6918b450ba459512b385"",""author"":{""name"":""Advait Jain"",""email"":""381329857d3dce0cdb28ee10c109de30b1dd6745@users.noreply.github.com""},""message"":""Update continuous build artifacts for keyword_benchmark."",""distinct"":true,""url"":""https://api.github.com/repos/advaitjain/tensorflow/commits/cf9cea36306307503a7d6918b450ba459512b385""}]",,,,,,,,,,
15436719558,PushEvent,true,2021-03-07 14:07:40.000000 UTC,19330823,wyy0117,323874877,wyy0117/dubbo,"""refs/heads/read2.7.8""",,,6659664219,1,1,"[{""sha"":""8c538af26dd06e1af5dd8c71a1fc2a9f7364bdc2"",""author"":{""name"":""wyy0117"",""email"":""c9e421b2c5921ac61c06ad3322dd9c3789df6f35@qq.com""},""message"":""consumer\nprovider"",""distinct"":true,""url"":""https://api.github.com/repos/wyy0117/dubbo/commits/8c538af26dd06e1af5dd8c71a1fc2a9f7364bdc2""}]",,,,,,,,,,
15436693068,PushEvent,true,2021-03-07 14:01:43.000000 UTC,28105578,yuxuan1,246439877,yuxuan1/opencv,"""refs/heads/master""",,,6659647542,1,1,"[{""sha"":""f2313242fae92ba04a3d601d4d63200e36717511"",""author"":{""name"":""蒋克旋"",""email"":""585203c2d404995525208ebaa7f08fc7e9d9b0aa@yuxuan.local""},""message"":""test for mac mini M1"",""distinct"":true,""url"":""https://api.github.com/repos/yuxuan1/opencv/commits/f2313242fae92ba04a3d601d4d63200e36717511""}]",,,,,,,,,,
15436739904,PushEvent,true,2021-03-07 14:12:24.000000 UTC,28309026,ujjwalabhivns,345325661,ujjwalabhivns/terraform,"""refs/heads/master""",,,6659677103,1,1,"[{""sha"":""c52d4de2c10de7848047380022da9c94bd21337e"",""author"":{""name"":""ujjwalabhivns"",""email"":""e19ee52e6a9b58498d49abffba4546f7fdeb0aae@gmail.com""},""message"":""Update README1.md\n\nupdated readme file"",""distinct"":true,""url"":""https://api.github.com/repos/ujjwalabhivns/terraform/commits/c52d4de2c10de7848047380022da9c94bd21337e""}]",,,,,,,,,,
15436779767,PushEvent,true,2021-03-07 14:21:12.000000 UTC,28309026,ujjwalabhivns,345325661,ujjwalabhivns/terraform,"""refs/heads/master""",,,6659702138,1,1,"[{""sha"":""6acf51a4651c80555438c1c506a6972d043c57cf"",""author"":{""name"":""Ujjawal Pathak"",""email"":""3dd91aebe0e32839e6616ce028261db4bdc1ff0d@atos.net""},""message"":""updated files"",""distinct"":true,""url"":""https://api.github.com/repos/ujjwalabhivns/terraform/commits/6acf51a4651c80555438c1c506a6972d043c57cf""}]",,,,,,,,,,
15436771221,PushEvent,true,2021-03-07 14:19:19.000000 UTC,28309026,ujjwalabhivns,345325661,ujjwalabhivns/terraform,"""refs/heads/master""",,,6659696731,1,1,"[{""sha"":""defa283ca5282624c61367921a063bf52e08291b"",""author"":{""name"":""ujjwalabhivns"",""email"":""e19ee52e6a9b58498d49abffba4546f7fdeb0aae@gmail.com""},""message"":""Update README1.md\n\nupdated readme file"",""distinct"":true,""url"":""https://api.github.com/repos/ujjwalabhivns/terraform/commits/defa283ca5282624c61367921a063bf52e08291b""}]",,,,,,,,,,
15436843309,PushEvent,true,2021-03-07 14:34:34.000000 UTC,28309026,ujjwalabhivns,345325661,ujjwalabhivns/terraform,"""refs/heads/master""",,,6659742339,1,1,"[{""sha"":""1a01f7f61ae1f250fccb16026412ccdbc2d726bf"",""author"":{""name"":""ujjwalabhivns"",""email"":""e19ee52e6a9b58498d49abffba4546f7fdeb0aae@gmail.com""},""message"":""Update README.md\n\nupadted read me file"",""distinct"":true,""url"":""https://api.github.com/repos/ujjwalabhivns/terraform/commits/1a01f7f61ae1f250fccb16026412ccdbc2d726bf""}]",,,,,,,,,,
15436744873,PushEvent,true,2021-03-07 14:13:33.000000 UTC,28309026,ujjwalabhivns,345325661,ujjwalabhivns/terraform,"""refs/heads/master""",,,6659680263,1,1,"[{""sha"":""2e10892e2035e883aed9e2b6a9f8150124f9d153"",""author"":{""name"":""ujjwalabhivns"",""email"":""e19ee52e6a9b58498d49abffba4546f7fdeb0aae@gmail.com""},""message"":""Update README1.md\n\nupdated readme file"",""distinct"":true,""url"":""https://api.github.com/repos/ujjwalabhivns/terraform/commits/2e10892e2035e883aed9e2b6a9f8150124f9d153""}]",,,,,,,,,,
15436730550,PushEvent,true,2021-03-07 14:10:13.000000 UTC,28309026,ujjwalabhivns,345325661,ujjwalabhivns/terraform,"""refs/heads/master""",,,6659671070,1,1,"[{""sha"":""d5b4976c6deb2d5c1d15b09f69294fddcb6c94ac"",""author"":{""name"":""Ujjawal Pathak"",""email"":""3dd91aebe0e32839e6616ce028261db4bdc1ff0d@atos.net""},""message"":""Latest"",""distinct"":true,""url"":""https://api.github.com/repos/ujjwalabhivns/terraform/commits/d5b4976c6deb2d5c1d15b09f69294fddcb6c94ac""}]",,,,,,,,,,
15436764594,PushEvent,true,2021-03-07 14:17:53.000000 UTC,28309026,ujjwalabhivns,345325661,ujjwalabhivns/terraform,"""refs/heads/master""",,,6659692596,1,1,"[{""sha"":""4daed366d099d91472db422a18a38bee26a8f91c"",""author"":{""name"":""ujjwalabhivns"",""email"":""e19ee52e6a9b58498d49abffba4546f7fdeb0aae@gmail.com""},""message"":""Update README1.md\n\nupdated readme file"",""distinct"":true,""url"":""https://api.github.com/repos/ujjwalabhivns/terraform/commits/4daed366d099d91472db422a18a38bee26a8f91c""}]",,,,,,,,,,
15436871498,PushEvent,true,2021-03-07 14:40:42.000000 UTC,28309026,ujjwalabhivns,345325661,ujjwalabhivns/terraform,"""refs/heads/master""",,,6659760205,1,1,"[{""sha"":""1c5e42ba22cc822429b83ca64f5306013cf10b94"",""author"":{""name"":""ujjwalabhivns"",""email"":""e19ee52e6a9b58498d49abffba4546f7fdeb0aae@gmail.com""},""message"":""Update README.md\n\nupdated file"",""distinct"":true,""url"":""https://api.github.com/repos/ujjwalabhivns/terraform/commits/1c5e42ba22cc822429b83ca64f5306013cf10b94""}]",,,,,,,,,,
15436934943,PushEvent,true,2021-03-07 14:54:21.000000 UTC,35373005,Jasonhls,345278613,Jasonhls/dubbo,"""refs/heads/3.0""",,,6659800672,1,1,"[{""sha"":""9d8e2442d6979c1ef41ffad22b1534822b9b1eb8"",""author"":{""name"":""Jasonhls"",""email"":""e36ed96f024275c8dbb37657be4b22c018145a21@qq.com""},""message"":""添加注释"",""distinct"":true,""url"":""https://api.github.com/repos/Jasonhls/dubbo/commits/9d8e2442d6979c1ef41ffad22b1534822b9b1eb8""}]",,,,,,,,,,
15436764200,PullRequestEvent,true,2021-03-07 14:17:48.000000 UTC,39814207,pull[bot],257509699,gouda1a1/dubbo,,,,,,,,"""closed""",12,,,,,,,,
15436764150,PushEvent,true,2021-03-07 14:17:48.000000 UTC,39814207,pull[bot],257509699,gouda1a1/dubbo,"""refs/heads/master""",,,6659692324,1,1,"[{""sha"":""96e44f60365832225990360f9485ace45fad85f0"",""author"":{""name"":""xiaoheng1"",""email"":""6350aee017b26f4750917972de057d2f54c2e260@qq.com""},""message"":""Solve local exposure, the server opens the token, and the client call fails (#7334)\n\n* fix #7024 Solve local exposure, the server opens the token, and the client call fails.\r\n\r\n* delete issue link"",""distinct"":true,""url"":""https://api.github.com/repos/gouda1a1/dubbo/commits/96e44f60365832225990360f9485ace45fad85f0""}]",,,,,,,,,,
15436955842,PushEvent,true,2021-03-07 14:58:50.000000 UTC,59114417,rexoxis,342213225,rexoxis/react,"""refs/heads/master""",,,6659814048,1,1,"[{""sha"":""918edb9f9cd74c00ad32db0481a0099a486cc547"",""author"":{""name"":""hoon"",""email"":""ebc13f5ae8ab34cf1a6362187ee3b129a0fcd85d@hanmail.net""},""message"":""router test"",""distinct"":true,""url"":""https://api.github.com/repos/rexoxis/react/commits/918edb9f9cd74c00ad32db0481a0099a486cc547""}]",,,,,,,,,,
15436845173,PushEvent,true,2021-03-07 14:34:59.000000 UTC,75043201,RobertBukowiecki,341632244,RobertBukowiecki/react,"""refs/heads/main""",,,6659743590,1,1,"[{""sha"":""97b738f25197b814f7af10b1ef17ed3e8bd327b1"",""author"":{""name"":""Robert Bukowiecki"",""email"":""29e00c6d30786131acbff724a757bdf05a5cab87@gmail.com""},""message"":""16.5"",""distinct"":true,""url"":""https://api.github.com/repos/RobertBukowiecki/react/commits/97b738f25197b814f7af10b1ef17ed3e8bd327b1""}]",,,,,,,,,,
15436937510,IssuesEvent,true,2021-03-07 14:54:53.000000 UTC,16585330,harvies,4710920,apache/dubbo,,,,,,,,"""closed""",,,,,,,,,
15436940263,IssueCommentEvent,true,2021-03-07 14:55:27.000000 UTC,29597,bvaughn,10270250,facebook/react,,,,,,,,"""created""",,,,,,,,,
15436711259,PullRequestReviewEvent,true,2021-03-07 14:05:46.000000 UTC,810438,gaearon,10270250,facebook/react,,,,,,,,"""created""",20948,,,"""approved""","""MEMBER""",,,,
15436809152,ForkEvent,true,2021-03-07 14:27:23.000000 UTC,43735265,Zephyrrro,10270250,facebook/react,,,,,,,,,,"""Zephyrrro/react""",,,,,,,
15436879600,ForkEvent,true,2021-03-07 14:42:26.000000 UTC,63664402,NinjaInShade,10270250,facebook/react,,,,,,,,,,"""NinjaInShade/react""",,,,,,,
15436837699,ForkEvent,true,2021-03-07 14:33:21.000000 UTC,70240447,nj-eka,10270250,facebook/react,,,,,,,,,,"""nj-eka/react""",,,,,,,
15436862451,WatchEvent,true,2021-03-07 14:38:45.000000 UTC,79973504,Woooooooolf,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15436733158,WatchEvent,true,2021-03-07 14:10:49.000000 UTC,80206722,Totty-stack,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15436699169,IssuesEvent,true,2021-03-07 14:03:02.000000 UTC,58905345,alfa0977,658518,ipython/ipython,,,,,,,,"""opened""",,,,,,,,,
15436698684,WatchEvent,true,2021-03-07 14:02:56.000000 UTC,58905345,alfa0977,658518,ipython/ipython,,,,,,,,"""started""",,,,,,,,,
15436931143,PullRequestReviewEvent,true,2021-03-07 14:53:33.000000 UTC,5402633,thomasjpfan,843222,scikit-learn/scikit-learn,,,,,,,,"""created""",19634,,,"""approved""","""MEMBER""",,,,
15436880869,IssueCommentEvent,true,2021-03-07 14:42:43.000000 UTC,5402633,thomasjpfan,843222,scikit-learn/scikit-learn,,,,,,,,"""created""",,,,,,,,,
15436937046,PushEvent,true,2021-03-07 14:54:47.000000 UTC,5402633,thomasjpfan,843222,scikit-learn/scikit-learn,"""refs/heads/main""",,,6659801964,1,1,"[{""sha"":""42e90e9ba28fb37c2c9bd3e8aed1ac2387f1d5d5"",""author"":{""name"":""RichardScottOZ"",""email"":""692992d3c21418ff3c357ad9583d54643054d025@users.noreply.github.com""},""message"":""DOC Fixes spelling mistake in _kmeans.py (#19634)\n\nCompatibility typo"",""distinct"":true,""url"":""https://api.github.com/repos/scikit-learn/scikit-learn/commits/42e90e9ba28fb37c2c9bd3e8aed1ac2387f1d5d5""}]",,,,,,,,,,
15436927535,IssueCommentEvent,true,2021-03-07 14:52:44.000000 UTC,5402633,thomasjpfan,843222,scikit-learn/scikit-learn,,,,,,,,"""created""",,,,,,,,,
15436934625,PullRequestEvent,true,2021-03-07 14:54:17.000000 UTC,5402633,thomasjpfan,843222,scikit-learn/scikit-learn,,,,,,,,"""closed""",19634,,,,,,,,
15436864196,WatchEvent,true,2021-03-07 14:39:08.000000 UTC,9008063,Asabeneh,843222,scikit-learn/scikit-learn,,,,,,,,"""started""",,,,,,,,,
15436920854,ForkEvent,true,2021-03-07 14:51:15.000000 UTC,12967215,kruthi-meghana,843222,scikit-learn/scikit-learn,,,,,,,,,,"""kruthi-meghana/scikit-learn""",,,,,,,
15436920550,WatchEvent,true,2021-03-07 14:51:12.000000 UTC,22548053,herzulu007,843222,scikit-learn/scikit-learn,,,,,,,,"""started""",,,,,,,,,
15436810404,WatchEvent,true,2021-03-07 14:27:40.000000 UTC,39255247,vaniaparamita,843222,scikit-learn/scikit-learn,,,,,,,,"""started""",,,,,,,,,
15436708930,ForkEvent,true,2021-03-07 14:05:12.000000 UTC,60713135,njmosca,843222,scikit-learn/scikit-learn,,,,,,,,,,"""njmosca/scikit-learn""",,,,,,,
15436862906,IssuesEvent,true,2021-03-07 14:38:51.000000 UTC,2598808,schollii,17728164,hashicorp/terraform,,,,,,,,"""closed""",,,,,,,,,
15436862886,IssueCommentEvent,true,2021-03-07 14:38:51.000000 UTC,2598808,schollii,17728164,hashicorp/terraform,,,,,,,,"""created""",,,,,,,,,
15436891283,IssueCommentEvent,true,2021-03-07 14:45:04.000000 UTC,15225530,KaungZawHtet,3431193,yiisoft/yii2,,,,,,,,"""created""",,,,,,,,,
15436887636,ForkEvent,true,2021-03-07 14:44:17.000000 UTC,7705200,nosregor,5108051,opencv/opencv,,,,,,,,,,"""nosregor/opencv""",,,,,,,
15436893355,WatchEvent,true,2021-03-07 14:45:29.000000 UTC,68095420,saxenaiway,5108051,opencv/opencv,,,,,,,,"""started""",,,,,,,,,
15436912806,ForkEvent,true,2021-03-07 14:49:33.000000 UTC,26111910,Pank12,117169328,Azure/terraform,,,,,,,,,,"""Pank12/terraform""",,,,,,,
15436849726,IssuesEvent,true,2021-03-07 14:35:58.000000 UTC,36450583,wusuobuzai,4576305,openzipkin/zipkin,,,,,,,,"""opened""",,,,,,,,,
15436922813,IssuesEvent,true,2021-03-07 14:51:41.000000 UTC,166966,jameshfisher,45717250,tensorflow/tensorflow,,,,,,,,"""opened""",,,,,,,,,
15436738391,IssuesEvent,true,2021-03-07 14:12:04.000000 UTC,614159,gqqnbig,45717250,tensorflow/tensorflow,,,,,,,,"""opened""",,,,,,,,,
15436861866,PullRequestReviewEvent,true,2021-03-07 14:38:36.000000 UTC,1309817,yyoon,45717250,tensorflow/tensorflow,,,,,,,,"""created""",47605,,,"""approved""","""MEMBER""",,,,
15436699739,IssueCommentEvent,true,2021-03-07 14:03:09.000000 UTC,3395998,freedomtan,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15436943056,IssueCommentEvent,true,2021-03-07 14:56:05.000000 UTC,56610014,tensorflow-butler[bot],45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15436931762,ForkEvent,true,2021-03-07 14:53:41.000000 UTC,72881082,insecureit,7691631,moby/moby,,,,,,,,,,"""insecureit/moby""",,,,,,,
15436930481,WatchEvent,true,2021-03-07 14:53:24.000000 UTC,72887277,mysmb-git,7691631,moby/moby,,,,,,,,"""started""",,,,,,,,,
15436798707,WatchEvent,true,2021-03-07 14:25:13.000000 UTC,441913,tsawler,153265258,rocketlaunchr/react,,,,,,,,"""started""",,,,,,,,,
15436867005,WatchEvent,true,2021-03-07 14:39:46.000000 UTC,47015520,Sheptus,135786093,typescript-cheatsheets/react,,,,,,,,"""started""",,,,,,,,,
15436733736,WatchEvent,true,2021-03-07 14:10:57.000000 UTC,80206722,Totty-stack,135786093,typescript-cheatsheets/react,,,,,,,,"""started""",,,,,,,,,
15436954858,CreateEvent,true,2021-03-07 14:58:37.000000 UTC,72887277,mysmb-git,345373495,insecureit/moby,"""mo""","""branch""","""user""",,,,,,,,,,,,,,
15437681062,PushEvent,true,2021-03-07 17:35:34.000000 UTC,3671106,tfeher,223155159,tfeher/tensorflow,"""refs/heads/trt_reshape_dynamic""",,,6660269791,1,1,"[{""sha"":""a341b3af30aa57eaaf263a6d6aba9bb66e8f2052"",""author"":{""name"":""Tamas Bela Feher"",""email"":""6d113d1f7b86c7ce2a423acd09e28148e810f830@nvidia.com""},""message"":""TF-TRT update reshape op for dynamic shape input\n\nTF-TRT Add profile management for shape input tensors\n\nTF-TRT allow scalars for TRT6 or above\n\nTF-TRT Improve engine serialization test\n\nAdditionally improve shape value handling. Adapt to Shape IO API change in TRT 7.1.3."",""distinct"":true,""url"":""https://api.github.com/repos/tfeher/tensorflow/commits/a341b3af30aa57eaaf263a6d6aba9bb66e8f2052""}]",,,,,,,,,,
15437624301,PushEvent,true,2021-03-07 17:23:12.000000 UTC,9742760,mohamedsahadkp,151262459,mohamedsahadkp/terraform,"""refs/heads/master""",,,6660234319,1,1,"[{""sha"":""f3df68bab9e2ec26d2252843610d91441031c54d"",""author"":{""name"":""Mohamed Sahad"",""email"":""2e19bec7c1763bdf54b28ca3dd40c5d6fca9f449""},""message"":""added provisioner for ec2"",""distinct"":true,""url"":""https://api.github.com/repos/mohamedsahadkp/terraform/commits/f3df68bab9e2ec26d2252843610d91441031c54d""}]",,,,,,,,,,
15437631793,PushEvent,true,2021-03-07 17:24:43.000000 UTC,9742760,mohamedsahadkp,151262459,mohamedsahadkp/terraform,"""refs/heads/master""",,,6660238735,1,1,"[{""sha"":""5d334bef6f52c09a6f72a4e497dc934cb90694c8"",""author"":{""name"":""Mohamed Sahad"",""email"":""2e19bec7c1763bdf54b28ca3dd40c5d6fca9f449""},""message"":""added provisioner for ec2"",""distinct"":true,""url"":""https://api.github.com/repos/mohamedsahadkp/terraform/commits/5d334bef6f52c09a6f72a4e497dc934cb90694c8""}]",,,,,,,,,,
15437751913,PushEvent,true,2021-03-07 17:51:25.000000 UTC,16626084,nickwongwong,345035479,nickwongwong/dubbo,"""refs/heads/master""",,,6660314187,1,1,"[{""sha"":""9abb4c565387d02dfba2b1074db1cb6c46059313"",""author"":{""name"":""Nick Wong"",""email"":""fc967db43048709ba56f7087be3dd42799f1efdb@yeah.net""},""message"":""set DubboBootstrap ready to true after ServiceConfig doExport"",""distinct"":true,""url"":""https://api.github.com/repos/nickwongwong/dubbo/commits/9abb4c565387d02dfba2b1074db1cb6c46059313""}]",,,,,,,,,,
15437720713,PushEvent,true,2021-03-07 17:44:31.000000 UTC,16626084,nickwongwong,345035479,nickwongwong/dubbo,"""refs/heads/master""",,,6660294797,1,1,"[{""sha"":""a65ec092425d79b27fde488da612dd3eecbc6195"",""author"":{""name"":""Nick Wong"",""email"":""fc967db43048709ba56f7087be3dd42799f1efdb@yeah.net""},""message"":""Add setter for ready in DubboBootstrap"",""distinct"":true,""url"":""https://api.github.com/repos/nickwongwong/dubbo/commits/a65ec092425d79b27fde488da612dd3eecbc6195""}]",,,,,,,,,,
15437739953,PushEvent,true,2021-03-07 17:48:42.000000 UTC,19350761,GalinaKalashnik,283957664,GalinaKalashnik/react,"""refs/heads/start""",,,6660306667,1,1,"[{""sha"":""97b400145d58c9b09fd4c21301e30b5c21875b7a"",""author"":{""name"":""galaKalashnik"",""email"":""96cae9986dc97cb5e8b160ef4a4a430ff4909d6b@balanceinternet.com.au""},""message"":""start: main start structure"",""distinct"":true,""url"":""https://api.github.com/repos/GalinaKalashnik/react/commits/97b400145d58c9b09fd4c21301e30b5c21875b7a""}]",,,,,,,,,,
15437673149,PushEvent,true,2021-03-07 17:33:46.000000 UTC,26545643,TheCrashDown,345211559,TheCrashDown/tensorflow,"""refs/heads/r1.14""",,,6660264781,1,1,"[{""sha"":""55bed97d74d9033e201abdc91e9fbd7238ce4374"",""author"":{""name"":""crashdown"",""email"":""abaee3d67f415d2ad379b1248a74e0574f6bdfd7@phystech.edu""},""message"":""add submodule"",""distinct"":true,""url"":""https://api.github.com/repos/TheCrashDown/tensorflow/commits/55bed97d74d9033e201abdc91e9fbd7238ce4374""}]",,,,,,,,,,
15437744772,PushEvent,true,2021-03-07 17:49:49.000000 UTC,31540189,PeYceBall,345400191,PeYceBall/tensorflow,"""refs/heads/r1.14""",,,6660309599,1,1,"[{""sha"":""9230a4216334305f97d6c3e80c8f9d849b83d30a"",""author"":{""name"":""PeYceBall"",""email"":""0179a230b41b2367f60ccd68ece5d3ecb21513f5@phystech.edu""},""message"":""remove contrib and add contrib submodule"",""distinct"":true,""url"":""https://api.github.com/repos/PeYceBall/tensorflow/commits/9230a4216334305f97d6c3e80c8f9d849b83d30a""}]",,,,,,,,,,
15437761930,PullRequestEvent,true,2021-03-07 17:53:45.000000 UTC,39814207,pull[bot],268720602,YashKumarVerma/react,,,,,,,,"""opened""",321,,,,,,,,
15437519098,PushEvent,true,2021-03-07 17:00:12.000000 UTC,39814207,pull[bot],222435850,clunietp/opencv,"""refs/heads/3.4""",,,6660167728,2,2,"[{""sha"":""85009800b3d98ec0370ab718a2afa32f2991b29b"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""videoio(docs): fixes"",""distinct"":true,""url"":""https://api.github.com/repos/clunietp/opencv/commits/85009800b3d98ec0370ab718a2afa32f2991b29b""},{""sha"":""601690695e65fce9c8f85caf8926ab24364c5723"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #19687 from alalek:videoio_docs_fixes_3.4"",""distinct"":true,""url"":""https://api.github.com/repos/clunietp/opencv/commits/601690695e65fce9c8f85caf8926ab24364c5723""}]",,,,,,,,,,
15437519162,PullRequestEvent,true,2021-03-07 17:00:12.000000 UTC,39814207,pull[bot],222435850,clunietp/opencv,,,,,,,,"""closed""",1050,,,,,,,,
15437789266,PullRequestEvent,true,2021-03-07 17:59:54.000000 UTC,39814207,pull[bot],137995820,Mu-L/react,,,,,,,,"""opened""",302,,,,,,,,
15437761335,PullRequestEvent,true,2021-03-07 17:53:37.000000 UTC,39814207,pull[bot],196524330,Mu-L/dubbo,,,,,,,,"""closed""",69,,,,,,,,
15437787067,PushEvent,true,2021-03-07 17:59:26.000000 UTC,39814207,pull[bot],260871164,lancygoyal/react,"""refs/heads/master""",,,6660336429,1,1,"[{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/lancygoyal/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""}]",,,,,,,,,,
15437711087,PullRequestEvent,true,2021-03-07 17:42:20.000000 UTC,39814207,pull[bot],258565520,Qwerty0x64/react,,,,,,,,"""opened""",395,,,,,,,,
15437787095,PullRequestEvent,true,2021-03-07 17:59:26.000000 UTC,39814207,pull[bot],260871164,lancygoyal/react,,,,,,,,"""closed""",369,,,,,,,,
15437687723,PullRequestEvent,true,2021-03-07 17:37:05.000000 UTC,39814207,pull[bot],283146831,r4b3rt/react,,,,,,,,"""opened""",270,,,,,,,,
15437761740,PushEvent,true,2021-03-07 17:53:43.000000 UTC,39814207,pull[bot],196524330,Mu-L/dubbo,"""refs/heads/master""",,,6660320500,102,102,"[{""sha"":""d59492514d2850d04dbb4823553ef9a80d28b1ae"",""author"":{""name"":""斩秋"",""email"":""6056b2fdde01a4ba5d36de2a7b549c342b63a7c8@users.noreply.github.com""},""message"":""merge migration  rule support from 3.0 (#6773)"",""distinct"":true,""url"":""https://api.github.com/repos/Mu-L/dubbo/commits/d59492514d2850d04dbb4823553ef9a80d28b1ae""},{""sha"":""8a6fd8b2adeb566dc0b281846e827694845e2ed5"",""author"":{""name"":""Kirs"",""email"":""e3626968a6c7f7621433361c97f5ac9e93b36f6f@163.com""},""message"":""update year to 2021 (#7139)"",""distinct"":true,""url"":""https://api.github.com/repos/Mu-L/dubbo/commits/8a6fd8b2adeb566dc0b281846e827694845e2ed5""},{""sha"":""02f236e96dc34cdd715e75c837b881a9c09c48a7"",""author"":{""name"":""Albumen Kevin"",""email"":""bbabf03ee0d7702e3da35298bd27899c57dc84be@gmail.com""},""message"":""Add Dubbo-Spring-Boot build for github actions (#7135)\n\n* Add Dubbo-Spring-Boot build for github actions\r\n\r\n* Add dubbo-spring-boot git branch env\r\n\r\n* Add workflow_dispatch support"",""distinct"":true,""url"":""https://api.github.com/repos/Mu-L/dubbo/commits/02f236e96dc34cdd715e75c837b881a9c09c48a7""},{""sha"":""7ddf6114b011b87631b0e72129630b0eb2133e05"",""author"":{""name"":""Huang YunKun"",""email"":""a1eac4cad8e9685194925e97cf5f6b5d602909a7@gmail.com""},""message"":""[CI] fix snapshot auto deploy"",""distinct"":true,""url"":""https://api.github.com/repos/Mu-L/dubbo/commits/7ddf6114b011b87631b0e72129630b0eb2133e05""},{""sha"":""b429763f4d651c7f82b2fad7dd58713ea774cc54"",""author"":{""name"":""gongdewei"",""email"":""81673e8206ed2e185b06d10bb889a21018ea963c@qq.com""},""message"":""improve dubbo cache and job depends (#7147)\n\n* improve dubbo cache and job depends\r\n\r\n* Improve dubbo cache (#1)\r\n\r\nMerge Dubbo-Spring-Boot build with Dubbo\r\n\r\n* improve dubbo version\r\n\r\nCo-authored-by: Albumen Kevin <jhq0812@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/Mu-L/dubbo/commits/b429763f4d651c7f82b2fad7dd58713ea774cc54""},{""sha"":""25761bb51b7c3a8702690bca821aa1658bcca0d7"",""author"":{""name"":""gongdewei"",""email"":""81673e8206ed2e185b06d10bb889a21018ea963c@qq.com""},""message"":""update zk depends (#7152)"",""distinct"":true,""url"":""https://api.github.com/repos/Mu-L/dubbo/commits/25761bb51b7c3a8702690bca821aa1658bcca0d7""},{""sha"":""f4b225eb3a5acdf7c9064763f522ea0b86421c8d"",""author"":{""name"":""张远征hd"",""email"":""d71a1b2599e40c060f8565d711ec0768a541d182@163.com""},""message"":""Heartbeat skip serialize and deserialize (#7077)"",""distinct"":true,""url"":""https://api.github.com/repos/Mu-L/dubbo/commits/f4b225eb3a5acdf7c9064763f522ea0b86421c8d""},{""sha"":""711343eda70a7597182d024111423a8aba9a4b14"",""author"":{""name"":""ken.lj"",""email"":""822a448a2ec5862faf82fc0d0933a9bdefde0f49@gmail.com""},""message"":""fix deserialization vulnerability"",""distinct"":true,""url"":""https://api.github.com/repos/Mu-L/dubbo/commits/711343eda70a7597182d024111423a8aba9a4b14""},{""sha"":""1373fe0401d22d203f398b94f00bf63213973663"",""author"":{""name"":""张远征hd"",""email"":""d71a1b2599e40c060f8565d711ec0768a541d182@163.com""},""message"":""Heartbeat skip serialize and deserialize (#7077)"",""distinct"":true,""url"":""https://api.github.com/repos/Mu-L/dubbo/commits/1373fe0401d22d203f398b94f00bf63213973663""},{""sha"":""e62014f96399cc0aadc9e3e3275b1d07e85122ba"",""author"":{""name"":""ken.lj"",""email"":""822a448a2ec5862faf82fc0d0933a9bdefde0f49@gmail.com""},""message"":""check serialization id on both side"",""distinct"":true,""url"":""https://api.github.com/repos/Mu-L/dubbo/commits/e62014f96399cc0aadc9e3e3275b1d07e85122ba""},{""sha"":""0c9b8325eee1f3a6e22b339b9ba539b909102022"",""author"":{""name"":""ken.lj"",""email"":""822a448a2ec5862faf82fc0d0933a9bdefde0f49@gmail.com""},""message"":""update pom version to 2.7.8.1"",""distinct"":true,""url"":""https://api.github.com/repos/Mu-L/dubbo/commits/0c9b8325eee1f3a6e22b339b9ba539b909102022""},{""sha"":""0098743959250e3760e74c6c840f2840bf201ac7"",""author"":{""name"":""ken.lj"",""email"":""822a448a2ec5862faf82fc0d0933a9bdefde0f49@gmail.com""},""message"":""fix ut"",""distinct"":true,""url"":""https://api.github.com/repos/Mu-L/dubbo/commits/0098743959250e3760e74c6c840f2840bf201ac7""},{""sha"":""86a6ec63377adea26c15b4f58c5c5ed91b6f59c1"",""author"":{""name"":""ken.lj"",""email"":""822a448a2ec5862faf82fc0d0933a9bdefde0f49@gmail.com""},""message"":""fix codec ut"",""distinct"":true,""url"":""https://api.github.com/repos/Mu-L/dubbo/commits/86a6ec63377adea26c15b4f58c5c5ed91b6f59c1""},{""sha"":""77457bbeacff4560a158197fcf9d56b83c3103b7"",""author"":{""name"":""ken.lj"",""email"":""822a448a2ec5862faf82fc0d0933a9bdefde0f49@gmail.com""},""message"":""check serialization type"",""distinct"":true,""url"":""https://api.github.com/repos/Mu-L/dubbo/commits/77457bbeacff4560a158197fcf9d56b83c3103b7""},{""sha"":""c4f3aa1c5b8771fe1a196f0e879166905d8edb45"",""author"":{""name"":""ken.lj"",""email"":""822a448a2ec5862faf82fc0d0933a9bdefde0f49@gmail.com""},""message"":""ignore ut"",""distinct"":true,""url"":""https://api.github.com/repos/Mu-L/dubbo/commits/c4f3aa1c5b8771fe1a196f0e879166905d8edb45""},{""sha"":""419d7b2b93e6ad3d53254d1092b38144dc753555"",""author"":{""name"":""ken.lj"",""email"":""822a448a2ec5862faf82fc0d0933a9bdefde0f49@gmail.com""},""message"":""disable junit5 ut"",""distinct"":true,""url"":""https://api.github.com/repos/Mu-L/dubbo/commits/419d7b2b93e6ad3d53254d1092b38144dc753555""},{""sha"":""889448179ffdda2bc205895dc5fb8440e17134fc"",""author"":{""name"":""ken.lj"",""email"":""822a448a2ec5862faf82fc0d0933a9bdefde0f49@gmail.com""},""message"":""fix ut"",""distinct"":true,""url"":""https://api.github.com/repos/Mu-L/dubbo/commits/889448179ffdda2bc205895dc5fb8440e17134fc""},{""sha"":""acd0e8e9f4c63970e42debb229c5d5b918ffb994"",""author"":{""name"":""ken.lj"",""email"":""822a448a2ec5862faf82fc0d0933a9bdefde0f49@gmail.com""},""message"":""check serialization not null before set, too many uts to fix"",""distinct"":true,""url"":""https://api.github.com/repos/Mu-L/dubbo/commits/acd0e8e9f4c63970e42debb229c5d5b918ffb994""},{""sha"":""26e3e89249a3793993b5437c8f051a6ce6d7d054"",""author"":{""name"":""ken.lj"",""email"":""822a448a2ec5862faf82fc0d0933a9bdefde0f49@gmail.com""},""message"":""return object type"",""distinct"":true,""url"":""https://api.github.com/repos/Mu-L/dubbo/commits/26e3e89249a3793993b5437c8f051a6ce6d7d054""},{""sha"":""0c06a4a79fb1d1dbcdbfc619058f8b342f0f7956"",""author"":{""name"":""ken.lj"",""email"":""822a448a2ec5862faf82fc0d0933a9bdefde0f49@gmail.com""},""message"":""disable etcd ut"",""distinct"":true,""url"":""https://api.github.com/repos/Mu-L/dubbo/commits/0c06a4a79fb1d1dbcdbfc619058f8b342f0f7956""}]",,,,,,,,,,
15437667997,PullRequestEvent,true,2021-03-07 17:32:38.000000 UTC,39814207,pull[bot],260871164,lancygoyal/react,,,,,,,,"""opened""",369,,,,,,,,
15437786074,PushEvent,true,2021-03-07 17:59:13.000000 UTC,43620425,chaudharypraveen98,251297635,chaudharypraveen98/react,"""refs/heads/master""",,,6660335784,1,1,"[{""sha"":""2bb010ce0de8f8a06a15aa89d57e1fb5b2f6b469"",""author"":{""name"":""Praveen Chaudhary"",""email"":""5bc2cecbc7e40e6e53057f524fac3a422a5910d8@users.noreply.github.com""},""message"":""Update README.md"",""distinct"":true,""url"":""https://api.github.com/repos/chaudharypraveen98/react/commits/2bb010ce0de8f8a06a15aa89d57e1fb5b2f6b469""}]",,,,,,,,,,
15437768661,IssueCommentEvent,true,2021-03-07 17:55:19.000000 UTC,65753204,yashkumarverma-assistant[bot],268720602,YashKumarVerma/react,,,,,,,,"""created""",,,,,,,,,
15437745977,PushEvent,true,2021-03-07 17:50:05.000000 UTC,5785700,joshfischer1108,43158694,apache/incubator-heron,"""refs/heads/asf-site""",,,6660310318,1,1,"[{""sha"":""19c3dcd0ad1c96dbdad6efb3714552f11c0a3745"",""author"":{""name"":""Heron Site Updater"",""email"":""34c6fceca75e456f25e7e99531e2425c6c1de443@heron.incubator.apache.org""},""message"":""git-site-role commit from publish_site.sh"",""distinct"":true,""url"":""https://api.github.com/repos/apache/incubator-heron/commits/19c3dcd0ad1c96dbdad6efb3714552f11c0a3745""}]",,,,,,,,,,
15437780256,IssueCommentEvent,true,2021-03-07 17:57:57.000000 UTC,16626084,nickwongwong,4710920,apache/dubbo,,,,,,,,"""created""",,,,,,,,,
15437610408,PullRequestEvent,true,2021-03-07 17:20:03.000000 UTC,3624098,acdlite,10270250,facebook/react,,,,,,,,"""closed""",20948,,,,,,,,
15437611901,PushEvent,true,2021-03-07 17:20:20.000000 UTC,3624098,acdlite,10270250,facebook/react,"""refs/heads/master""",,,6660226027,1,1,"[{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/facebook/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""}]",,,,,,,,,,
15437610388,IssuesEvent,true,2021-03-07 17:20:03.000000 UTC,3624098,acdlite,10270250,facebook/react,,,,,,,,"""closed""",,,,,,,,,
15437632105,WatchEvent,true,2021-03-07 17:24:47.000000 UTC,9008892,ebrahimiaval,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15437716407,WatchEvent,true,2021-03-07 17:43:33.000000 UTC,24395605,janapc,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15437729819,ForkEvent,true,2021-03-07 17:46:30.000000 UTC,58679910,M-UsDev,10270250,facebook/react,,,,,,,,,,"""M-UsDev/react""",,,,,,,
15437688015,IssueCommentEvent,true,2021-03-07 17:37:08.000000 UTC,45380,bollwyvl,658518,ipython/ipython,,,,,,,,"""created""",,,,,,,,,
15437789674,ForkEvent,true,2021-03-07 17:59:59.000000 UTC,79803151,Bennyms,843222,scikit-learn/scikit-learn,,,,,,,,,,"""Bennyms/scikit-learn""",,,,,,,
15437649641,IssuesEvent,true,2021-03-07 17:28:37.000000 UTC,5765730,bokov,66285767,rstudio/tensorflow,,,,,,,,"""opened""",,,,,,,,,
15437582439,ForkEvent,true,2021-03-07 17:14:01.000000 UTC,5765730,bokov,66285767,rstudio/tensorflow,,,,,,,,,,"""bokov/tensorflow""",,,,,,,
15437547377,PullRequestEvent,true,2021-03-07 17:06:09.000000 UTC,4981219,alalek,5108051,opencv/opencv,,,,,,,,"""closed""",19685,,,,,,,,
15437548273,PushEvent,true,2021-03-07 17:06:21.000000 UTC,4981219,alalek,5108051,opencv/opencv,"""refs/heads/3.4""",,,6660186131,1,1,"[{""sha"":""31f66766b7b179f67fa81e3f489a0a3f2a9a3437"",""author"":{""name"":""Dan Ben-Yosef"",""email"":""ea4c825ba4b366e28cc98b8221918d50819bef4d@gmail.com""},""message"":""Merge pull request #19685 from danbey:setting_stereoBMImpl_in_init_list\n\nInit params (StereoBMParams) in StereoBMImpl constructor initialization list\r\n\r\n* Init StereoBMImpl in initialization list\r\n\r\nTo improve preformence it is better to init the params (StereoBMImpl) in the\r\ninitialization list.\r\n\r\n* coding style\r\n\r\n* drop useless copy/move ctor\r\n\r\nCo-authored-by: Alexander Alekhin <alexander.a.alekhin@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/opencv/opencv/commits/31f66766b7b179f67fa81e3f489a0a3f2a9a3437""}]",,,,,,,,,,
15437543148,PullRequestReviewEvent,true,2021-03-07 17:05:14.000000 UTC,4981219,alalek,5108051,opencv/opencv,,,,,,,,"""created""",19685,,,"""approved""","""CONTRIBUTOR""",,,,
15437595453,ForkEvent,true,2021-03-07 17:16:51.000000 UTC,66263243,krajnish985,5108051,opencv/opencv,,,,,,,,,,"""krajnish985/opencv""",,,,,,,
15437606042,WatchEvent,true,2021-03-07 17:19:05.000000 UTC,31285950,IgorAssuncao,16072585,phoenixframework/phoenix,,,,,,,,"""started""",,,,,,,,,
15437722424,WatchEvent,true,2021-03-07 17:44:55.000000 UTC,765202,max0x7ba,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15437685171,PullRequestReviewEvent,true,2021-03-07 17:36:28.000000 UTC,3671106,tfeher,45717250,tensorflow/tensorflow,,,,,,,,"""created""",40545,,,"""commented""","""CONTRIBUTOR""",,,,
15437685168,PullRequestReviewEvent,true,2021-03-07 17:36:28.000000 UTC,3671106,tfeher,45717250,tensorflow/tensorflow,,,,,,,,"""created""",40545,,,"""commented""","""CONTRIBUTOR""",,,,
15437608645,WatchEvent,true,2021-03-07 17:19:41.000000 UTC,5943428,geraldo29,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15437608934,WatchEvent,true,2021-03-07 17:19:44.000000 UTC,5943428,geraldo29,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15437679409,WatchEvent,true,2021-03-07 17:35:11.000000 UTC,10472264,zhouyangnk,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15437591403,IssueCommentEvent,true,2021-03-07 17:15:58.000000 UTC,29662476,angelocatalani,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15437524316,IssuesEvent,true,2021-03-07 17:01:11.000000 UTC,34248998,ioannesKX,45717250,tensorflow/tensorflow,,,,,,,,"""opened""",,,,,,,,,
15437558912,IssueCommentEvent,true,2021-03-07 17:08:44.000000 UTC,55460763,around-star,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15437772126,IssueCommentEvent,true,2021-03-07 17:56:05.000000 UTC,56610014,tensorflow-butler[bot],45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15437694566,WatchEvent,true,2021-03-07 17:38:37.000000 UTC,62437448,nqt2402,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15437676460,IssueCommentEvent,true,2021-03-07 17:34:31.000000 UTC,71629843,GungnirASHTTTTT,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15437734067,ForkEvent,true,2021-03-07 17:47:25.000000 UTC,71629843,GungnirASHTTTTT,45717250,tensorflow/tensorflow,,,,,,,,,,"""GungnirASHTTTTT/tensorflow""",,,,,,,
15437588897,IssuesEvent,true,2021-03-07 17:15:25.000000 UTC,71629843,GungnirASHTTTTT,45717250,tensorflow/tensorflow,,,,,,,,"""opened""",,,,,,,,,
15437589640,IssueCommentEvent,true,2021-03-07 17:15:35.000000 UTC,75783690,sspintel,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15437655391,WatchEvent,true,2021-03-07 17:29:55.000000 UTC,4249086,jonnydubowsky,135786093,typescript-cheatsheets/react,,,,,,,,"""started""",,,,,,,,,
15437539580,WatchEvent,true,2021-03-07 17:04:26.000000 UTC,13947854,okslutsiv,135786093,typescript-cheatsheets/react,,,,,,,,"""started""",,,,,,,,,
15437540188,ForkEvent,true,2021-03-07 17:04:34.000000 UTC,13947854,okslutsiv,135786093,typescript-cheatsheets/react,,,,,,,,,,"""okslutsiv/react-1""",,,,,,,
15437772953,PullRequestEvent,true,2021-03-07 17:56:15.000000 UTC,39814207,pull[bot],267619984,vacantthinker-forks/react,,,,,,,,"""opened""",326,,,,,,,,
15437594934,WatchEvent,true,2021-03-07 17:16:44.000000 UTC,180197,ismaproco,248295170,geist-org/react,,,,,,,,"""started""",,,,,,,,,
15437547654,WatchEvent,true,2021-03-07 17:06:13.000000 UTC,62394202,abdulhafizr,248295170,geist-org/react,,,,,,,,"""started""",,,,,,,,,
15437762704,PushEvent,true,2021-03-07 17:53:56.000000 UTC,36276087,ISofiko,342694356,SkuaD01/scikit-learn,"""refs/heads/main""",,,6660321113,3,1,"[{""sha"":""1c70c8e73ee4e45141c893db212ef64beb5377a2"",""author"":{""name"":""Sofia Ilina"",""email"":""8b1b7598f4922068c031eb1119762c6483bf5329@mail.utoronto.ca""},""message"":""Added checker for imputed values shape to avoid shape mismatch, added PLSRegression test to verify"",""distinct"":false,""url"":""https://api.github.com/repos/SkuaD01/scikit-learn/commits/1c70c8e73ee4e45141c893db212ef64beb5377a2""},{""sha"":""4be3bf2c3ff383a4f05fc5ed55095b1e59ae8de5"",""author"":{""name"":""Sofia Ilina"",""email"":""8b1b7598f4922068c031eb1119762c6483bf5329@mail.utoronto.ca""},""message"":""added a test case and comments for shape mismatch issue"",""distinct"":false,""url"":""https://api.github.com/repos/SkuaD01/scikit-learn/commits/4be3bf2c3ff383a4f05fc5ed55095b1e59ae8de5""},{""sha"":""51f6e19d6c0e6cc2025e416370f32ff17a70f90e"",""author"":{""name"":""Sofia Ilina"",""email"":""ea357044e5f66f2815eb1a2eb81e95f4eaaff552@users.noreply.github.com""},""message"":""Merge pull request #1 from SkuaD01/d01-19352-imputer\n\nD01 19352 imputer"",""distinct"":true,""url"":""https://api.github.com/repos/SkuaD01/scikit-learn/commits/51f6e19d6c0e6cc2025e416370f32ff17a70f90e""}]",,,,,,,,,,
15437761051,PullRequestEvent,true,2021-03-07 17:53:34.000000 UTC,36276087,ISofiko,342694356,SkuaD01/scikit-learn,,,,,,,,"""closed""",1,,,,,,,,
15438470066,PushEvent,true,2021-03-07 20:29:35.000000 UTC,800611,brukshut,130750793,brukshut/terraform,"""refs/heads/feature/ebs-module-upgrade""",,,6660760817,2,2,"[{""sha"":""13576f286908883bc5bb016439695ff51ab37109"",""author"":{""name"":""Christian Gough"",""email"":""515e74db1436fdbd04b7620ef875022b5e277020@gmail.com""},""message"":""Move ebs mail to gturn/us-west-1/ebs"",""distinct"":true,""url"":""https://api.github.com/repos/brukshut/terraform/commits/13576f286908883bc5bb016439695ff51ab37109""},{""sha"":""5437ca82e74da46b0a5dca7fd71fa98cadef0e8d"",""author"":{""name"":""Christian Gough"",""email"":""515e74db1436fdbd04b7620ef875022b5e277020@gmail.com""},""message"":""Move statefile location on s3 bucket; upgrade to 0.14.7; add missing tags."",""distinct"":true,""url"":""https://api.github.com/repos/brukshut/terraform/commits/5437ca82e74da46b0a5dca7fd71fa98cadef0e8d""}]",,,,,,,,,,
15438491930,PullRequestEvent,true,2021-03-07 20:34:14.000000 UTC,800611,brukshut,130750793,brukshut/terraform,,,,,,,,"""opened""",64,,,,,,,,
15438361089,DeleteEvent,true,2021-03-07 20:05:34.000000 UTC,800611,brukshut,130750793,brukshut/terraform,"""feature/cleanup-services""","""branch""","""user""",,,,,,,,,,,,,,
15438409589,CreateEvent,true,2021-03-07 20:16:26.000000 UTC,800611,brukshut,130750793,brukshut/terraform,"""feature/ebs-module-upgrade""","""branch""","""user""",,,,,,,,,,,,,,
15438493055,PushEvent,true,2021-03-07 20:34:31.000000 UTC,800611,brukshut,130750793,brukshut/terraform,"""refs/heads/master""",,,6660775002,4,1,"[{""sha"":""5b3eebe88cc7ae31ed777c49459774f1d420ff04"",""author"":{""name"":""Christian Gough"",""email"":""515e74db1436fdbd04b7620ef875022b5e277020@gmail.com""},""message"":""Upgrade ebs encrypted module to 0.13.6"",""distinct"":false,""url"":""https://api.github.com/repos/brukshut/terraform/commits/5b3eebe88cc7ae31ed777c49459774f1d420ff04""},{""sha"":""13576f286908883bc5bb016439695ff51ab37109"",""author"":{""name"":""Christian Gough"",""email"":""515e74db1436fdbd04b7620ef875022b5e277020@gmail.com""},""message"":""Move ebs mail to gturn/us-west-1/ebs"",""distinct"":false,""url"":""https://api.github.com/repos/brukshut/terraform/commits/13576f286908883bc5bb016439695ff51ab37109""},{""sha"":""5437ca82e74da46b0a5dca7fd71fa98cadef0e8d"",""author"":{""name"":""Christian Gough"",""email"":""515e74db1436fdbd04b7620ef875022b5e277020@gmail.com""},""message"":""Move statefile location on s3 bucket; upgrade to 0.14.7; add missing tags."",""distinct"":false,""url"":""https://api.github.com/repos/brukshut/terraform/commits/5437ca82e74da46b0a5dca7fd71fa98cadef0e8d""},{""sha"":""e048d7d0632d1adf401f7da9e5cd45b5739c9ac7"",""author"":{""name"":""Christian Gough"",""email"":""2314b2e3a4a1f7db165be2aafbf1efd78f28cc97@gturn.xyz""},""message"":""Merge pull request #64 from brukshut/feature/ebs-module-upgrade\n\nFeature/ebs module upgrade"",""distinct"":true,""url"":""https://api.github.com/repos/brukshut/terraform/commits/e048d7d0632d1adf401f7da9e5cd45b5739c9ac7""}]",,,,,,,,,,
15438493014,PullRequestEvent,true,2021-03-07 20:34:30.000000 UTC,800611,brukshut,130750793,brukshut/terraform,,,,,,,,"""closed""",64,,,,,,,,
15438346231,CreateEvent,true,2021-03-07 20:02:22.000000 UTC,800611,brukshut,130750793,brukshut/terraform,"""feature/cleanup-services""","""branch""","""user""",,,,,,,,,,,,,,
15438426125,PushEvent,true,2021-03-07 20:19:56.000000 UTC,2789958,advaitjain,214277424,advaitjain/tensorflow,"""refs/heads/local-continuous-builds""",,,6660734019,4,4,"[{""sha"":""6613bf0887142ae7f141bbc00d8cb3d791fdd1a4"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Fix stride mismatch propagation bug across convolutions\n\nPiperOrigin-RevId: 361429642\nChange-Id: I40e18cd9c2ce9750e1949b16f90e7182a682dd0f"",""distinct"":true,""url"":""https://api.github.com/repos/advaitjain/tensorflow/commits/6613bf0887142ae7f141bbc00d8cb3d791fdd1a4""},{""sha"":""efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7"",""author"":{""name"":""Peter Hawkins"",""email"":""34b19541630131950b5f204f2c5f2c647a3a7475@google.com""},""message"":""[XLA:Python] Split DevicePut out of `jax_jit` and refactor it.\n\n* Creates a new py_values.cc/h file to contain device_put.\n* Moves some of the type helpers into the existing types module.\n* Change `PyClient::BufferFromPyval` to call DevicePut. There's no reason to have two similar but subtly different methods for copying a buffer-like object to a device.\n* Refactor and optimize some of the handler functions. In particular, avoid creating a number of unnecessary intermediate objects.\n\nPiperOrigin-RevId: 361430648\nChange-Id: I56b056eb8f0fde20b2f65170fcbf9530cd97d12b"",""distinct"":true,""url"":""https://api.github.com/repos/advaitjain/tensorflow/commits/efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7""},{""sha"":""983598aadabd489b6c84f6268f44b25b3afc622a"",""author"":{""name"":""Advait Jain"",""email"":""381329857d3dce0cdb28ee10c109de30b1dd6745@users.noreply.github.com""},""message"":""Merge remote-tracking branch 'upstream/master' into local-continuous-builds"",""distinct"":true,""url"":""https://api.github.com/repos/advaitjain/tensorflow/commits/983598aadabd489b6c84f6268f44b25b3afc622a""},{""sha"":""cb33e843cf34df92fd414f9d4ee781e5671891d1"",""author"":{""name"":""Advait Jain"",""email"":""381329857d3dce0cdb28ee10c109de30b1dd6745@users.noreply.github.com""},""message"":""Update continuous build artifacts for keyword_benchmark."",""distinct"":true,""url"":""https://api.github.com/repos/advaitjain/tensorflow/commits/cb33e843cf34df92fd414f9d4ee781e5671891d1""}]",,,,,,,,,,
15438480127,CreateEvent,true,2021-03-07 20:31:42.000000 UTC,5402633,thomasjpfan,135866406,thomasjpfan/scikit-learn,"""fix_upstream_failures""","""branch""","""user""",,,,,,,,,,,,,,
15438342799,PushEvent,true,2021-03-07 20:01:37.000000 UTC,6648759,andy-held,45135384,andy-held/opencv,"""refs/heads/master""",,,6660683092,659,0,"[{""sha"":""b91e701f353f9891e19a3ecc8620584bc1b41139"",""author"":{""name"":""ZhangYin"",""email"":""957ed03c8d1f60617ebc2df6fb29801b5cda02d7@iscas.ac.cn""},""message"":""modified rvv option for clang to match LLVM upstream"",""distinct"":false,""url"":""https://api.github.com/repos/andy-held/opencv/commits/b91e701f353f9891e19a3ecc8620584bc1b41139""},{""sha"":""05c011e842195272f6147e17e5eb734d7d034ba4"",""author"":{""name"":""Aitik Gupta"",""email"":""9b6ec8390af4aced7c9b5410873a016fae5458de@gmail.com""},""message"":""Small typo-fix"",""distinct"":false,""url"":""https://api.github.com/repos/andy-held/opencv/commits/05c011e842195272f6147e17e5eb734d7d034ba4""},{""sha"":""564d1a0f79b3a7a528138b990837290f6cacfdd6"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #18802 from aitikgupta:typo"",""distinct"":false,""url"":""https://api.github.com/repos/andy-held/opencv/commits/564d1a0f79b3a7a528138b990837290f6cacfdd6""},{""sha"":""3a184ae6778fb4a2f2baf1395d07707799ff2c95"",""author"":{""name"":""Liubov Batanina"",""email"":""e31e9421dee8ae251952f0c15777e23a2fd06308@yandex.ru""},""message"":""[ONNX] Added handler for int32 tensors"",""distinct"":false,""url"":""https://api.github.com/repos/andy-held/opencv/commits/3a184ae6778fb4a2f2baf1395d07707799ff2c95""},{""sha"":""2b82f8f12c2ac6f66872e0e6316f8f0b21b6ee13"",""author"":{""name"":""Sergei Slashchinin"",""email"":""b480a9bc40f3236639f1dff4594691efcb7e45b4@users.noreply.github.com""},""message"":""Merge pull request #18296 from sl-sergei:fix_16783\n\nFix loading issue for Faster RCNN model from #16783\r\n\r\n* Add a reproducer with multi-output Gather\r\n\r\n* Fix an issue with ONNX graph simplifier\r\n\r\n* fix build\r\n\r\n* Move checks to correct class\r\n\r\n* Minor changes for better code appearence"",""distinct"":false,""url"":""https://api.github.com/repos/andy-held/opencv/commits/2b82f8f12c2ac6f66872e0e6316f8f0b21b6ee13""},{""sha"":""32e7ef8a3d2520e42a0ae1118872caf637ad945a"",""author"":{""name"":""Sergey Slashchinin"",""email"":""bcbba4f0a325461b8337f5eb5a188cc87abbca16@xperience.ai""},""message"":""Add fixes and tests for different layers"",""distinct"":false,""url"":""https://api.github.com/repos/andy-held/opencv/commits/32e7ef8a3d2520e42a0ae1118872caf637ad945a""},{""sha"":""025a9647af50722bb06b58f17ecd27fa27dfc21f"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #18830 from l-bat:issue_18785"",""distinct"":false,""url"":""https://api.github.com/repos/andy-held/opencv/commits/025a9647af50722bb06b58f17ecd27fa27dfc21f""},{""sha"":""23baf1a75e1fd70e300769654afec0024047fe7b"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""dnn: fix High-Level public API (cv::dnn::Model class)\n\n- proxy selected Net methods only (don't derive from Net directly)\n- default Model ctor is protected"",""distinct"":false,""url"":""https://api.github.com/repos/andy-held/opencv/commits/23baf1a75e1fd70e300769654afec0024047fe7b""},{""sha"":""3cdf9264545b1ce47e9cc19ae25e23d2950c53e9"",""author"":{""name"":""Sergey Slashchinin"",""email"":""bcbba4f0a325461b8337f5eb5a188cc87abbca16@xperience.ai""},""message"":""disable Conv1d test on NGRAPH/MYRIAD"",""distinct"":false,""url"":""https://api.github.com/repos/andy-held/opencv/commits/3cdf9264545b1ce47e9cc19ae25e23d2950c53e9""},{""sha"":""72d06080c6fc8009e38eb991c05ad075b44be5e5"",""author"":{""name"":""Liubov Batanina"",""email"":""e31e9421dee8ae251952f0c15777e23a2fd06308@yandex.ru""},""message"":""[ONNX] Added Reduce ops for batch and channel"",""distinct"":false,""url"":""https://api.github.com/repos/andy-held/opencv/commits/72d06080c6fc8009e38eb991c05ad075b44be5e5""},{""sha"":""2b558a3787dc441b11e6c52d5a461b0e2e05795b"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""core: fix F16C compilation check"",""distinct"":false,""url"":""https://api.github.com/repos/andy-held/opencv/commits/2b558a3787dc441b11e6c52d5a461b0e2e05795b""},{""sha"":""b866d0dc388dd9705c1171cfbbe16e7aebe1f84c"",""author"":{""name"":""Dmitry Matveev"",""email"":""2a4eea8e4cff9d49a31a783149ccd6400e8629ef@intel.com""},""message"":""Merge pull request #18793 from dmatveev:dm/in_graph_metadata\n\nG-API: Introduce runtime in-graph metadata\r\n\r\n* G-API: In-graph metadata -- initial implementation\r\n\r\n* G-API: Finish the in-graph metadata implementation for Streaming\r\n\r\n* G-API: Fix standalone build & warnings for in-graph metadata\r\n\r\n* G-API: In-graph meta -- fixed review comments\r\n\r\n* G-API: Fix issues with desync causing failing tests"",""distinct"":false,""url"":""https://api.github.com/repos/andy-held/opencv/commits/b866d0dc388dd9705c1171cfbbe16e7aebe1f84c""},{""sha"":""fe9a8ebea2a6f0cfe1ac3c720548695e5d3a6ce2"",""author"":{""name"":""shioko"",""email"":""2be501663efbd1545c08ccb4cff6397a3d8dbb2f@gmail.com""},""message"":""Fix typo 'Applicatioin'"",""distinct"":false,""url"":""https://api.github.com/repos/andy-held/opencv/commits/fe9a8ebea2a6f0cfe1ac3c720548695e5d3a6ce2""},{""sha"":""2c6a2f0381b6b51d93b7db7907c55e5c944b6ce9"",""author"":{""name"":""Orest Chura"",""email"":""a5129d4d313d563ab8aff65ad6ec81822ff09064@intel.com""},""message"":""Merge pull request #18790 from OrestChura:oc/fitLine\n\n[G-API]: fitLine() Standard Kernel Implementation\r\n\r\n* fitLine API (Mat, 32S, 32F) (2D, 3D)\r\n\r\n* Complete fitLine kernel & accuracy tests\r\n - initialization for vectors of cv::Point and Mats via vectors added\r\n - comparison functions for Vec<T, n> added:\r\n   - straight average difference comparison\r\n   - comparison by equasion for 2d line\r\n - stream overload for cv::DistanceTypes added\r\n\r\n* Fix precommit warnings\r\n\r\n* Fix docs\r\n\r\n* Address comments\r\nTry to fix warning\r\n\r\n* Disable warning in tests"",""distinct"":false,""url"":""https://api.github.com/repos/andy-held/opencv/commits/2c6a2f0381b6b51d93b7db7907c55e5c944b6ce9""},{""sha"":""8357e865bcbab697c3d88c61a16d68471622d862"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #18828 from ichisadashioko:fix-calibration-sample-typo"",""distinct"":false,""url"":""https://api.github.com/repos/andy-held/opencv/commits/8357e865bcbab697c3d88c61a16d68471622d862""},{""sha"":""d266fee8bb0ecdd472e8a89597e8c8c0ac4507cb"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""3rdparty: libjpeg-turbo 2.0.5 => 2.0.6\n\nhttps://github.com/libjpeg-turbo/libjpeg-turbo/releases/tag/2.0.6"",""distinct"":false,""url"":""https://api.github.com/repos/andy-held/opencv/commits/d266fee8bb0ecdd472e8a89597e8c8c0ac4507cb""},{""sha"":""8e1e08ee38b5e6181cb4c9baef95c488a6c75991"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #18833 from sl-sergei:disable_conv1d_wb_test"",""distinct"":false,""url"":""https://api.github.com/repos/andy-held/opencv/commits/8e1e08ee38b5e6181cb4c9baef95c488a6c75991""},{""sha"":""b645fc10a3e4e92ed72f941b6e5dea83e64a8ed8"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #18782 from alalek:issue_18779"",""distinct"":false,""url"":""https://api.github.com/repos/andy-held/opencv/commits/b645fc10a3e4e92ed72f941b6e5dea83e64a8ed8""},{""sha"":""a316b11aaa5baab3a810fa804425f53a3a0a5ca7"",""author"":{""name"":""Omar Alzaibaq"",""email"":""31407be70961e1ce532aa4da540194fecec5dc4f@users.noreply.github.com""},""message"":""Merge pull request #18220 from Omar-AE:hddl-supported\n\n* added HDDL VPU support\r\n\r\n* changed to return True in one line if any device connected\r\n\r\n* dnn: use releaseHDDLPlugin()\r\n\r\n* dnn(hddl): fix conditions"",""distinct"":false,""url"":""https://api.github.com/repos/andy-held/opencv/commits/a316b11aaa5baab3a810fa804425f53a3a0a5ca7""},{""sha"":""474a67231c5445f84186bf95c45a07be903b058a"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""dnn(test): skip gather_multi_output test on Myriad"",""distinct"":false,""url"":""https://api.github.com/repos/andy-held/opencv/commits/474a67231c5445f84186bf95c45a07be903b058a""}]",,,,,,,,,,
15438421831,PushEvent,true,2021-03-07 20:18:59.000000 UTC,6648759,andy-held,45135384,andy-held/opencv,"""refs/heads/umeyama""",,,6660731300,1,1,"[{""sha"":""4047c8d99f99cc2d358921ff62014235d72952a4"",""author"":{""name"":""Andreas Franek"",""email"":""89179d4b41ee88d7fab42338e91e0ec6ccb457b0@gmail.com""},""message"":""add estimateAffine3D overload that implements Umeyama's algorithm"",""distinct"":true,""url"":""https://api.github.com/repos/andy-held/opencv/commits/4047c8d99f99cc2d358921ff62014235d72952a4""}]",,,,,,,,,,
15438342615,CreateEvent,true,2021-03-07 20:01:34.000000 UTC,6648759,andy-held,45135384,andy-held/opencv,"""umeyama""","""branch""","""user""",,,,,,,,,,,,,,
15438375754,DeleteEvent,true,2021-03-07 20:08:56.000000 UTC,9133420,eksperimental,40702645,eksperimental/phoenix,"""simplify_release_generator""","""branch""","""user""",,,,,,,,,,,,,,
15438397849,DeleteEvent,true,2021-03-07 20:13:52.000000 UTC,9133420,eksperimental,40702645,eksperimental/phoenix,"""remove_otp_release_conditional""","""branch""","""user""",,,,,,,,,,,,,,
15438389288,DeleteEvent,true,2021-03-07 20:12:01.000000 UTC,9133420,eksperimental,40702645,eksperimental/phoenix,"""singularize""","""branch""","""user""",,,,,,,,,,,,,,
15438400336,DeleteEvent,true,2021-03-07 20:14:25.000000 UTC,9133420,eksperimental,40702645,eksperimental/phoenix,"""ce_custom_error_pages""","""branch""","""user""",,,,,,,,,,,,,,
15438397215,DeleteEvent,true,2021-03-07 20:13:44.000000 UTC,9133420,eksperimental,40702645,eksperimental/phoenix,"""review_installation_instructions""","""branch""","""user""",,,,,,,,,,,,,,
15438436944,PushEvent,true,2021-03-07 20:22:14.000000 UTC,12224985,chaowenGUO,295334863,chaowenGUO/tensorflow,"""refs/heads/master""",,,6660740679,1,1,"[{""sha"":""5a40142159881ebd948d5c1af42a7f66e9156d8e"",""author"":{""name"":""dummy"",""email"":""66c0c4ea9a244fbffccce99bc7963e1619b678e1""},""message"":"""",""distinct"":true,""url"":""https://api.github.com/repos/chaowenGUO/tensorflow/commits/5a40142159881ebd948d5c1af42a7f66e9156d8e""}]",,,,,,,,,,
15438407785,PushEvent,true,2021-03-07 20:16:03.000000 UTC,12224985,chaowenGUO,295334863,chaowenGUO/tensorflow,"""refs/heads/master""",,,6660722742,1,1,"[{""sha"":""cbb7b929e020e884d36d8017fe385292593de576"",""author"":{""name"":""chaowen guo"",""email"":""1c5b642634d6b3db81fee0eb82faf85722c920e9@gmail.com""},""message"":""Create README.md"",""distinct"":true,""url"":""https://api.github.com/repos/chaowenGUO/tensorflow/commits/cbb7b929e020e884d36d8017fe385292593de576""}]",,,,,,,,,,
15438502897,PushEvent,true,2021-03-07 20:36:44.000000 UTC,12224985,chaowenGUO,295334863,chaowenGUO/tensorflow,"""refs/heads/master""",,,6660781066,1,1,"[{""sha"":""53da2c49088f64fc2951d116479c9e14c82e53a8"",""author"":{""name"":""chaowen guo"",""email"":""1c5b642634d6b3db81fee0eb82faf85722c920e9@gmail.com""},""message"":""Update main.py"",""distinct"":true,""url"":""https://api.github.com/repos/chaowenGUO/tensorflow/commits/53da2c49088f64fc2951d116479c9e14c82e53a8""}]",,,,,,,,,,
15438362105,PushEvent,true,2021-03-07 20:05:47.000000 UTC,12224985,chaowenGUO,295334863,chaowenGUO/tensorflow,"""refs/heads/master""",,,6660694783,1,1,"[{""sha"":""684fc7ece8a935c2930dbfc801315852f426956b"",""author"":{""name"":""chaowen guo"",""email"":""1c5b642634d6b3db81fee0eb82faf85722c920e9@gmail.com""},""message"":""Delete build.yml"",""distinct"":true,""url"":""https://api.github.com/repos/chaowenGUO/tensorflow/commits/684fc7ece8a935c2930dbfc801315852f426956b""}]",,,,,,,,,,
15438415234,PushEvent,true,2021-03-07 20:17:35.000000 UTC,12224985,chaowenGUO,295334863,chaowenGUO/tensorflow,"""refs/heads/master""",,,6660727298,1,1,"[{""sha"":""83e139d18d5f994c261a6446225ec497440b81b2"",""author"":{""name"":""chaowen guo"",""email"":""1c5b642634d6b3db81fee0eb82faf85722c920e9@gmail.com""},""message"":""Delete saved_model.pb"",""distinct"":true,""url"":""https://api.github.com/repos/chaowenGUO/tensorflow/commits/83e139d18d5f994c261a6446225ec497440b81b2""}]",,,,,,,,,,
15438513250,PushEvent,true,2021-03-07 20:39:01.000000 UTC,12224985,chaowenGUO,295334863,chaowenGUO/tensorflow,"""refs/heads/master""",,,6660787233,1,1,"[{""sha"":""1f4153a0670359a3e7cd8f595f1fe67d0d9edced"",""author"":{""name"":""chaowen guo"",""email"":""1c5b642634d6b3db81fee0eb82faf85722c920e9@gmail.com""},""message"":""Update main.py"",""distinct"":true,""url"":""https://api.github.com/repos/chaowenGUO/tensorflow/commits/1f4153a0670359a3e7cd8f595f1fe67d0d9edced""}]",,,,,,,,,,
15438419821,PushEvent,true,2021-03-07 20:18:34.000000 UTC,12224985,chaowenGUO,295334863,chaowenGUO/tensorflow,"""refs/heads/master""",,,6660730125,1,1,"[{""sha"":""bae88aeb6889208c5c6c3463200d1d6711fbd8f8"",""author"":{""name"":""dummy"",""email"":""66c0c4ea9a244fbffccce99bc7963e1619b678e1""},""message"":"""",""distinct"":true,""url"":""https://api.github.com/repos/chaowenGUO/tensorflow/commits/bae88aeb6889208c5c6c3463200d1d6711fbd8f8""}]",,,,,,,,,,
15438575323,PushEvent,true,2021-03-07 20:52:17.000000 UTC,12224985,chaowenGUO,295334863,chaowenGUO/tensorflow,"""refs/heads/master""",,,6660824925,1,1,"[{""sha"":""6e7b11fbc8675423232ab92f13d61b0120e4d851"",""author"":{""name"":""chaowen guo"",""email"":""1c5b642634d6b3db81fee0eb82faf85722c920e9@gmail.com""},""message"":""Update main.py"",""distinct"":true,""url"":""https://api.github.com/repos/chaowenGUO/tensorflow/commits/6e7b11fbc8675423232ab92f13d61b0120e4d851""}]",,,,,,,,,,
15438399996,PushEvent,true,2021-03-07 20:14:21.000000 UTC,12224985,chaowenGUO,295334863,chaowenGUO/tensorflow,"""refs/heads/master""",,,6660717847,1,1,"[{""sha"":""bbd6cde0f7dafdc1017f6b0fb5003ea3678c2095"",""author"":{""name"":""chaowen guo"",""email"":""1c5b642634d6b3db81fee0eb82faf85722c920e9@gmail.com""},""message"":""Update main.py"",""distinct"":true,""url"":""https://api.github.com/repos/chaowenGUO/tensorflow/commits/bbd6cde0f7dafdc1017f6b0fb5003ea3678c2095""}]",,,,,,,,,,
15438581190,PushEvent,true,2021-03-07 20:53:36.000000 UTC,12224985,chaowenGUO,295334863,chaowenGUO/tensorflow,"""refs/heads/master""",,,6660828446,1,1,"[{""sha"":""41c307100737ab2935f6258db07d84d59b8f9ffb"",""author"":{""name"":""chaowen guo"",""email"":""1c5b642634d6b3db81fee0eb82faf85722c920e9@gmail.com""},""message"":""Update main.py"",""distinct"":true,""url"":""https://api.github.com/repos/chaowenGUO/tensorflow/commits/41c307100737ab2935f6258db07d84d59b8f9ffb""}]",,,,,,,,,,
15438403088,PushEvent,true,2021-03-07 20:15:03.000000 UTC,12224985,chaowenGUO,295334863,chaowenGUO/tensorflow,"""refs/heads/master""",,,6660719726,1,1,"[{""sha"":""99634912b78197c73aced5006fa39d44159ccd13"",""author"":{""name"":""chaowen guo"",""email"":""1c5b642634d6b3db81fee0eb82faf85722c920e9@gmail.com""},""message"":""Update main.py"",""distinct"":true,""url"":""https://api.github.com/repos/chaowenGUO/tensorflow/commits/99634912b78197c73aced5006fa39d44159ccd13""}]",,,,,,,,,,
15438415755,PushEvent,true,2021-03-07 20:17:42.000000 UTC,12224985,chaowenGUO,295334863,chaowenGUO/tensorflow,"""refs/heads/master""",,,6660727586,1,1,"[{""sha"":""b589905c148d89876d189d1855fa761b15685665"",""author"":{""name"":""chaowen guo"",""email"":""1c5b642634d6b3db81fee0eb82faf85722c920e9@gmail.com""},""message"":""Delete variables.index"",""distinct"":true,""url"":""https://api.github.com/repos/chaowenGUO/tensorflow/commits/b589905c148d89876d189d1855fa761b15685665""}]",,,,,,,,,,
15438427746,PushEvent,true,2021-03-07 20:20:16.000000 UTC,12224985,chaowenGUO,295334863,chaowenGUO/tensorflow,"""refs/heads/master""",,,6660734981,1,1,"[{""sha"":""77fb291e5a50d6ada5bdc92b12f01821b03d7f98"",""author"":{""name"":""dummy"",""email"":""66c0c4ea9a244fbffccce99bc7963e1619b678e1""},""message"":"""",""distinct"":true,""url"":""https://api.github.com/repos/chaowenGUO/tensorflow/commits/77fb291e5a50d6ada5bdc92b12f01821b03d7f98""}]",,,,,,,,,,
15438337924,PushEvent,true,2021-03-07 20:00:36.000000 UTC,12224985,chaowenGUO,295334863,chaowenGUO/tensorflow,"""refs/heads/master""",,,6660680098,1,1,"[{""sha"":""631813dd8eaecb2e435842dd9f82ef658b24a505"",""author"":{""name"":""chaowenguo"",""email"":""1c5b642634d6b3db81fee0eb82faf85722c920e9@gmail.com""},""message"":"""",""distinct"":true,""url"":""https://api.github.com/repos/chaowenGUO/tensorflow/commits/631813dd8eaecb2e435842dd9f82ef658b24a505""}]",,,,,,,,,,
15438350523,PushEvent,true,2021-03-07 20:03:17.000000 UTC,12224985,chaowenGUO,295334863,chaowenGUO/tensorflow,"""refs/heads/master""",,,6660687685,1,1,"[{""sha"":""b4fd776e3cb4ef8cbeca87e462b3a9fbc6e64a46"",""author"":{""name"":""dummy"",""email"":""66c0c4ea9a244fbffccce99bc7963e1619b678e1""},""message"":"""",""distinct"":true,""url"":""https://api.github.com/repos/chaowenGUO/tensorflow/commits/b4fd776e3cb4ef8cbeca87e462b3a9fbc6e64a46""}]",,,,,,,,,,
15438412042,PushEvent,true,2021-03-07 20:16:56.000000 UTC,12224985,chaowenGUO,295334863,chaowenGUO/tensorflow,"""refs/heads/master""",,,6660725365,1,1,"[{""sha"":""4e008ee1556635b4388775434965f7418cb89849"",""author"":{""name"":""chaowen guo"",""email"":""1c5b642634d6b3db81fee0eb82faf85722c920e9@gmail.com""},""message"":""Update README.md"",""distinct"":true,""url"":""https://api.github.com/repos/chaowenGUO/tensorflow/commits/4e008ee1556635b4388775434965f7418cb89849""}]",,,,,,,,,,
15438416182,PushEvent,true,2021-03-07 20:17:47.000000 UTC,12224985,chaowenGUO,295334863,chaowenGUO/tensorflow,"""refs/heads/master""",,,6660727844,1,1,"[{""sha"":""31e617fe9243adcafcddb35d536789e323bf8950"",""author"":{""name"":""chaowen guo"",""email"":""1c5b642634d6b3db81fee0eb82faf85722c920e9@gmail.com""},""message"":""Delete variables.data-00000-of-00001"",""distinct"":true,""url"":""https://api.github.com/repos/chaowenGUO/tensorflow/commits/31e617fe9243adcafcddb35d536789e323bf8950""}]",,,,,,,,,,
15438502007,PushEvent,true,2021-03-07 20:36:33.000000 UTC,12224985,chaowenGUO,295334863,chaowenGUO/tensorflow,"""refs/heads/master""",,,6660780500,1,1,"[{""sha"":""59631105baf46b755937a778b22a844f51f8bfc7"",""author"":{""name"":""chaowen guo"",""email"":""1c5b642634d6b3db81fee0eb82faf85722c920e9@gmail.com""},""message"":""Update main.py"",""distinct"":true,""url"":""https://api.github.com/repos/chaowenGUO/tensorflow/commits/59631105baf46b755937a778b22a844f51f8bfc7""}]",,,,,,,,,,
15438602454,PushEvent,true,2021-03-07 20:58:25.000000 UTC,12224985,chaowenGUO,295334863,chaowenGUO/tensorflow,"""refs/heads/master""",,,6660841322,1,1,"[{""sha"":""8bab4cc6a0655bcb9def22c7efd3948183e1be63"",""author"":{""name"":""chaowen guo"",""email"":""1c5b642634d6b3db81fee0eb82faf85722c920e9@gmail.com""},""message"":""Update main.py"",""distinct"":true,""url"":""https://api.github.com/repos/chaowenGUO/tensorflow/commits/8bab4cc6a0655bcb9def22c7efd3948183e1be63""}]",,,,,,,,,,
15438427693,CreateEvent,true,2021-03-07 20:20:15.000000 UTC,22809044,velmuruganmani,293494782,velmuruganmani/react,"""typescriptdemo""","""branch""","""user""",,,,,,,,,,,,,,
15438517787,IssueCommentEvent,true,2021-03-07 20:39:57.000000 UTC,32347756,todo[bot],228097715,njzjz/tensorflow,,,,,,,,"""created""",,,,,,,,,
15438517502,IssueCommentEvent,true,2021-03-07 20:39:54.000000 UTC,32347756,todo[bot],228097715,njzjz/tensorflow,,,,,,,,"""created""",,,,,,,,,
15438518064,IssueCommentEvent,true,2021-03-07 20:40:00.000000 UTC,32347756,todo[bot],228097715,njzjz/tensorflow,,,,,,,,"""created""",,,,,,,,,
15438548888,PullRequestEvent,true,2021-03-07 20:46:40.000000 UTC,39814207,pull[bot],174166640,Cache-Cloud/tensorflow,,,,,,,,"""opened""",6981,,,,,,,,
15438606160,PushEvent,true,2021-03-07 20:59:15.000000 UTC,39814207,pull[bot],262634697,MichaelDeBoey/react,"""refs/heads/master""",,,6660843564,1,1,"[{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/MichaelDeBoey/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""}]",,,,,,,,,,
15438594714,PushEvent,true,2021-03-07 20:56:38.000000 UTC,39814207,pull[bot],339262813,Jeffkeen7/tensorflow,"""refs/heads/master""",,,6660836622,2,2,"[{""sha"":""6613bf0887142ae7f141bbc00d8cb3d791fdd1a4"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Fix stride mismatch propagation bug across convolutions\n\nPiperOrigin-RevId: 361429642\nChange-Id: I40e18cd9c2ce9750e1949b16f90e7182a682dd0f"",""distinct"":true,""url"":""https://api.github.com/repos/Jeffkeen7/tensorflow/commits/6613bf0887142ae7f141bbc00d8cb3d791fdd1a4""},{""sha"":""efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7"",""author"":{""name"":""Peter Hawkins"",""email"":""34b19541630131950b5f204f2c5f2c647a3a7475@google.com""},""message"":""[XLA:Python] Split DevicePut out of `jax_jit` and refactor it.\n\n* Creates a new py_values.cc/h file to contain device_put.\n* Moves some of the type helpers into the existing types module.\n* Change `PyClient::BufferFromPyval` to call DevicePut. There's no reason to have two similar but subtly different methods for copying a buffer-like object to a device.\n* Refactor and optimize some of the handler functions. In particular, avoid creating a number of unnecessary intermediate objects.\n\nPiperOrigin-RevId: 361430648\nChange-Id: I56b056eb8f0fde20b2f65170fcbf9530cd97d12b"",""distinct"":true,""url"":""https://api.github.com/repos/Jeffkeen7/tensorflow/commits/efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7""}]",,,,,,,,,,
15438530647,PullRequestEvent,true,2021-03-07 20:42:45.000000 UTC,39814207,pull[bot],142352962,chanhong/react,,,,,,,,"""opened""",4,,,,,,,,
15438383205,PushEvent,true,2021-03-07 20:10:38.000000 UTC,39814207,pull[bot],190277211,KabirKwatra/tensorflow,"""refs/heads/master""",,,6660707609,2,2,"[{""sha"":""6613bf0887142ae7f141bbc00d8cb3d791fdd1a4"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Fix stride mismatch propagation bug across convolutions\n\nPiperOrigin-RevId: 361429642\nChange-Id: I40e18cd9c2ce9750e1949b16f90e7182a682dd0f"",""distinct"":true,""url"":""https://api.github.com/repos/KabirKwatra/tensorflow/commits/6613bf0887142ae7f141bbc00d8cb3d791fdd1a4""},{""sha"":""efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7"",""author"":{""name"":""Peter Hawkins"",""email"":""34b19541630131950b5f204f2c5f2c647a3a7475@google.com""},""message"":""[XLA:Python] Split DevicePut out of `jax_jit` and refactor it.\n\n* Creates a new py_values.cc/h file to contain device_put.\n* Moves some of the type helpers into the existing types module.\n* Change `PyClient::BufferFromPyval` to call DevicePut. There's no reason to have two similar but subtly different methods for copying a buffer-like object to a device.\n* Refactor and optimize some of the handler functions. In particular, avoid creating a number of unnecessary intermediate objects.\n\nPiperOrigin-RevId: 361430648\nChange-Id: I56b056eb8f0fde20b2f65170fcbf9530cd97d12b"",""distinct"":true,""url"":""https://api.github.com/repos/KabirKwatra/tensorflow/commits/efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7""}]",,,,,,,,,,
15438467409,PushEvent,true,2021-03-07 20:28:58.000000 UTC,39814207,pull[bot],30268292,chojar/react,"""refs/heads/master""",,,6660759229,1,1,"[{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/chojar/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""}]",,,,,,,,,,
15438518984,PullRequestEvent,true,2021-03-07 20:40:11.000000 UTC,39814207,pull[bot],49518776,SimenB/react,,,,,,,,"""opened""",1493,,,,,,,,
15438537434,PushEvent,true,2021-03-07 20:44:15.000000 UTC,39814207,pull[bot],95927693,akram/tensorflow,"""refs/heads/master""",,,6660802042,2,2,"[{""sha"":""6613bf0887142ae7f141bbc00d8cb3d791fdd1a4"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Fix stride mismatch propagation bug across convolutions\n\nPiperOrigin-RevId: 361429642\nChange-Id: I40e18cd9c2ce9750e1949b16f90e7182a682dd0f"",""distinct"":true,""url"":""https://api.github.com/repos/akram/tensorflow/commits/6613bf0887142ae7f141bbc00d8cb3d791fdd1a4""},{""sha"":""efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7"",""author"":{""name"":""Peter Hawkins"",""email"":""34b19541630131950b5f204f2c5f2c647a3a7475@google.com""},""message"":""[XLA:Python] Split DevicePut out of `jax_jit` and refactor it.\n\n* Creates a new py_values.cc/h file to contain device_put.\n* Moves some of the type helpers into the existing types module.\n* Change `PyClient::BufferFromPyval` to call DevicePut. There's no reason to have two similar but subtly different methods for copying a buffer-like object to a device.\n* Refactor and optimize some of the handler functions. In particular, avoid creating a number of unnecessary intermediate objects.\n\nPiperOrigin-RevId: 361430648\nChange-Id: I56b056eb8f0fde20b2f65170fcbf9530cd97d12b"",""distinct"":true,""url"":""https://api.github.com/repos/akram/tensorflow/commits/efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7""}]",,,,,,,,,,
15438383268,PullRequestEvent,true,2021-03-07 20:10:39.000000 UTC,39814207,pull[bot],190277211,KabirKwatra/tensorflow,,,,,,,,"""closed""",5522,,,,,,,,
15438365847,PullRequestEvent,true,2021-03-07 20:06:36.000000 UTC,39814207,pull[bot],114650042,JochLAin/react,,,,,,,,"""opened""",182,,,,,,,,
15438398156,PushEvent,true,2021-03-07 20:13:57.000000 UTC,39814207,pull[bot],66892771,JackEasons/react,"""refs/heads/master""",,,6660716745,1,1,"[{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/JackEasons/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""}]",,,,,,,,,,
15438467453,PullRequestEvent,true,2021-03-07 20:28:59.000000 UTC,39814207,pull[bot],30268292,chojar/react,,,,,,,,"""closed""",1569,,,,,,,,
15438514788,PullRequestEvent,true,2021-03-07 20:39:19.000000 UTC,39814207,pull[bot],181474594,suddenlyGiovanni/react,,,,,,,,"""closed""",517,,,,,,,,
15438580512,PullRequestEvent,true,2021-03-07 20:53:26.000000 UTC,39814207,pull[bot],133704084,melG81/tensorflow,,,,,,,,"""opened""",675,,,,,,,,
15438427736,PullRequestEvent,true,2021-03-07 20:20:15.000000 UTC,39814207,pull[bot],146377921,Rachelmorrell/react,,,,,,,,"""opened""",901,,,,,,,,
15438428032,PushEvent,true,2021-03-07 20:20:19.000000 UTC,39814207,pull[bot],105981784,manojsdeveloper/react,"""refs/heads/master""",,,6660735141,1,1,"[{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/manojsdeveloper/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""}]",,,,,,,,,,
15438428631,PullRequestEvent,true,2021-03-07 20:20:27.000000 UTC,39814207,pull[bot],340715557,KaycoinsInc/tensorflow,,,,,,,,"""closed""",39,,,,,,,,
15438596577,PullRequestEvent,true,2021-03-07 20:57:03.000000 UTC,39814207,pull[bot],199682157,wadezhan/react,,,,,,,,"""closed""",812,,,,,,,,
15438596543,PushEvent,true,2021-03-07 20:57:03.000000 UTC,39814207,pull[bot],199682157,wadezhan/react,"""refs/heads/master""",,,6660837735,1,1,"[{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/wadezhan/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""}]",,,,,,,,,,
15438594749,PullRequestEvent,true,2021-03-07 20:56:39.000000 UTC,39814207,pull[bot],339262813,Jeffkeen7/tensorflow,,,,,,,,"""closed""",64,,,,,,,,
15438575888,PullRequestEvent,true,2021-03-07 20:52:26.000000 UTC,39814207,pull[bot],179607331,isanjit3/tensorflow,,,,,,,,"""opened""",869,,,,,,,,
15438572496,PushEvent,true,2021-03-07 20:51:40.000000 UTC,39814207,pull[bot],65461415,PowerOlive/tensorflow,"""refs/heads/master""",,,6660823337,2,2,"[{""sha"":""6613bf0887142ae7f141bbc00d8cb3d791fdd1a4"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Fix stride mismatch propagation bug across convolutions\n\nPiperOrigin-RevId: 361429642\nChange-Id: I40e18cd9c2ce9750e1949b16f90e7182a682dd0f"",""distinct"":true,""url"":""https://api.github.com/repos/PowerOlive/tensorflow/commits/6613bf0887142ae7f141bbc00d8cb3d791fdd1a4""},{""sha"":""efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7"",""author"":{""name"":""Peter Hawkins"",""email"":""34b19541630131950b5f204f2c5f2c647a3a7475@google.com""},""message"":""[XLA:Python] Split DevicePut out of `jax_jit` and refactor it.\n\n* Creates a new py_values.cc/h file to contain device_put.\n* Moves some of the type helpers into the existing types module.\n* Change `PyClient::BufferFromPyval` to call DevicePut. There's no reason to have two similar but subtly different methods for copying a buffer-like object to a device.\n* Refactor and optimize some of the handler functions. In particular, avoid creating a number of unnecessary intermediate objects.\n\nPiperOrigin-RevId: 361430648\nChange-Id: I56b056eb8f0fde20b2f65170fcbf9530cd97d12b"",""distinct"":true,""url"":""https://api.github.com/repos/PowerOlive/tensorflow/commits/efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7""}]",,,,,,,,,,
15438523591,PullRequestEvent,true,2021-03-07 20:41:11.000000 UTC,39814207,pull[bot],195336714,db-apps/react,,,,,,,,"""opened""",1095,,,,,,,,
15438428073,PullRequestEvent,true,2021-03-07 20:20:20.000000 UTC,39814207,pull[bot],105981784,manojsdeveloper/react,,,,,,,,"""closed""",312,,,,,,,,
15438452269,PullRequestEvent,true,2021-03-07 20:25:40.000000 UTC,39814207,pull[bot],233268851,Manas1820/tensorflow,,,,,,,,"""opened""",841,,,,,,,,
15438505001,PullRequestEvent,true,2021-03-07 20:37:12.000000 UTC,39814207,pull[bot],113451460,JCofman/react,,,,,,,,"""opened""",393,,,,,,,,
15438600743,PullRequestEvent,true,2021-03-07 20:58:02.000000 UTC,39814207,pull[bot],206156535,icpm/tensorflow,,,,,,,,"""opened""",4895,,,,,,,,
15438445772,PullRequestEvent,true,2021-03-07 20:24:14.000000 UTC,39814207,pull[bot],302953642,TheAssassinRen/tensorflow,,,,,,,,"""opened""",507,,,,,,,,
15438606192,PullRequestEvent,true,2021-03-07 20:59:16.000000 UTC,39814207,pull[bot],262634697,MichaelDeBoey/react,,,,,,,,"""closed""",308,,,,,,,,
15438379234,PullRequestEvent,true,2021-03-07 20:09:46.000000 UTC,39814207,pull[bot],222435850,clunietp/opencv,,,,,,,,"""opened""",1051,,,,,,,,
15438585661,PullRequestEvent,true,2021-03-07 20:54:37.000000 UTC,39814207,pull[bot],82160236,waterdrops/tensorflow,,,,,,,,"""opened""",43,,,,,,,,
15438517257,PullRequestEvent,true,2021-03-07 20:39:52.000000 UTC,39814207,pull[bot],228097715,njzjz/tensorflow,,,,,,,,"""opened""",1746,,,,,,,,
15438572529,PullRequestEvent,true,2021-03-07 20:51:40.000000 UTC,39814207,pull[bot],65461415,PowerOlive/tensorflow,,,,,,,,"""closed""",170,,,,,,,,
15438338470,PullRequestEvent,true,2021-03-07 20:00:43.000000 UTC,39814207,pull[bot],262634697,MichaelDeBoey/react,,,,,,,,"""opened""",308,,,,,,,,
15438596538,PullRequestEvent,true,2021-03-07 20:57:03.000000 UTC,39814207,pull[bot],164577447,osmaelo/tensorflow,,,,,,,,"""opened""",5126,,,,,,,,
15438514726,PushEvent,true,2021-03-07 20:39:19.000000 UTC,39814207,pull[bot],181474594,suddenlyGiovanni/react,"""refs/heads/master""",,,6660788103,1,1,"[{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/suddenlyGiovanni/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""}]",,,,,,,,,,
15438428596,PushEvent,true,2021-03-07 20:20:27.000000 UTC,39814207,pull[bot],340715557,KaycoinsInc/tensorflow,"""refs/heads/master""",,,6660735515,2,2,"[{""sha"":""6613bf0887142ae7f141bbc00d8cb3d791fdd1a4"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Fix stride mismatch propagation bug across convolutions\n\nPiperOrigin-RevId: 361429642\nChange-Id: I40e18cd9c2ce9750e1949b16f90e7182a682dd0f"",""distinct"":true,""url"":""https://api.github.com/repos/KaycoinsInc/tensorflow/commits/6613bf0887142ae7f141bbc00d8cb3d791fdd1a4""},{""sha"":""efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7"",""author"":{""name"":""Peter Hawkins"",""email"":""34b19541630131950b5f204f2c5f2c647a3a7475@google.com""},""message"":""[XLA:Python] Split DevicePut out of `jax_jit` and refactor it.\n\n* Creates a new py_values.cc/h file to contain device_put.\n* Moves some of the type helpers into the existing types module.\n* Change `PyClient::BufferFromPyval` to call DevicePut. There's no reason to have two similar but subtly different methods for copying a buffer-like object to a device.\n* Refactor and optimize some of the handler functions. In particular, avoid creating a number of unnecessary intermediate objects.\n\nPiperOrigin-RevId: 361430648\nChange-Id: I56b056eb8f0fde20b2f65170fcbf9530cd97d12b"",""distinct"":true,""url"":""https://api.github.com/repos/KaycoinsInc/tensorflow/commits/efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7""}]",,,,,,,,,,
15438398192,PullRequestEvent,true,2021-03-07 20:13:57.000000 UTC,39814207,pull[bot],66892771,JackEasons/react,,,,,,,,"""closed""",130,,,,,,,,
15438537480,PullRequestEvent,true,2021-03-07 20:44:16.000000 UTC,39814207,pull[bot],95927693,akram/tensorflow,,,,,,,,"""closed""",4310,,,,,,,,
15438385446,PullRequestEvent,true,2021-03-07 20:11:09.000000 UTC,39814207,pull[bot],279894716,KaycoinsInc/react,,,,,,,,"""opened""",17,,,,,,,,
15438388021,PullRequestEvent,true,2021-03-07 20:11:44.000000 UTC,39814207,pull[bot],56189869,xiaohanhuang/tensorflow,,,,,,,,"""opened""",2096,,,,,,,,
15438386752,WatchEvent,true,2021-03-07 20:11:27.000000 UTC,39906809,ssdasilva,166658078,ssdasilva/opencv,,,,,,,,"""started""",,,,,,,,,
15438599973,CreateEvent,true,2021-03-07 20:57:50.000000 UTC,42554940,Bor030,345451558,Bor030/react,,"""repository""","""user""",,,,,,,,,,,,,,
15438451776,PullRequestEvent,true,2021-03-07 20:25:34.000000 UTC,50694001,howardleung,338179606,swarupsrini/scikit-learn,,,,,,,,"""closed""",10,,,,,,,,
15438411191,PushEvent,true,2021-03-07 20:16:46.000000 UTC,50694001,howardleung,338179606,swarupsrini/scikit-learn,"""refs/heads/bug/19551""",,,6660724867,1,1,"[{""sha"":""5619ea9c2e4c24ad3da305c3aa6dc381783ca631"",""author"":{""name"":""Howard Leung"",""email"":""2238aa27848f977230164ed10cd8d129847aa9af@hotmail.com""},""message"":""updated test suite to test multiple columns"",""distinct"":true,""url"":""https://api.github.com/repos/swarupsrini/scikit-learn/commits/5619ea9c2e4c24ad3da305c3aa6dc381783ca631""}]",,,,,,,,,,
15438419244,PullRequestEvent,true,2021-03-07 20:18:27.000000 UTC,50694001,howardleung,338179606,swarupsrini/scikit-learn,,,,,,,,"""opened""",10,,,,,,,,
15438452377,PushEvent,true,2021-03-07 20:25:41.000000 UTC,50694001,howardleung,338179606,swarupsrini/scikit-learn,"""refs/heads/main""",,,6660750064,2,1,"[{""sha"":""5619ea9c2e4c24ad3da305c3aa6dc381783ca631"",""author"":{""name"":""Howard Leung"",""email"":""2238aa27848f977230164ed10cd8d129847aa9af@hotmail.com""},""message"":""updated test suite to test multiple columns"",""distinct"":false,""url"":""https://api.github.com/repos/swarupsrini/scikit-learn/commits/5619ea9c2e4c24ad3da305c3aa6dc381783ca631""},{""sha"":""5916d79c2a03b88d427b6a69d043b5fd70a9d169"",""author"":{""name"":""Howard Leung"",""email"":""26277428d3289101d8c74b4f8da0e9cec467fa09@users.noreply.github.com""},""message"":""Merge pull request #10 from swarupsrini/bug/19551\n\nHotfix: update test suite to test multiple columns"",""distinct"":true,""url"":""https://api.github.com/repos/swarupsrini/scikit-learn/commits/5916d79c2a03b88d427b6a69d043b5fd70a9d169""}]",,,,,,,,,,
15438427915,PullRequestReviewEvent,true,2021-03-07 20:20:18.000000 UTC,53287158,jasond20,338179606,swarupsrini/scikit-learn,,,,,,,,"""created""",10,,,"""approved""","""COLLABORATOR""",,,,
15438381698,CreateEvent,true,2021-03-07 20:10:18.000000 UTC,65000483,uirouterbot,262215235,uirouterbot/react,"""create-pull-request/patch-9flqi8a""","""branch""","""user""",,,,,,,,,,,,,,
15438439033,PushEvent,true,2021-03-07 20:22:42.000000 UTC,70002829,SergiiSemeniuk,310857975,SergiiSemeniuk/react,"""refs/heads/master""",,,6660741993,1,1,"[{""sha"":""4b2e57dc18815b365e4b7d03867f3cd7079efd47"",""author"":{""name"":""SergiiSemeniuk"",""email"":""9b0ad91d8ce1a475a1d8be1a4f54bbb2d125756b@i.ua""},""message"":""less55"",""distinct"":true,""url"":""https://api.github.com/repos/SergiiSemeniuk/react/commits/4b2e57dc18815b365e4b7d03867f3cd7079efd47""}]",,,,,,,,,,
15438561565,PushEvent,true,2021-03-07 20:49:18.000000 UTC,75267398,isabel-puertas,342365899,isabel-puertas/netbeans,"""refs/heads/master""",,,6660816661,1,1,"[{""sha"":""39346677bb6c10dc75f3dfab4e2349e645871d20"",""author"":{""name"":""isabel-puertas"",""email"":""86e8f0e9f8af6a577ff290717665df77937e6a48@murciaeduca.es""},""message"":""sanjose"",""distinct"":true,""url"":""https://api.github.com/repos/isabel-puertas/netbeans/commits/39346677bb6c10dc75f3dfab4e2349e645871d20""}]",,,,,,,,,,
15438591869,PushEvent,true,2021-03-07 20:56:00.000000 UTC,79533578,Isabel-Puertas9,345079710,Isabel-Puertas9/netbeans,"""refs/heads/master""",,,6660834874,1,1,"[{""sha"":""451698a0810845f659ee42932ba750e10fca1239"",""author"":{""name"":""isabel-puertas"",""email"":""86e8f0e9f8af6a577ff290717665df77937e6a48@murciaeduca.es""},""message"":""pruebaDeshacer"",""distinct"":true,""url"":""https://api.github.com/repos/Isabel-Puertas9/netbeans/commits/451698a0810845f659ee42932ba750e10fca1239""}]",,,,,,,,,,
15438588759,PullRequestReviewEvent,true,2021-03-07 20:55:18.000000 UTC,26788611,sdedic,102083576,apache/netbeans,,,,,,,,"""created""",2795,,,"""commented""","""MEMBER""",,,,
15438589170,PullRequestReviewCommentEvent,true,2021-03-07 20:55:23.000000 UTC,26788611,sdedic,102083576,apache/netbeans,,,,,,,,"""created""",2795,,,,,,,,
15438588765,PullRequestReviewCommentEvent,true,2021-03-07 20:55:17.000000 UTC,26788611,sdedic,102083576,apache/netbeans,,,,,,,,"""created""",2795,,,,,,,,
15438589160,PullRequestReviewEvent,true,2021-03-07 20:55:24.000000 UTC,26788611,sdedic,102083576,apache/netbeans,,,,,,,,"""created""",2795,,,"""commented""","""MEMBER""",,,,
15438597292,WatchEvent,true,2021-03-07 20:57:12.000000 UTC,18479915,yasinsgrc,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15438437960,WatchEvent,true,2021-03-07 20:22:28.000000 UTC,67984768,GhostRoboXt,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15438551999,IssueCommentEvent,true,2021-03-07 20:47:19.000000 UTC,6691643,MrMino,658518,ipython/ipython,,,,,,,,"""created""",,,,,,,,,
15438539059,IssueCommentEvent,true,2021-03-07 20:44:37.000000 UTC,6691643,MrMino,658518,ipython/ipython,,,,,,,,"""created""",,,,,,,,,
15438529614,PullRequestReviewEvent,true,2021-03-07 20:42:31.000000 UTC,5402633,thomasjpfan,843222,scikit-learn/scikit-learn,,,,,,,,"""created""",19102,,,"""commented""","""MEMBER""",,,,
15438482157,PullRequestEvent,true,2021-03-07 20:32:07.000000 UTC,5402633,thomasjpfan,843222,scikit-learn/scikit-learn,,,,,,,,"""opened""",19639,,,,,,,,
15438529621,PullRequestReviewCommentEvent,true,2021-03-07 20:40:09.000000 UTC,5402633,thomasjpfan,843222,scikit-learn/scikit-learn,,,,,,,,"""created""",19102,,,,,,,,
15438529620,PullRequestReviewEvent,true,2021-03-07 20:42:31.000000 UTC,5402633,thomasjpfan,843222,scikit-learn/scikit-learn,,,,,,,,"""created""",19102,,,"""commented""","""MEMBER""",,,,
15438377289,WatchEvent,true,2021-03-07 20:09:18.000000 UTC,80191289,EMConant,17728164,hashicorp/terraform,,,,,,,,"""started""",,,,,,,,,
15438378198,PullRequestEvent,true,2021-03-07 20:09:30.000000 UTC,6648759,andy-held,5108051,opencv/opencv,,,,,,,,"""opened""",19689,,,,,,,,
15438524406,ForkEvent,true,2021-03-07 20:41:21.000000 UTC,34596657,AlexanSargsyan,5108051,opencv/opencv,,,,,,,,,,"""AlexanSargsyan/opencv""",,,,,,,
15438497490,ForkEvent,true,2021-03-07 20:35:33.000000 UTC,43513454,TheOneironaut,5108051,opencv/opencv,,,,,,,,,,"""TheOneironaut/opencv""",,,,,,,
15438357997,IssueCommentEvent,true,2021-03-07 20:04:52.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",,,,,,,,,
15438419405,IssueCommentEvent,true,2021-03-07 20:18:28.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",,,,,,,,,
15438388654,IssueCommentEvent,true,2021-03-07 20:11:52.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",,,,,,,,,
15438342553,IssueCommentEvent,true,2021-03-07 20:01:34.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",,,,,,,,,
15438378282,IssueCommentEvent,true,2021-03-07 20:09:32.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",,,,,,,,,
15438383536,PushEvent,true,2021-03-07 20:10:42.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,"""refs/heads/master""",,,6660707788,1,1,"[{""sha"":""ebaf877336b377c771334567e39fce6d3d95e03f"",""author"":{""name"":""Eksperimental"",""email"":""f9231051ec6817d2d71487989ea7bb561d7f7c32@autistici.org""},""message"":""Fix singular form in context task message (#4238)"",""distinct"":true,""url"":""https://api.github.com/repos/phoenixframework/phoenix/commits/ebaf877336b377c771334567e39fce6d3d95e03f""}]",,,,,,,,,,
15438357811,PullRequestEvent,true,2021-03-07 20:04:49.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""closed""",4209,,,,,,,,
15438388568,PushEvent,true,2021-03-07 20:11:51.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,"""refs/heads/master""",,,6660710867,1,1,"[{""sha"":""89a444e5c93b1c0c882a52b3fd650c74084051f6"",""author"":{""name"":""Eksperimental"",""email"":""f9231051ec6817d2d71487989ea7bb561d7f7c32@autistici.org""},""message"":""Copy edit Guides - Views and templates (#4224)"",""distinct"":true,""url"":""https://api.github.com/repos/phoenixframework/phoenix/commits/89a444e5c93b1c0c882a52b3fd650c74084051f6""}]",,,,,,,,,,
15438342581,PullRequestEvent,true,2021-03-07 20:01:34.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""closed""",4226,,,,,,,,
15438338328,PullRequestReviewCommentEvent,true,2021-03-07 20:00:40.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",4232,,,,,,,,
15438338325,PullRequestReviewEvent,true,2021-03-07 20:00:41.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",4232,,,"""commented""","""MEMBER""",,,,
15438388437,PullRequestEvent,true,2021-03-07 20:11:49.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""closed""",4224,,,,,,,,
15438391769,PullRequestEvent,true,2021-03-07 20:12:32.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""reopened""",4226,,,,,,,,
15438404774,IssueCommentEvent,true,2021-03-07 20:15:24.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",,,,,,,,,
15438357907,PushEvent,true,2021-03-07 20:04:51.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,"""refs/heads/master""",,,6660692202,1,1,"[{""sha"":""adc35809a0c78171283fb1c9eea1d53a9236fe5c"",""author"":{""name"":""Eksperimental"",""email"":""f9231051ec6817d2d71487989ea7bb561d7f7c32@autistici.org""},""message"":""Simplify release automatically determining phoenix_dep in generator (#4209)\n\nIt relies on whether the version number is a -dev or not.\r\n\r\nIt also fixes the current state, as it hasn't been reverted after latest release."",""distinct"":true,""url"":""https://api.github.com/repos/phoenixframework/phoenix/commits/adc35809a0c78171283fb1c9eea1d53a9236fe5c""}]",,,,,,,,,,
15438383599,IssueCommentEvent,true,2021-03-07 20:10:43.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",,,,,,,,,
15438383419,PullRequestEvent,true,2021-03-07 20:10:41.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""closed""",4238,,,,,,,,
15438391755,IssueCommentEvent,true,2021-03-07 20:12:32.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",,,,,,,,,
15438363672,IssueCommentEvent,true,2021-03-07 20:06:07.000000 UTC,9133420,eksperimental,16072585,phoenixframework/phoenix,,,,,,,,"""created""",,,,,,,,,
15438348931,PullRequestReviewCommentEvent,true,2021-03-07 20:02:56.000000 UTC,9133420,eksperimental,16072585,phoenixframework/phoenix,,,,,,,,"""created""",4224,,,,,,,,
15438387737,IssueCommentEvent,true,2021-03-07 20:11:40.000000 UTC,9133420,eksperimental,16072585,phoenixframework/phoenix,,,,,,,,"""created""",,,,,,,,,
15438412527,IssueCommentEvent,true,2021-03-07 20:17:02.000000 UTC,9133420,eksperimental,16072585,phoenixframework/phoenix,,,,,,,,"""created""",,,,,,,,,
15438348926,PullRequestReviewEvent,true,2021-03-07 20:02:57.000000 UTC,9133420,eksperimental,16072585,phoenixframework/phoenix,,,,,,,,"""created""",4224,,,"""commented""","""CONTRIBUTOR""",,,,
15438351164,IssueCommentEvent,true,2021-03-07 20:03:26.000000 UTC,2806466,ghwatson,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15438402095,WatchEvent,true,2021-03-07 20:14:49.000000 UTC,62504240,AtlasRW,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15438576184,IssueCommentEvent,true,2021-03-07 20:52:29.000000 UTC,66830453,ngsteven97,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15438529651,WatchEvent,true,2021-03-07 20:42:31.000000 UTC,69258826,mdanyalmalik,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15438519891,WatchEvent,true,2021-03-07 20:40:23.000000 UTC,69258826,mdanyalmalik,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15438381672,PullRequestEvent,true,2021-03-07 20:10:18.000000 UTC,65000483,uirouterbot,61573702,ui-router/react,,,,,,,,"""opened""",844,,,,,,,,
15438480926,IssueCommentEvent,true,2021-03-07 20:31:52.000000 UTC,1804568,thaJeztah,7691631,moby/moby,,,,,,,,"""created""",,,,,,,,,
15438480946,IssuesEvent,true,2021-03-07 20:31:52.000000 UTC,1804568,thaJeztah,7691631,moby/moby,,,,,,,,"""closed""",,,,,,,,,
15438355816,PushEvent,true,2021-03-07 20:04:24.000000 UTC,180351,alexgrist,97969812,NebulousCloud/helix,"""refs/heads/master""",,,6660690916,2,2,"[{""sha"":""81e100d28c6a26635f264715cf35eadc4ebaf1e0"",""author"":{""name"":""Alexander Grist-Hucker"",""email"":""53e982627ae0178b2a758d397bd75fdbfd7764e1@users.noreply.github.com""},""message"":""Make business buy net message more type strict"",""distinct"":true,""url"":""https://api.github.com/repos/NebulousCloud/helix/commits/81e100d28c6a26635f264715cf35eadc4ebaf1e0""},{""sha"":""d9688e0e99d189b4b76e54d72a380e33eae60559"",""author"":{""name"":""Alexander Grist-Hucker"",""email"":""53e982627ae0178b2a758d397bd75fdbfd7764e1@users.noreply.github.com""},""message"":""Add cooldown to character create net message\nMake character create net message more type strict"",""distinct"":true,""url"":""https://api.github.com/repos/NebulousCloud/helix/commits/d9688e0e99d189b4b76e54d72a380e33eae60559""}]",,,,,,,,,,
15438358312,PushEvent,true,2021-03-07 20:04:57.000000 UTC,41898282,github-actions[bot],97969812,NebulousCloud/helix,"""refs/heads/gh-pages""",,,6660692474,1,1,"[{""sha"":""e85a05ecc5965b1cce82f773fc4ff35ded2471cf"",""author"":{""name"":""alexgrist"",""email"":""53e982627ae0178b2a758d397bd75fdbfd7764e1@users.noreply.github.com""},""message"":""deploy: d9688e0e99d189b4b76e54d72a380e33eae60559"",""distinct"":true,""url"":""https://api.github.com/repos/NebulousCloud/helix/commits/e85a05ecc5965b1cce82f773fc4ff35ded2471cf""}]",,,,,,,,,,
15438345367,WatchEvent,true,2021-03-07 20:02:11.000000 UTC,23723926,fullmetalsheep,135786093,typescript-cheatsheets/react,,,,,,,,"""started""",,,,,,,,,
15438368768,PushEvent,true,2021-03-07 20:07:16.000000 UTC,39814207,pull[bot],268754920,MLH-Fellowship/react,"""refs/heads/master""",,,6660698780,1,1,"[{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/MLH-Fellowship/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""}]",,,,,,,,,,
15438368791,PullRequestEvent,true,2021-03-07 20:07:16.000000 UTC,39814207,pull[bot],268754920,MLH-Fellowship/react,,,,,,,,"""closed""",228,,,,,,,,
15438549737,WatchEvent,true,2021-03-07 20:46:50.000000 UTC,4720271,patrickreinan,175425051,kumahq/kuma,,,,,,,,"""started""",,,,,,,,,
15438566852,CreateEvent,true,2021-03-07 20:50:26.000000 UTC,5459824,jakubdyszkiewicz,175425051,kumahq/kuma,"""chore/backwards-compatibility-fix""","""branch""","""user""",,,,,,,,,,,,,,
15439197801,PullRequestEvent,true,2021-03-07 23:18:18.000000 UTC,800611,brukshut,130750793,brukshut/terraform,,,,,,,,"""opened""",65,,,,,,,,
15439200216,PullRequestEvent,true,2021-03-07 23:18:54.000000 UTC,800611,brukshut,130750793,brukshut/terraform,,,,,,,,"""closed""",65,,,,,,,,
15439200257,PushEvent,true,2021-03-07 23:18:54.000000 UTC,800611,brukshut,130750793,brukshut/terraform,"""refs/heads/master""",,,6661205262,4,1,"[{""sha"":""31e08d3d6325908e10b5d62a8e94094bbe8797d6"",""author"":{""name"":""Christian Gough"",""email"":""515e74db1436fdbd04b7620ef875022b5e277020@gmail.com""},""message"":""Upgrade route53 private and public modules to 0.13 and add standard tags."",""distinct"":false,""url"":""https://api.github.com/repos/brukshut/terraform/commits/31e08d3d6325908e10b5d62a8e94094bbe8797d6""},{""sha"":""bac2873fa66190a73ee116ddceb442185272e1d6"",""author"":{""name"":""Christian Gough"",""email"":""515e74db1436fdbd04b7620ef875022b5e277020@gmail.com""},""message"":""Upgrade to 0.14.7; cleanup data sources; remove references to acre.gturn.xyz."",""distinct"":false,""url"":""https://api.github.com/repos/brukshut/terraform/commits/bac2873fa66190a73ee116ddceb442185272e1d6""},{""sha"":""231f9b9a5e31ffce3c6fe604e4af64494f97a0bf"",""author"":{""name"":""Christian Gough"",""email"":""515e74db1436fdbd04b7620ef875022b5e277020@gmail.com""},""message"":""Move statefile location; remove acre.gturn.xyz; change A records to use mail.gturn.xyz."",""distinct"":false,""url"":""https://api.github.com/repos/brukshut/terraform/commits/231f9b9a5e31ffce3c6fe604e4af64494f97a0bf""},{""sha"":""9a7d031e45a1644f4346e795826cfe6c57b6103b"",""author"":{""name"":""Christian Gough"",""email"":""2314b2e3a4a1f7db165be2aafbf1efd78f28cc97@gturn.xyz""},""message"":""Merge pull request #65 from brukshut/feature/route53-module-upgrade\n\nroute53 module upgrade"",""distinct"":true,""url"":""https://api.github.com/repos/brukshut/terraform/commits/9a7d031e45a1644f4346e795826cfe6c57b6103b""}]",,,,,,,,,,
15439122932,PullRequestEvent,true,2021-03-07 23:00:28.000000 UTC,1058663,UbuntuEvangelist,93318917,UbuntuEvangelist/react,,,,,,,,"""opened""",32,,,,,,,,
15439123480,PushEvent,true,2021-03-07 23:00:35.000000 UTC,1058663,UbuntuEvangelist,93318917,UbuntuEvangelist/react,"""refs/heads/snyk-fix-579076619ffcc9039da9a91483b731e4""",,,6661159278,1,1,"[{""sha"":""7a05836c4954db1225ed1504b0f72f2c72a76cb0"",""author"":{""name"":""snyk-bot"",""email"":""6524ae312692b75c8ed05087d0aa3c757ac39348@snyk.io""},""message"":""fix: fixtures/packaging/webpack/dev/package.json to reduce vulnerabilities\n\nThe following vulnerabilities are fixed with an upgrade:\n- https://snyk.io/vuln/SNYK-JS-GLOBPARENT-1016905"",""distinct"":true,""url"":""https://api.github.com/repos/UbuntuEvangelist/react/commits/7a05836c4954db1225ed1504b0f72f2c72a76cb0""}]",,,,,,,,,,
15439123490,CreateEvent,true,2021-03-07 23:00:35.000000 UTC,1058663,UbuntuEvangelist,93318917,UbuntuEvangelist/react,"""snyk-fix-579076619ffcc9039da9a91483b731e4""","""branch""","""user""",,,,,,,,,,,,,,
15439132967,PullRequestEvent,true,2021-03-07 23:02:50.000000 UTC,1111199,kevleyski,19844440,kevleyski/opencv,,,,,,,,"""opened""",2,,,,,,,,
15439133591,PullRequestEvent,true,2021-03-07 23:02:59.000000 UTC,1111199,kevleyski,19844440,kevleyski/opencv,,,,,,,,"""closed""",2,,,,,,,,
15439136733,PushEvent,true,2021-03-07 23:03:43.000000 UTC,1111199,kevleyski,19844440,kevleyski/opencv,"""refs/heads/master""",,,6661167424,1000,4096,"[{""sha"":""a3e8c6e866125bbae5ad4d8b0cb24371761c5968"",""author"":{""name"":""Alexey Smirnov"",""email"":""cc3c4a4673f4269d332764a93310c58f6ea9da06@intel.com""},""message"":""Merge pull request #18127 from smirnov-alexey:as/gapi_serialization\n\n[G-API]: Add GOpaque and GArray serialization support\r\n\r\n* Add GOpaque and GArray serialization support\r\n\r\n* Address review comments\r\n\r\n* Remove holds() method\r\n\r\n* Address review comments\r\n\r\n* Remove comments\r\n\r\n* Align streaming with kind changes\r\n\r\n* Fix kind in kernel\r\n\r\n* Address review comments"",""distinct"":true,""url"":""https://api.github.com/repos/kevleyski/opencv/commits/a3e8c6e866125bbae5ad4d8b0cb24371761c5968""},{""sha"":""750b1aba8dd174aa2b401363760feedab9267856"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #18280 from dtrodrigues:vtk-9"",""distinct"":true,""url"":""https://api.github.com/repos/kevleyski/opencv/commits/750b1aba8dd174aa2b401363760feedab9267856""},{""sha"":""a10d2899972206c451c7a8a0e658f39f2dc38650"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #18281 from dtrodrigues:issue-template-typo"",""distinct"":true,""url"":""https://api.github.com/repos/kevleyski/opencv/commits/a10d2899972206c451c7a8a0e658f39f2dc38650""},{""sha"":""f56445d7caf49100de50143db2c9aeb3566f1ed4"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""ffmpeg/3.4: update FFmpeg wrapper\n\n- FFmpeg 3.4.8"",""distinct"":true,""url"":""https://api.github.com/repos/kevleyski/opencv/commits/f56445d7caf49100de50143db2c9aeb3566f1ed4""},{""sha"":""da0fd62c23de1ff16d8e1f9516b7e1f716b6a379"",""author"":{""name"":""extrowerk"",""email"":""ae6157da5b38fd1d9d9a0fdd006f67ae29ec0c0a@users.noreply.github.com""},""message"":""Haiku: build fix\n\nHaiku is POSIX compatible"",""distinct"":true,""url"":""https://api.github.com/repos/kevleyski/opencv/commits/da0fd62c23de1ff16d8e1f9516b7e1f716b6a379""},{""sha"":""623aaaccd4e2da83168d206e70956ab686873203"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #18286 from extrowerk:patch-1"",""distinct"":true,""url"":""https://api.github.com/repos/kevleyski/opencv/commits/623aaaccd4e2da83168d206e70956ab686873203""},{""sha"":""a12ceb04bbdae2ae66470def464731db9c67944f"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""pre: OpenCV 4.5.0 (version++)"",""distinct"":true,""url"":""https://api.github.com/repos/kevleyski/opencv/commits/a12ceb04bbdae2ae66470def464731db9c67944f""},{""sha"":""f445b826d084188077a5e9d204c4c33d1589f380"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #18288 from alalek:update_version_4.5.0-pre"",""distinct"":true,""url"":""https://api.github.com/repos/kevleyski/opencv/commits/f445b826d084188077a5e9d204c4c33d1589f380""},{""sha"":""b23d377567003e3c034158392368b1bda84a6443"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""ffmpeg/4.x: update FFmpeg wrapper\n\n- FFmpeg 4.3.1"",""distinct"":true,""url"":""https://api.github.com/repos/kevleyski/opencv/commits/b23d377567003e3c034158392368b1bda84a6443""},{""sha"":""6b674709b879af9984a126a196ebceb7222c4cbf"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #18284 from alalek:update_ffmpeg_3.4"",""distinct"":true,""url"":""https://api.github.com/repos/kevleyski/opencv/commits/6b674709b879af9984a126a196ebceb7222c4cbf""},{""sha"":""1604ea3b27aa9fa345c16c62ddfacb156ebe8336"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #18290 from alalek:update_ffmpeg_4.x"",""distinct"":true,""url"":""https://api.github.com/repos/kevleyski/opencv/commits/1604ea3b27aa9fa345c16c62ddfacb156ebe8336""},{""sha"":""2dff2f36bfdf6b5c0c85e3096d0c1ab05e6146d7"",""author"":{""name"":""Maksim Shabunin"",""email"":""df7bbd2e1b30f9cbe316b888d25da4f669e20ac7@gmail.com""},""message"":""Install: added prebuilt samples installation"",""distinct"":true,""url"":""https://api.github.com/repos/kevleyski/opencv/commits/2dff2f36bfdf6b5c0c85e3096d0c1ab05e6146d7""},{""sha"":""b542a1804c2dd47442104b42c30fc9a67e94f5b5"",""author"":{""name"":""Liubov Batanina"",""email"":""e31e9421dee8ae251952f0c15777e23a2fd06308@yandex.ru""},""message"":""Support global reduce ops"",""distinct"":true,""url"":""https://api.github.com/repos/kevleyski/opencv/commits/b542a1804c2dd47442104b42c30fc9a67e94f5b5""},{""sha"":""f787c7384143a2f7a863795316f230db752daf80"",""author"":{""name"":""Shubham Dhumal"",""email"":""6b909411b17cb60e3c7382ffaf0e2586e6cc321f@users.noreply.github.com""},""message"":""Typo fix: CV.rabCutClasses to CV.grabCutClasses"",""distinct"":true,""url"":""https://api.github.com/repos/kevleyski/opencv/commits/f787c7384143a2f7a863795316f230db752daf80""},{""sha"":""23e71d1aa20ae2105cba9f7346d339036f45f3ce"",""author"":{""name"":""Shubham Singh"",""email"":""497b485b12945bb2e75153666203249960e005a0@users.noreply.github.com""},""message"":""fixes #17187 probably \n\nAdded Eltwise Layer Support"",""distinct"":true,""url"":""https://api.github.com/repos/kevleyski/opencv/commits/23e71d1aa20ae2105cba9f7346d339036f45f3ce""},{""sha"":""a3048239b36dfb963be9eb4331d177ae9e51cf39"",""author"":{""name"":""Christoph Gringmuth"",""email"":""37e0c05d17237b505328e7748ac40f9f2ddf2ee8@fastmail.com""},""message"":""Fix implicitly-deleted default constructor"",""distinct"":true,""url"":""https://api.github.com/repos/kevleyski/opencv/commits/a3048239b36dfb963be9eb4331d177ae9e51cf39""},{""sha"":""83807811cdefb0fa5672469c03f6daafa40c6f23"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #18299 from l-bat:onnx_reduce_max"",""distinct"":true,""url"":""https://api.github.com/repos/kevleyski/opencv/commits/83807811cdefb0fa5672469c03f6daafa40c6f23""},{""sha"":""a258404a58ea6b9b393abfdf65a890c5c2a1049b"",""author"":{""name"":""Anatoliy Talamanov"",""email"":""35a1e0e1837aaef6455f58da68e6c014a9bf1340@intel.com""},""message"":""Merge pull request #18309 from TolyaTalamanov:at/wrap-apply-overloads\n\n[G-API] Wrap cv::gapi::mean kernel into python\r\n\r\n* Wrap cv::gapi::mean kernel into python\r\n\r\n* Fix test"",""distinct"":true,""url"":""https://api.github.com/repos/kevleyski/opencv/commits/a258404a58ea6b9b393abfdf65a890c5c2a1049b""},{""sha"":""7d832337aedbe7f5fa8f03bbdb69d848ee6c4501"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""Merge pull request #18310 from ShadyD45:patch-1"",""distinct"":true,""url"":""https://api.github.com/repos/kevleyski/opencv/commits/7d832337aedbe7f5fa8f03bbdb69d848ee6c4501""},{""sha"":""7dfe68cac6e3ed26deb842d70f641264fd604071"",""author"":{""name"":""Alexander Alekhin"",""email"":""68add3c7f0912f500ebe6e9539930fd1bb229c72@gmail.com""},""message"":""imgcodecs: lazy on-demand codecs initialization"",""distinct"":true,""url"":""https://api.github.com/repos/kevleyski/opencv/commits/7dfe68cac6e3ed26deb842d70f641264fd604071""}]",,,,,,,,,,
15439300281,DeleteEvent,true,2021-03-07 23:43:36.000000 UTC,2440089,rickhanlonii,116611810,rickhanlonii/react,"""rh-decouple-discrete""","""branch""","""user""",,,,,,,,,,,,,,
15439308852,PushEvent,true,2021-03-07 23:45:45.000000 UTC,2440089,rickhanlonii,116611810,rickhanlonii/react,"""refs/heads/rh-refac-scheduler""",,,6661268513,11,11,"[{""sha"":""7df65725ba7826508e0f3c0f1c6f088efdbecfca"",""author"":{""name"":""Brian Vaughn"",""email"":""59942a8ec08225673b377c556396ca24baabd1b2@fb.com""},""message"":""Split getComponentName into getComponentNameFromFiber and getComponentNameFromType (#20940)\n\nSplit getComponentName into getComponentNameFromFiber and getComponentNameFromType"",""distinct"":true,""url"":""https://api.github.com/repos/rickhanlonii/react/commits/7df65725ba7826508e0f3c0f1c6f088efdbecfca""},{""sha"":""258b375a419098a5b6c3568e8d35046d142ea912"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""Move context comparison to consumer\n\nIn the lazy context implementation, not all context changes are\npropagated from the provider, so we can't rely on the propagation alone\nto mark the consumer as dirty. The consumer needs to compare to the\nprevious value, like we do for state and context.\n\nI added a `memoizedValue` field to the context dependency type. Then in\nthe consumer, we iterate over the current dependencies to see if\nsomething changed. We only do this iteration after props and state has\nalready bailed out, so it's a relatively uncommon path, except at the\nroot of a changed subtree. Alternatively, we could move these\ncomparisons into `readContext`, but that's a much hotter path, so I\nthink this is an appropriate trade off."",""distinct"":true,""url"":""https://api.github.com/repos/rickhanlonii/react/commits/258b375a419098a5b6c3568e8d35046d142ea912""},{""sha"":""c7b4497988e81606f1c7686434f55a49342c9efc"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Experiment] Lazily propagate context changes (#20890)\n\n* Move context comparison to consumer\r\n\r\nIn the lazy context implementation, not all context changes are\r\npropagated from the provider, so we can't rely on the propagation alone\r\nto mark the consumer as dirty. The consumer needs to compare to the\r\nprevious value, like we do for state and context.\r\n\r\nI added a `memoizedValue` field to the context dependency type. Then in\r\nthe consumer, we iterate over the current dependencies to see if\r\nsomething changed. We only do this iteration after props and state has\r\nalready bailed out, so it's a relatively uncommon path, except at the\r\nroot of a changed subtree. Alternatively, we could move these\r\ncomparisons into `readContext`, but that's a much hotter path, so I\r\nthink this is an appropriate trade off.\r\n\r\n* [Experiment] Lazily propagate context changes\r\n\r\nWhen a context provider changes, we scan the tree for matching consumers\r\nand mark them as dirty so that we know they have pending work. This\r\nprevents us from bailing out if, say, an intermediate wrapper is\r\nmemoized.\r\n\r\nCurrently, we propagate these changes eagerly, at the provider.\r\n\r\nHowever, in many cases, we would have ended up visiting the consumer\r\nnodes anyway, as part of the normal render traversal, because there's no\r\nmemoized node in between that bails out.\r\n\r\nWe can save CPU cycles by propagating changes only when we hit a\r\nmemoized component — so, instead of propagating eagerly at the provider,\r\nwe propagate lazily if or when something bails out.\r\n\r\nMost of our bailout logic is centralized in\r\n`bailoutOnAlreadyFinishedWork`, so this ended up being not that\r\ndifficult to implement correctly.\r\n\r\nThere are some exceptions: Suspense and Offscreen. Those are special\r\nbecause they sometimes defer the rendering of their children to a\r\ncompletely separate render cycle. In those cases, we must take extra\r\ncare to propagate *all* the context changes, not just the first one.\r\n\r\nI'm pleasantly surprised at how little I needed to change in this\r\ninitial implementation. I was worried I'd have to use the reconciler\r\nfork, but I ended up being able to wrap all my changes in a regular\r\nfeature flag. So, we could run an experiment in parallel to our other\r\nones.\r\n\r\nI do consider this a risky rollout overall because of the potential for\r\nsubtle semantic deviations. However, the model is simple enough that I\r\ndon't expect us to have trouble fixing regressions if or when they arise\r\nduring internal dogfooding.\r\n\r\n---\r\n\r\nThis is largely based on [RFC#118](https://github.com/reactjs/rfcs/pull/118),\r\nby @gnoff. I did deviate in some of the implementation details, though.\r\n\r\nThe main one is how I chose to track context changes. Instead of storing\r\na dirty flag on the stack, I added a `memoizedValue` field to the\r\ncontext dependency object. Then, to check if something has changed, the\r\nconsumer compares the new context value to the old (memoized) one.\r\n\r\nThis is necessary because of Suspense and Offscreen — those components\r\ndefer work from one render into a later one. When the subtree continues\r\nrendering, the stack from the previous render is no longer available.\r\nBut the memoized values on the dependencies list are. This requires a\r\nbit more work when a consumer bails out, but nothing considerable, and\r\nthere are ways we could optimize it even further. Conceptually, this\r\nmodel is really appealing, since it matches how our other features\r\n\""reactively\"" detect changes — `useMemo`, `useEffect`,\r\n`getDerivedStateFromProps`, the built-in cache, and so on.\r\n\r\nI also intentionally dropped support for\r\n`unstable_calculateChangedBits`. We're planning to remove this API\r\nanyway before the next major release, in favor of context selectors.\r\nIt's an unstable feature that we never advertised; I don't think it's\r\nseen much adoption.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Propagate all contexts in single pass\r\n\r\nInstead of propagating the tree once per changed context, we can check\r\nall the contexts in a single propagation. This inverts the two loops so\r\nthat the faster loop (O(numberOfContexts)) is inside the more expensive\r\nloop (O(numberOfFibers * avgContextDepsPerFiber)).\r\n\r\nThis adds a bit of overhead to the case where only a single context\r\nchanges because you have to unwrap the context from the array. I'm also\r\nunsure if this will hurt cache locality.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Stop propagating at nearest dependency match\r\n\r\nBecause we now propagate all context providers in a single traversal, we\r\ncan defer context propagation to a subtree without losing information\r\nabout which context providers we're deferring — it's all of them.\r\n\r\nTheoretically, this is a big optimization because it means we'll never\r\npropagate to any tree that has work scheduled on it, nor will we ever\r\npropagate the same tree twice.\r\n\r\nThere's an awkward case related to bailing out of the siblings of a\r\ncontext consumer. Because those siblings don't bail out until after\r\nthey've already entered the begin phase, we have to do extra work to\r\nmake sure they don't unecessarily propagate context again. We could\r\navoid this by adding an earlier bailout for sibling nodes, something\r\nwe've discussed in the past. We should consider this during the next\r\nrefactor of the fiber tree structure.\r\n\r\nCo-Authored-By: Josh Story <jcs.gnoff@gmail.com>\r\n\r\n* Mark trees that need propagation in readContext\r\n\r\nInstead of storing matched context consumers in a Set, we can mark\r\nwhen a consumer receives an update inside `readContext`.\r\n\r\nI hesistated to put anything in this function because it's such a hot\r\npath, but so are bail outs. Fortunately, we only need to set this flag\r\nonce, the first time a context is read. So I think it's a reasonable\r\ntrade off.\r\n\r\nIn exchange, propagation is faster because we no longer need to\r\naccumulate a Set of matched consumers, and fiber bailouts are faster\r\nbecause we don't need to consult that Set. And the code is simpler.\r\n\r\nCo-authored-by: Josh Story <jcs.gnoff@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/rickhanlonii/react/commits/c7b4497988e81606f1c7686434f55a49342c9efc""},{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/rickhanlonii/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""},{""sha"":""d74559746c03d9f620e4fd338c70ce319070e0be"",""author"":{""name"":""Ricky"",""email"":""7d12b144c45a90369c62925ec4a27c43a68a93bf@gmail.com""},""message"":""Use update lane priority to set pending updates on roots (#20918)"",""distinct"":true,""url"":""https://api.github.com/repos/rickhanlonii/react/commits/d74559746c03d9f620e4fd338c70ce319070e0be""},{""sha"":""ef218e033ad3939db252d6733a59659cebcffe0f"",""author"":{""name"":""Rick Hanlon"",""email"":""7d12b144c45a90369c62925ec4a27c43a68a93bf@gmail.com""},""message"":""Clean up Scheduler forks"",""distinct"":true,""url"":""https://api.github.com/repos/rickhanlonii/react/commits/ef218e033ad3939db252d6733a59659cebcffe0f""},{""sha"":""407dffea15009e27deb5c156f752181c4966c8b7"",""author"":{""name"":""Rick Hanlon"",""email"":""7d12b144c45a90369c62925ec4a27c43a68a93bf@gmail.com""},""message"":""Un-shadow variables"",""distinct"":true,""url"":""https://api.github.com/repos/rickhanlonii/react/commits/407dffea15009e27deb5c156f752181c4966c8b7""},{""sha"":""460cffe2fdf9afb077f72094618aed3dd9f1ed2d"",""author"":{""name"":""Rick Hanlon"",""email"":""7d12b144c45a90369c62925ec4a27c43a68a93bf@gmail.com""},""message"":""Use timer globals directly, add a test for overrides"",""distinct"":true,""url"":""https://api.github.com/repos/rickhanlonii/react/commits/460cffe2fdf9afb077f72094618aed3dd9f1ed2d""},{""sha"":""4f97ead2578f04a74e3ee655b87a538095406883"",""author"":{""name"":""Rick Hanlon"",""email"":""7d12b144c45a90369c62925ec4a27c43a68a93bf@gmail.com""},""message"":""Remove more window references"",""distinct"":true,""url"":""https://api.github.com/repos/rickhanlonii/react/commits/4f97ead2578f04a74e3ee655b87a538095406883""},{""sha"":""18ac556411f3f22bba01b6e2b4f5745c9b8c4a51"",""author"":{""name"":""Rick Hanlon"",""email"":""7d12b144c45a90369c62925ec4a27c43a68a93bf@gmail.com""},""message"":""Don't crash for undefined globals + tests"",""distinct"":true,""url"":""https://api.github.com/repos/rickhanlonii/react/commits/18ac556411f3f22bba01b6e2b4f5745c9b8c4a51""},{""sha"":""19f6bc73d73789ae6257c5c4ae88a313300c7572"",""author"":{""name"":""Rick Hanlon"",""email"":""7d12b144c45a90369c62925ec4a27c43a68a93bf@gmail.com""},""message"":""Update lint config globals"",""distinct"":true,""url"":""https://api.github.com/repos/rickhanlonii/react/commits/19f6bc73d73789ae6257c5c4ae88a313300c7572""}]",,,,,,,,,,
15439125189,PushEvent,true,2021-03-07 23:00:59.000000 UTC,3019722,AlekLefebvre,345222060,AlekLefebvre/scikit-learn,"""refs/heads/calibrated_classifier_cv_pipeline""",,,6661160318,1,1,"[{""sha"":""7c76ff65f7b88cda8fd1661e68acd06303f53213"",""author"":{""name"":""Alek Lefebvre"",""email"":""52a07fcac2572e43dd1d13dc005b7612265bc522@mail.mcgill.ca""},""message"":""Test predict, docs and changelog"",""distinct"":true,""url"":""https://api.github.com/repos/AlekLefebvre/scikit-learn/commits/7c76ff65f7b88cda8fd1661e68acd06303f53213""}]",,,,,,,,,,
15439323531,PullRequestEvent,true,2021-03-07 23:49:28.000000 UTC,12866748,akiramitsu,137795317,akiramitsu/react,,,,,,,,"""opened""",53,,,,,,,,
15439323609,CreateEvent,true,2021-03-07 23:49:30.000000 UTC,12866748,akiramitsu,137795317,akiramitsu/react,"""snyk-fix-28ca5794796426aba6ebf7bb9b4161c3""","""branch""","""user""",,,,,,,,,,,,,,
15439323637,PushEvent,true,2021-03-07 23:49:30.000000 UTC,12866748,akiramitsu,137795317,akiramitsu/react,"""refs/heads/snyk-fix-28ca5794796426aba6ebf7bb9b4161c3""",,,6661277097,1,1,"[{""sha"":""a1f354237397d26e1d6ba88139cd3e1fb215986a"",""author"":{""name"":""snyk-bot"",""email"":""6524ae312692b75c8ed05087d0aa3c757ac39348@snyk.io""},""message"":""fix: fixtures/packaging/webpack/prod/package.json & fixtures/packaging/webpack/prod/yarn.lock to reduce vulnerabilities\n\nThe following vulnerabilities are fixed with an upgrade:\n- https://snyk.io/vuln/SNYK-JS-GLOBPARENT-1016905"",""distinct"":true,""url"":""https://api.github.com/repos/akiramitsu/react/commits/a1f354237397d26e1d6ba88139cd3e1fb215986a""}]",,,,,,,,,,
15439134593,ForkEvent,true,2021-03-07 23:03:13.000000 UTC,13958098,MetaCDN,19844440,kevleyski/opencv,,,,,,,,,,"""MetaCDN/opencv""",,,,,,,
15439137501,PullRequestEvent,true,2021-03-07 23:03:54.000000 UTC,19560973,ajesse11x,146123333,ajesse11x/react,,,,,,,,"""opened""",54,,,,,,,,
15439137763,PushEvent,true,2021-03-07 23:03:59.000000 UTC,19560973,ajesse11x,146123333,ajesse11x/react,"""refs/heads/snyk-fix-01eb2e104121c359b40b96c9b2f5f54b""",,,6661168105,1,1,"[{""sha"":""f13bb6c56f0751590745711695494bb5dabcd013"",""author"":{""name"":""snyk-bot"",""email"":""6524ae312692b75c8ed05087d0aa3c757ac39348@snyk.io""},""message"":""fix: fixtures/packaging/webpack-alias/prod/package.json & fixtures/packaging/webpack-alias/prod/yarn.lock to reduce vulnerabilities\n\nThe following vulnerabilities are fixed with an upgrade:\n- https://snyk.io/vuln/SNYK-JS-GLOBPARENT-1016905"",""distinct"":true,""url"":""https://api.github.com/repos/ajesse11x/react/commits/f13bb6c56f0751590745711695494bb5dabcd013""}]",,,,,,,,,,
15439137776,CreateEvent,true,2021-03-07 23:03:59.000000 UTC,19560973,ajesse11x,146123333,ajesse11x/react,"""snyk-fix-01eb2e104121c359b40b96c9b2f5f54b""","""branch""","""user""",,,,,,,,,,,,,,
15439206306,IssueCommentEvent,true,2021-03-07 23:20:21.000000 UTC,24736507,pep8speaks,228097715,njzjz/tensorflow,,,,,,,,"""created""",,,,,,,,,
15439145228,PullRequestEvent,true,2021-03-07 23:05:48.000000 UTC,39814207,pull[bot],302953642,TheAssassinRen/tensorflow,,,,,,,,"""opened""",508,,,,,,,,
15439150446,PullRequestEvent,true,2021-03-07 23:07:05.000000 UTC,39814207,pull[bot],233268851,Manas1820/tensorflow,,,,,,,,"""opened""",842,,,,,,,,
15439206166,PullRequestEvent,true,2021-03-07 23:20:19.000000 UTC,39814207,pull[bot],228097715,njzjz/tensorflow,,,,,,,,"""opened""",1747,,,,,,,,
15439230185,PushEvent,true,2021-03-07 23:26:15.000000 UTC,39814207,pull[bot],302953642,TheAssassinRen/tensorflow,"""refs/heads/master""",,,6661223053,1,1,"[{""sha"":""ef71c3d421c128668177cb134a76f956f266c604"",""author"":{""name"":""TensorFlower Gardener"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Merge pull request #47580 from WindQAQ:optimize-argminmax\n\nPiperOrigin-RevId: 361450743\nChange-Id: I713c36b3d4e3e7490501ead6f9dfe29af00f074a"",""distinct"":true,""url"":""https://api.github.com/repos/TheAssassinRen/tensorflow/commits/ef71c3d421c128668177cb134a76f956f266c604""}]",,,,,,,,,,
15439231756,PullRequestEvent,true,2021-03-07 23:26:39.000000 UTC,39814207,pull[bot],174166640,Cache-Cloud/tensorflow,,,,,,,,"""opened""",6982,,,,,,,,
15439231840,PushEvent,true,2021-03-07 23:26:41.000000 UTC,39814207,pull[bot],233268851,Manas1820/tensorflow,"""refs/heads/master""",,,6661224073,1,1,"[{""sha"":""ef71c3d421c128668177cb134a76f956f266c604"",""author"":{""name"":""TensorFlower Gardener"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Merge pull request #47580 from WindQAQ:optimize-argminmax\n\nPiperOrigin-RevId: 361450743\nChange-Id: I713c36b3d4e3e7490501ead6f9dfe29af00f074a"",""distinct"":true,""url"":""https://api.github.com/repos/Manas1820/tensorflow/commits/ef71c3d421c128668177cb134a76f956f266c604""}]",,,,,,,,,,
15439254123,PullRequestEvent,true,2021-03-07 23:32:12.000000 UTC,39814207,pull[bot],179607331,isanjit3/tensorflow,,,,,,,,"""opened""",870,,,,,,,,
15439258530,PullRequestEvent,true,2021-03-07 23:33:14.000000 UTC,39814207,pull[bot],133704084,melG81/tensorflow,,,,,,,,"""opened""",676,,,,,,,,
15439263279,PullRequestEvent,true,2021-03-07 23:34:21.000000 UTC,39814207,pull[bot],82160236,waterdrops/tensorflow,,,,,,,,"""opened""",44,,,,,,,,
15439273366,PullRequestEvent,true,2021-03-07 23:36:45.000000 UTC,39814207,pull[bot],164577447,osmaelo/tensorflow,,,,,,,,"""opened""",5127,,,,,,,,
15439276232,PushEvent,true,2021-03-07 23:37:24.000000 UTC,39814207,pull[bot],228097715,njzjz/tensorflow,"""refs/heads/master""",,,6661249149,2,2,"[{""sha"":""ef71c3d421c128668177cb134a76f956f266c604"",""author"":{""name"":""TensorFlower Gardener"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Merge pull request #47580 from WindQAQ:optimize-argminmax\n\nPiperOrigin-RevId: 361450743\nChange-Id: I713c36b3d4e3e7490501ead6f9dfe29af00f074a"",""distinct"":true,""url"":""https://api.github.com/repos/njzjz/tensorflow/commits/ef71c3d421c128668177cb134a76f956f266c604""},{""sha"":""3a54c34c66d52f73f7cf7b0ffde395307b81b202"",""author"":{""name"":""Mehdi Amini"",""email"":""808100943be7b7010123d78912f654820a5ee1c1@google.com""},""message"":""Fix trivial cast removal in TFLite::Optimize Pass to handle non-TF(L) operations\n\nWe can't remove a cast when the types aren't perfectly identical and the\nuser may be sensitive to a shape change, like a function return.\n\nPiperOrigin-RevId: 361453711\nChange-Id: I9a02ec8fb464b6c0a28dbb54f81e084f1d53a0d1"",""distinct"":true,""url"":""https://api.github.com/repos/njzjz/tensorflow/commits/3a54c34c66d52f73f7cf7b0ffde395307b81b202""}]",,,,,,,,,,
15439276263,PullRequestEvent,true,2021-03-07 23:37:25.000000 UTC,39814207,pull[bot],228097715,njzjz/tensorflow,,,,,,,,"""closed""",1747,,,,,,,,
15439276747,PullRequestEvent,true,2021-03-07 23:37:32.000000 UTC,39814207,pull[bot],206156535,icpm/tensorflow,,,,,,,,"""opened""",4896,,,,,,,,
15439287136,PullRequestEvent,true,2021-03-07 23:40:12.000000 UTC,39814207,pull[bot],159132812,mark0725/tensorflow,,,,,,,,"""opened""",8184,,,,,,,,
15439295498,PushEvent,true,2021-03-07 23:42:22.000000 UTC,39814207,pull[bot],174166640,Cache-Cloud/tensorflow,"""refs/heads/master""",,,6661260628,2,2,"[{""sha"":""ef71c3d421c128668177cb134a76f956f266c604"",""author"":{""name"":""TensorFlower Gardener"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Merge pull request #47580 from WindQAQ:optimize-argminmax\n\nPiperOrigin-RevId: 361450743\nChange-Id: I713c36b3d4e3e7490501ead6f9dfe29af00f074a"",""distinct"":true,""url"":""https://api.github.com/repos/Cache-Cloud/tensorflow/commits/ef71c3d421c128668177cb134a76f956f266c604""},{""sha"":""3a54c34c66d52f73f7cf7b0ffde395307b81b202"",""author"":{""name"":""Mehdi Amini"",""email"":""808100943be7b7010123d78912f654820a5ee1c1@google.com""},""message"":""Fix trivial cast removal in TFLite::Optimize Pass to handle non-TF(L) operations\n\nWe can't remove a cast when the types aren't perfectly identical and the\nuser may be sensitive to a shape change, like a function return.\n\nPiperOrigin-RevId: 361453711\nChange-Id: I9a02ec8fb464b6c0a28dbb54f81e084f1d53a0d1"",""distinct"":true,""url"":""https://api.github.com/repos/Cache-Cloud/tensorflow/commits/3a54c34c66d52f73f7cf7b0ffde395307b81b202""}]",,,,,,,,,,
15439295506,PullRequestEvent,true,2021-03-07 23:42:22.000000 UTC,39814207,pull[bot],174166640,Cache-Cloud/tensorflow,,,,,,,,"""closed""",6982,,,,,,,,
15439312987,PushEvent,true,2021-03-07 23:46:49.000000 UTC,39814207,pull[bot],179607331,isanjit3/tensorflow,"""refs/heads/master""",,,6661270935,2,2,"[{""sha"":""ef71c3d421c128668177cb134a76f956f266c604"",""author"":{""name"":""TensorFlower Gardener"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Merge pull request #47580 from WindQAQ:optimize-argminmax\n\nPiperOrigin-RevId: 361450743\nChange-Id: I713c36b3d4e3e7490501ead6f9dfe29af00f074a"",""distinct"":true,""url"":""https://api.github.com/repos/isanjit3/tensorflow/commits/ef71c3d421c128668177cb134a76f956f266c604""},{""sha"":""3a54c34c66d52f73f7cf7b0ffde395307b81b202"",""author"":{""name"":""Mehdi Amini"",""email"":""808100943be7b7010123d78912f654820a5ee1c1@google.com""},""message"":""Fix trivial cast removal in TFLite::Optimize Pass to handle non-TF(L) operations\n\nWe can't remove a cast when the types aren't perfectly identical and the\nuser may be sensitive to a shape change, like a function return.\n\nPiperOrigin-RevId: 361453711\nChange-Id: I9a02ec8fb464b6c0a28dbb54f81e084f1d53a0d1"",""distinct"":true,""url"":""https://api.github.com/repos/isanjit3/tensorflow/commits/3a54c34c66d52f73f7cf7b0ffde395307b81b202""}]",,,,,,,,,,
15439313029,PullRequestEvent,true,2021-03-07 23:46:49.000000 UTC,39814207,pull[bot],179607331,isanjit3/tensorflow,,,,,,,,"""closed""",870,,,,,,,,
15439315149,PushEvent,true,2021-03-07 23:47:21.000000 UTC,39814207,pull[bot],133704084,melG81/tensorflow,"""refs/heads/master""",,,6661272198,2,2,"[{""sha"":""ef71c3d421c128668177cb134a76f956f266c604"",""author"":{""name"":""TensorFlower Gardener"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Merge pull request #47580 from WindQAQ:optimize-argminmax\n\nPiperOrigin-RevId: 361450743\nChange-Id: I713c36b3d4e3e7490501ead6f9dfe29af00f074a"",""distinct"":true,""url"":""https://api.github.com/repos/melG81/tensorflow/commits/ef71c3d421c128668177cb134a76f956f266c604""},{""sha"":""3a54c34c66d52f73f7cf7b0ffde395307b81b202"",""author"":{""name"":""Mehdi Amini"",""email"":""808100943be7b7010123d78912f654820a5ee1c1@google.com""},""message"":""Fix trivial cast removal in TFLite::Optimize Pass to handle non-TF(L) operations\n\nWe can't remove a cast when the types aren't perfectly identical and the\nuser may be sensitive to a shape change, like a function return.\n\nPiperOrigin-RevId: 361453711\nChange-Id: I9a02ec8fb464b6c0a28dbb54f81e084f1d53a0d1"",""distinct"":true,""url"":""https://api.github.com/repos/melG81/tensorflow/commits/3a54c34c66d52f73f7cf7b0ffde395307b81b202""}]",,,,,,,,,,
15439315191,PullRequestEvent,true,2021-03-07 23:47:22.000000 UTC,39814207,pull[bot],133704084,melG81/tensorflow,,,,,,,,"""closed""",676,,,,,,,,
15439317890,PushEvent,true,2021-03-07 23:48:02.000000 UTC,39814207,pull[bot],82160236,waterdrops/tensorflow,"""refs/heads/master""",,,6661273707,2,2,"[{""sha"":""ef71c3d421c128668177cb134a76f956f266c604"",""author"":{""name"":""TensorFlower Gardener"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Merge pull request #47580 from WindQAQ:optimize-argminmax\n\nPiperOrigin-RevId: 361450743\nChange-Id: I713c36b3d4e3e7490501ead6f9dfe29af00f074a"",""distinct"":true,""url"":""https://api.github.com/repos/waterdrops/tensorflow/commits/ef71c3d421c128668177cb134a76f956f266c604""},{""sha"":""3a54c34c66d52f73f7cf7b0ffde395307b81b202"",""author"":{""name"":""Mehdi Amini"",""email"":""808100943be7b7010123d78912f654820a5ee1c1@google.com""},""message"":""Fix trivial cast removal in TFLite::Optimize Pass to handle non-TF(L) operations\n\nWe can't remove a cast when the types aren't perfectly identical and the\nuser may be sensitive to a shape change, like a function return.\n\nPiperOrigin-RevId: 361453711\nChange-Id: I9a02ec8fb464b6c0a28dbb54f81e084f1d53a0d1"",""distinct"":true,""url"":""https://api.github.com/repos/waterdrops/tensorflow/commits/3a54c34c66d52f73f7cf7b0ffde395307b81b202""}]",,,,,,,,,,
15439317932,PullRequestEvent,true,2021-03-07 23:48:03.000000 UTC,39814207,pull[bot],82160236,waterdrops/tensorflow,,,,,,,,"""closed""",44,,,,,,,,
15439323942,PushEvent,true,2021-03-07 23:49:35.000000 UTC,39814207,pull[bot],164577447,osmaelo/tensorflow,"""refs/heads/master""",,,6661277276,2,2,"[{""sha"":""ef71c3d421c128668177cb134a76f956f266c604"",""author"":{""name"":""TensorFlower Gardener"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Merge pull request #47580 from WindQAQ:optimize-argminmax\n\nPiperOrigin-RevId: 361450743\nChange-Id: I713c36b3d4e3e7490501ead6f9dfe29af00f074a"",""distinct"":true,""url"":""https://api.github.com/repos/osmaelo/tensorflow/commits/ef71c3d421c128668177cb134a76f956f266c604""},{""sha"":""3a54c34c66d52f73f7cf7b0ffde395307b81b202"",""author"":{""name"":""Mehdi Amini"",""email"":""808100943be7b7010123d78912f654820a5ee1c1@google.com""},""message"":""Fix trivial cast removal in TFLite::Optimize Pass to handle non-TF(L) operations\n\nWe can't remove a cast when the types aren't perfectly identical and the\nuser may be sensitive to a shape change, like a function return.\n\nPiperOrigin-RevId: 361453711\nChange-Id: I9a02ec8fb464b6c0a28dbb54f81e084f1d53a0d1"",""distinct"":true,""url"":""https://api.github.com/repos/osmaelo/tensorflow/commits/3a54c34c66d52f73f7cf7b0ffde395307b81b202""}]",,,,,,,,,,
15439323965,PullRequestEvent,true,2021-03-07 23:49:36.000000 UTC,39814207,pull[bot],164577447,osmaelo/tensorflow,,,,,,,,"""closed""",5127,,,,,,,,
15439326392,PushEvent,true,2021-03-07 23:50:13.000000 UTC,39814207,pull[bot],206156535,icpm/tensorflow,"""refs/heads/master""",,,6661278761,2,2,"[{""sha"":""ef71c3d421c128668177cb134a76f956f266c604"",""author"":{""name"":""TensorFlower Gardener"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Merge pull request #47580 from WindQAQ:optimize-argminmax\n\nPiperOrigin-RevId: 361450743\nChange-Id: I713c36b3d4e3e7490501ead6f9dfe29af00f074a"",""distinct"":true,""url"":""https://api.github.com/repos/icpm/tensorflow/commits/ef71c3d421c128668177cb134a76f956f266c604""},{""sha"":""3a54c34c66d52f73f7cf7b0ffde395307b81b202"",""author"":{""name"":""Mehdi Amini"",""email"":""808100943be7b7010123d78912f654820a5ee1c1@google.com""},""message"":""Fix trivial cast removal in TFLite::Optimize Pass to handle non-TF(L) operations\n\nWe can't remove a cast when the types aren't perfectly identical and the\nuser may be sensitive to a shape change, like a function return.\n\nPiperOrigin-RevId: 361453711\nChange-Id: I9a02ec8fb464b6c0a28dbb54f81e084f1d53a0d1"",""distinct"":true,""url"":""https://api.github.com/repos/icpm/tensorflow/commits/3a54c34c66d52f73f7cf7b0ffde395307b81b202""}]",,,,,,,,,,
15439326429,PullRequestEvent,true,2021-03-07 23:50:14.000000 UTC,39814207,pull[bot],206156535,icpm/tensorflow,,,,,,,,"""closed""",4896,,,,,,,,
15439334698,PushEvent,true,2021-03-07 23:52:18.000000 UTC,39814207,pull[bot],159132812,mark0725/tensorflow,"""refs/heads/master""",,,6661283639,2,2,"[{""sha"":""ef71c3d421c128668177cb134a76f956f266c604"",""author"":{""name"":""TensorFlower Gardener"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Merge pull request #47580 from WindQAQ:optimize-argminmax\n\nPiperOrigin-RevId: 361450743\nChange-Id: I713c36b3d4e3e7490501ead6f9dfe29af00f074a"",""distinct"":true,""url"":""https://api.github.com/repos/mark0725/tensorflow/commits/ef71c3d421c128668177cb134a76f956f266c604""},{""sha"":""3a54c34c66d52f73f7cf7b0ffde395307b81b202"",""author"":{""name"":""Mehdi Amini"",""email"":""808100943be7b7010123d78912f654820a5ee1c1@google.com""},""message"":""Fix trivial cast removal in TFLite::Optimize Pass to handle non-TF(L) operations\n\nWe can't remove a cast when the types aren't perfectly identical and the\nuser may be sensitive to a shape change, like a function return.\n\nPiperOrigin-RevId: 361453711\nChange-Id: I9a02ec8fb464b6c0a28dbb54f81e084f1d53a0d1"",""distinct"":true,""url"":""https://api.github.com/repos/mark0725/tensorflow/commits/3a54c34c66d52f73f7cf7b0ffde395307b81b202""}]",,,,,,,,,,
15439334716,PullRequestEvent,true,2021-03-07 23:52:18.000000 UTC,39814207,pull[bot],159132812,mark0725/tensorflow,,,,,,,,"""closed""",8184,,,,,,,,
15439346229,PullRequestEvent,true,2021-03-07 23:55:18.000000 UTC,39814207,pull[bot],211211919,Mu-L/tensorflow,,,,,,,,"""opened""",1257,,,,,,,,
15439347839,PullRequestEvent,true,2021-03-07 23:55:43.000000 UTC,39814207,pull[bot],211634994,Melon-Tropics/react,,,,,,,,"""opened""",659,,,,,,,,
15439351161,PullRequestEvent,true,2021-03-07 23:56:36.000000 UTC,39814207,pull[bot],316339507,Jeffkeen7/react,,,,,,,,"""opened""",109,,,,,,,,
15439353998,PullRequestEvent,true,2021-03-07 23:57:17.000000 UTC,39814207,pull[bot],157488097,greedisgoood/tensorflow,,,,,,,,"""opened""",406,,,,,,,,
15439231051,PullRequestEvent,true,2021-03-07 23:26:28.000000 UTC,55159299,ArielHaruv,207646236,ArielHaruv/react,,,,,,,,"""opened""",68,,,,,,,,
15439231245,PushEvent,true,2021-03-07 23:26:32.000000 UTC,55159299,ArielHaruv,207646236,ArielHaruv/react,"""refs/heads/snyk-fix-01eb2e104121c359b40b96c9b2f5f54b""",,,6661223700,1,1,"[{""sha"":""865475b673acaf957456ac6f0af31c081bc34b87"",""author"":{""name"":""snyk-bot"",""email"":""6524ae312692b75c8ed05087d0aa3c757ac39348@snyk.io""},""message"":""fix: fixtures/packaging/webpack-alias/prod/package.json & fixtures/packaging/webpack-alias/prod/yarn.lock to reduce vulnerabilities\n\nThe following vulnerabilities are fixed with an upgrade:\n- https://snyk.io/vuln/SNYK-JS-GLOBPARENT-1016905"",""distinct"":true,""url"":""https://api.github.com/repos/ArielHaruv/react/commits/865475b673acaf957456ac6f0af31c081bc34b87""}]",,,,,,,,,,
15439231253,CreateEvent,true,2021-03-07 23:26:32.000000 UTC,55159299,ArielHaruv,207646236,ArielHaruv/react,"""snyk-fix-01eb2e104121c359b40b96c9b2f5f54b""","""branch""","""user""",,,,,,,,,,,,,,
15439344914,PullRequestEvent,true,2021-03-07 23:54:58.000000 UTC,55159299,ArielHaruv,207646236,ArielHaruv/react,,,,,,,,"""opened""",69,,,,,,,,
15439345017,CreateEvent,true,2021-03-07 23:55:00.000000 UTC,55159299,ArielHaruv,207646236,ArielHaruv/react,"""snyk-fix-c7db3563c97ef7c90596f846409597a3""","""branch""","""user""",,,,,,,,,,,,,,
15439345058,PushEvent,true,2021-03-07 23:55:00.000000 UTC,55159299,ArielHaruv,207646236,ArielHaruv/react,"""refs/heads/snyk-fix-c7db3563c97ef7c90596f846409597a3""",,,6661289859,1,1,"[{""sha"":""35fe5a1ae89fd095fae5c1bb1f8ff2ac58adaefc"",""author"":{""name"":""snyk-bot"",""email"":""6524ae312692b75c8ed05087d0aa3c757ac39348@snyk.io""},""message"":""fix: fixtures/packaging/webpack/dev/package.json & fixtures/packaging/webpack/dev/yarn.lock to reduce vulnerabilities\n\nThe following vulnerabilities are fixed with an upgrade:\n- https://snyk.io/vuln/SNYK-JS-GLOBPARENT-1016905"",""distinct"":true,""url"":""https://api.github.com/repos/ArielHaruv/react/commits/35fe5a1ae89fd095fae5c1bb1f8ff2ac58adaefc""}]",,,,,,,,,,
15439275405,PullRequestEvent,true,2021-03-07 23:37:12.000000 UTC,56318596,blubfoo,213726541,blubfoo/react,,,,,,,,"""opened""",68,,,,,,,,
15439275878,PushEvent,true,2021-03-07 23:37:19.000000 UTC,56318596,blubfoo,213726541,blubfoo/react,"""refs/heads/snyk-fix-012cc9d54783b5645999e52ad6d1334a""",,,6661248961,1,1,"[{""sha"":""81d1c9f4b007ff5c3d6a72ab05eabaa291033aba"",""author"":{""name"":""snyk-bot"",""email"":""6524ae312692b75c8ed05087d0aa3c757ac39348@snyk.io""},""message"":""fix: fixtures/packaging/webpack/dev/package.json & fixtures/packaging/webpack/dev/yarn.lock to reduce vulnerabilities\n\nThe following vulnerabilities are fixed with an upgrade:\n- https://snyk.io/vuln/SNYK-JS-GLOBPARENT-1016905"",""distinct"":true,""url"":""https://api.github.com/repos/blubfoo/react/commits/81d1c9f4b007ff5c3d6a72ab05eabaa291033aba""}]",,,,,,,,,,
15439275893,CreateEvent,true,2021-03-07 23:37:19.000000 UTC,56318596,blubfoo,213726541,blubfoo/react,"""snyk-fix-012cc9d54783b5645999e52ad6d1334a""","""branch""","""user""",,,,,,,,,,,,,,
15439154667,PullRequestEvent,true,2021-03-07 23:08:08.000000 UTC,56575816,smk579702,215233412,smk579702/react,,,,,,,,"""opened""",68,,,,,,,,
15439155063,PushEvent,true,2021-03-07 23:08:14.000000 UTC,56575816,smk579702,215233412,smk579702/react,"""refs/heads/snyk-fix-b1bb7b1acf72160ec974ac2180ed70e9""",,,6661178513,1,1,"[{""sha"":""08d9bffed86ee2618a13040fce6f3369ba395a97"",""author"":{""name"":""snyk-bot"",""email"":""6524ae312692b75c8ed05087d0aa3c757ac39348@snyk.io""},""message"":""fix: fixtures/packaging/webpack-alias/dev/package.json & fixtures/packaging/webpack-alias/dev/yarn.lock to reduce vulnerabilities\n\nThe following vulnerabilities are fixed with an upgrade:\n- https://snyk.io/vuln/SNYK-JS-GLOBPARENT-1016905"",""distinct"":true,""url"":""https://api.github.com/repos/smk579702/react/commits/08d9bffed86ee2618a13040fce6f3369ba395a97""}]",,,,,,,,,,
15439155079,CreateEvent,true,2021-03-07 23:08:15.000000 UTC,56575816,smk579702,215233412,smk579702/react,"""snyk-fix-b1bb7b1acf72160ec974ac2180ed70e9""","""branch""","""user""",,,,,,,,,,,,,,
15439250011,WatchEvent,true,2021-03-07 23:31:10.000000 UTC,62495388,Vyse12138,318098148,Vyse12138/react,,,,,,,,"""started""",,,,,,,,,
15439234050,IssueCommentEvent,true,2021-03-07 23:27:15.000000 UTC,8618235,mvadu,7691631,moby/moby,,,,,,,,"""created""",,,,,,,,,
15439259002,WatchEvent,true,2021-03-07 23:33:21.000000 UTC,50976432,yujyuj,5108051,opencv/opencv,,,,,,,,"""started""",,,,,,,,,
15439240552,IssueCommentEvent,true,2021-03-07 23:28:51.000000 UTC,335567,Carreau,658518,ipython/ipython,,,,,,,,"""created""",,,,,,,,,
15439246614,IssueCommentEvent,true,2021-03-07 23:30:20.000000 UTC,335567,Carreau,658518,ipython/ipython,,,,,,,,"""created""",,,,,,,,,
15439299840,PullRequestEvent,true,2021-03-07 23:43:29.000000 UTC,2440089,rickhanlonii,10270250,facebook/react,,,,,,,,"""closed""",20918,,,,,,,,
15439300691,PushEvent,true,2021-03-07 23:43:43.000000 UTC,2440089,rickhanlonii,10270250,facebook/react,"""refs/heads/master""",,,6661263489,1,1,"[{""sha"":""d74559746c03d9f620e4fd338c70ce319070e0be"",""author"":{""name"":""Ricky"",""email"":""7d12b144c45a90369c62925ec4a27c43a68a93bf@gmail.com""},""message"":""Use update lane priority to set pending updates on roots (#20918)"",""distinct"":true,""url"":""https://api.github.com/repos/facebook/react/commits/d74559746c03d9f620e4fd338c70ce319070e0be""}]",,,,,,,,,,
15439194937,WatchEvent,true,2021-03-07 23:17:38.000000 UTC,6554238,lluthus,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15439152333,WatchEvent,true,2021-03-07 23:07:34.000000 UTC,10573466,BlackPhrase,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15439155194,WatchEvent,true,2021-03-07 23:08:16.000000 UTC,11798029,CharukaHS,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15439184981,WatchEvent,true,2021-03-07 23:15:17.000000 UTC,70249988,chazkiker2,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15439285300,WatchEvent,true,2021-03-07 23:39:47.000000 UTC,72921542,Max-Hitchings,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15439175040,WatchEvent,true,2021-03-07 23:12:56.000000 UTC,8182083,C0pyR1ght,248295170,geist-org/react,,,,,,,,"""started""",,,,,,,,,
15439184287,IssueCommentEvent,true,2021-03-07 23:15:08.000000 UTC,12850030,blckct,17728164,hashicorp/terraform,,,,,,,,"""created""",,,,,,,,,
15439329871,PullRequestEvent,true,2021-03-07 23:51:06.000000 UTC,39814207,pull[bot],84768089,stackriot/react,,,,,,,,"""opened""",1713,,,,,,,,
15439220130,IssueCommentEvent,true,2021-03-07 23:23:47.000000 UTC,659115,jackd,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15439220148,IssuesEvent,true,2021-03-07 23:23:47.000000 UTC,659115,jackd,45717250,tensorflow/tensorflow,,,,,,,,"""closed""",,,,,,,,,
15439313073,IssuesEvent,true,2021-03-07 23:46:50.000000 UTC,3635645,m4ff,45717250,tensorflow/tensorflow,,,,,,,,"""opened""",,,,,,,,,
15439262804,IssuesEvent,true,2021-03-07 23:34:15.000000 UTC,42703908,karrdy89,45717250,tensorflow/tensorflow,,,,,,,,"""opened""",,,,,,,,,
15439209504,PushEvent,true,2021-03-07 23:21:08.000000 UTC,56741989,copybara-service[bot],45717250,tensorflow/tensorflow,"""refs/heads/master""",,,6661210260,1,1,"[{""sha"":""3a54c34c66d52f73f7cf7b0ffde395307b81b202"",""author"":{""name"":""Mehdi Amini"",""email"":""808100943be7b7010123d78912f654820a5ee1c1@google.com""},""message"":""Fix trivial cast removal in TFLite::Optimize Pass to handle non-TF(L) operations\n\nWe can't remove a cast when the types aren't perfectly identical and the\nuser may be sensitive to a shape change, like a function return.\n\nPiperOrigin-RevId: 361453711\nChange-Id: I9a02ec8fb464b6c0a28dbb54f81e084f1d53a0d1"",""distinct"":true,""url"":""https://api.github.com/repos/tensorflow/tensorflow/commits/3a54c34c66d52f73f7cf7b0ffde395307b81b202""}]",,,,,,,,,,
15439122956,PushEvent,true,2021-03-07 23:00:28.000000 UTC,19616653,ArmageddonKnight,204371788,UofT-EcoSystem/tensorflow,"""refs/heads/master""",,,6661158939,1,1,"[{""sha"":""ef71c3d421c128668177cb134a76f956f266c604"",""author"":{""name"":""TensorFlower Gardener"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Merge pull request #47580 from WindQAQ:optimize-argminmax\n\nPiperOrigin-RevId: 361450743\nChange-Id: I713c36b3d4e3e7490501ead6f9dfe29af00f074a"",""distinct"":true,""url"":""https://api.github.com/repos/UofT-EcoSystem/tensorflow/commits/ef71c3d421c128668177cb134a76f956f266c604""}]",,,,,,,,,,
15439280115,IssueCommentEvent,true,2021-03-07 23:38:25.000000 UTC,20219,conradwt,16072585,phoenixframework/phoenix,,,,,,,,"""created""",,,,,,,,,
15439172494,WatchEvent,true,2021-03-07 23:12:19.000000 UTC,8182083,C0pyR1ght,135786093,typescript-cheatsheets/react,,,,,,,,"""started""",,,,,,,,,
15439346787,WatchEvent,true,2021-03-07 23:55:27.000000 UTC,39858145,amadeusine,135786093,typescript-cheatsheets/react,,,,,,,,"""started""",,,,,,,,,
15439296211,WatchEvent,true,2021-03-07 23:42:33.000000 UTC,42624645,stopatinfinity,135786093,typescript-cheatsheets/react,,,,,,,,"""started""",,,,,,,,,
15438301535,PushEvent,true,2021-03-07 19:52:26.000000 UTC,9582,josevalim,40702645,eksperimental/phoenix,"""refs/heads/ce_views""",,,6660657783,1,1,"[{""sha"":""6c04e6c3d711210c5bf550665a5eda4985e4b5c9"",""author"":{""name"":""José Valim"",""email"":""0c2436ea76ed86e37cc05f66dea18d48ef390882@gmail.com""},""message"":""Update guides/views.md"",""distinct"":true,""url"":""https://api.github.com/repos/eksperimental/phoenix/commits/6c04e6c3d711210c5bf550665a5eda4985e4b5c9""}]",,,,,,,,,,
15438277567,PushEvent,true,2021-03-07 19:47:05.000000 UTC,9582,josevalim,344950587,wgwz/phoenix,"""refs/heads/master""",,,6660643125,1,1,"[{""sha"":""39d1a24ad9bb072bf0962d2dfa30900132c85dd6"",""author"":{""name"":""José Valim"",""email"":""0c2436ea76ed86e37cc05f66dea18d48ef390882@gmail.com""},""message"":""Update guides/plug.md"",""distinct"":true,""url"":""https://api.github.com/repos/wgwz/phoenix/commits/39d1a24ad9bb072bf0962d2dfa30900132c85dd6""}]",,,,,,,,,,
15438248927,PullRequestReviewCommentEvent,true,2021-03-07 19:06:40.000000 UTC,223620,alexbaumgertner,342052516,General-m/react,,,,,,,,"""created""",2,,,,,,,,
15438248925,PullRequestReviewCommentEvent,true,2021-03-07 19:36:22.000000 UTC,223620,alexbaumgertner,342052516,General-m/react,,,,,,,,"""created""",2,,,,,,,,
15438248934,PullRequestReviewCommentEvent,true,2021-03-07 19:38:07.000000 UTC,223620,alexbaumgertner,342052516,General-m/react,,,,,,,,"""created""",2,,,,,,,,
15438248917,PullRequestReviewCommentEvent,true,2021-03-07 19:02:52.000000 UTC,223620,alexbaumgertner,342052516,General-m/react,,,,,,,,"""created""",2,,,,,,,,
15438248942,PullRequestReviewCommentEvent,true,2021-03-07 19:40:11.000000 UTC,223620,alexbaumgertner,342052516,General-m/react,,,,,,,,"""created""",2,,,,,,,,
15438248920,PullRequestReviewCommentEvent,true,2021-03-07 19:07:12.000000 UTC,223620,alexbaumgertner,342052516,General-m/react,,,,,,,,"""created""",2,,,,,,,,
15438248935,PullRequestReviewCommentEvent,true,2021-03-07 19:39:35.000000 UTC,223620,alexbaumgertner,342052516,General-m/react,,,,,,,,"""created""",2,,,,,,,,
15438248910,PullRequestReviewEvent,true,2021-03-07 19:40:36.000000 UTC,223620,alexbaumgertner,342052516,General-m/react,,,,,,,,"""created""",2,,,"""commented""","""NONE""",,,,
15438248916,PullRequestReviewCommentEvent,true,2021-03-07 19:03:27.000000 UTC,223620,alexbaumgertner,342052516,General-m/react,,,,,,,,"""created""",2,,,,,,,,
15438248900,PullRequestReviewEvent,true,2021-03-07 19:40:36.000000 UTC,223620,alexbaumgertner,342052516,General-m/react,,,,,,,,"""created""",2,,,"""commented""","""NONE""",,,,
15438248923,PullRequestReviewCommentEvent,true,2021-03-07 19:32:04.000000 UTC,223620,alexbaumgertner,342052516,General-m/react,,,,,,,,"""created""",2,,,,,,,,
15438178051,PushEvent,true,2021-03-07 19:25:32.000000 UTC,800611,brukshut,130750793,brukshut/terraform,"""refs/heads/master""",,,6660581266,2,1,"[{""sha"":""e55cc962b8a94fd0c1565000eee53efd5cb39ab0"",""author"":{""name"":""Christian Gough"",""email"":""515e74db1436fdbd04b7620ef875022b5e277020@gmail.com""},""message"":""Tear down old mail service."",""distinct"":false,""url"":""https://api.github.com/repos/brukshut/terraform/commits/e55cc962b8a94fd0c1565000eee53efd5cb39ab0""},{""sha"":""48396716111a5b533f6fc0b60496180d9e4fe3a9"",""author"":{""name"":""Christian Gough"",""email"":""2314b2e3a4a1f7db165be2aafbf1efd78f28cc97@gturn.xyz""},""message"":""Merge pull request #62 from brukshut/feature/teardown-mail-service\n\nTear down old mail service."",""distinct"":true,""url"":""https://api.github.com/repos/brukshut/terraform/commits/48396716111a5b533f6fc0b60496180d9e4fe3a9""}]",,,,,,,,,,
15438246993,CreateEvent,true,2021-03-07 19:40:11.000000 UTC,800611,brukshut,130750793,brukshut/terraform,"""feature/tear-down-old-vpc""","""branch""","""user""",,,,,,,,,,,,,,
15438178006,PullRequestEvent,true,2021-03-07 19:25:31.000000 UTC,800611,brukshut,130750793,brukshut/terraform,,,,,,,,"""closed""",62,,,,,,,,
15438260920,PushEvent,true,2021-03-07 19:43:18.000000 UTC,800611,brukshut,130750793,brukshut/terraform,"""refs/heads/master""",,,6660632755,2,1,"[{""sha"":""41697a148f7ffae53789bf23e56a7e5464a69e15"",""author"":{""name"":""Christian Gough"",""email"":""515e74db1436fdbd04b7620ef875022b5e277020@gmail.com""},""message"":""Tear down old vpc and remove deprecated modules."",""distinct"":false,""url"":""https://api.github.com/repos/brukshut/terraform/commits/41697a148f7ffae53789bf23e56a7e5464a69e15""},{""sha"":""6100b1ff00db70b66fb225d2b2017aa6f7989197"",""author"":{""name"":""Christian Gough"",""email"":""2314b2e3a4a1f7db165be2aafbf1efd78f28cc97@gturn.xyz""},""message"":""Merge pull request #63 from brukshut/feature/tear-down-old-vpc\n\nTear down old vpc and remove deprecated modules"",""distinct"":true,""url"":""https://api.github.com/repos/brukshut/terraform/commits/6100b1ff00db70b66fb225d2b2017aa6f7989197""}]",,,,,,,,,,
15438260492,PullRequestEvent,true,2021-03-07 19:43:12.000000 UTC,800611,brukshut,130750793,brukshut/terraform,,,,,,,,"""opened""",63,,,,,,,,
15438260892,PullRequestEvent,true,2021-03-07 19:43:18.000000 UTC,800611,brukshut,130750793,brukshut/terraform,,,,,,,,"""closed""",63,,,,,,,,
15438171939,CreateEvent,true,2021-03-07 19:24:10.000000 UTC,800611,brukshut,130750793,brukshut/terraform,"""feature/teardown-mail-service""","""branch""","""user""",,,,,,,,,,,,,,
15438177657,PullRequestEvent,true,2021-03-07 19:25:26.000000 UTC,800611,brukshut,130750793,brukshut/terraform,,,,,,,,"""opened""",62,,,,,,,,
15438231921,PushEvent,true,2021-03-07 19:36:51.000000 UTC,1322974,anntzer,26951681,anntzer/scikit-learn,"""refs/heads/delaypkgresources""",,,6660614821,188,1,"[{""sha"":""da395dde3804152562e461662e947c0edde4b5e3"",""author"":{""name"":""Paulo S. Costa"",""email"":""5a97a2af867251bc94826e710203a134ec5e5cad@gmail.com""},""message"":""DOC Fix cross-validation wording in RidgeCV (#19121)"",""distinct"":false,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/da395dde3804152562e461662e947c0edde4b5e3""},{""sha"":""d0ef86956317615204a78263f149f838c43c76a0"",""author"":{""name"":""Loïc Estève"",""email"":""b4f57ceb208f2c5eae4e1192d707c3466a564837@ymail.com""},""message"":""Add Github Discussions to issue template. (#19108)"",""distinct"":false,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/d0ef86956317615204a78263f149f838c43c76a0""},{""sha"":""6902b1014745cbf3b1a7a85eac60b7e8e882d715"",""author"":{""name"":""Thomas J. Fan"",""email"":""5e8796a332fafc9c261437cd1787ae2709a896a7@gmail.com""},""message"":""TST Skips test_compare_to_ELKI for arm (#19115)\n\n* TST Skips test for arm [cd build]\r\n\r\n* CI Skip for 32bit linux [cd build]"",""distinct"":false,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/6902b1014745cbf3b1a7a85eac60b7e8e882d715""},{""sha"":""cbfe0ede80beca86750ab8113f17c18c8c8042ce"",""author"":{""name"":""Olivier Grisel"",""email"":""2debdaedc015a28b6d296a878ea9501beb58cbd4@gmail.com""},""message"":""CI Reduce travis nightly load (#19113)\n\nCo-authored-by: Thomas J. Fan <thomasjpfan@gmail.com>"",""distinct"":false,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/cbfe0ede80beca86750ab8113f17c18c8c8042ce""},{""sha"":""c83125c04b5a3255802da933c6bbba1cafc703d6"",""author"":{""name"":""shinnar"",""email"":""c0c13bab09fc930d77b95982434fb9714d19c4aa@users.noreply.github.com""},""message"":""DOC Fix docstring of HalvingSearch estimators (#19133)"",""distinct"":false,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/c83125c04b5a3255802da933c6bbba1cafc703d6""},{""sha"":""6d3d1b853e0edf014bd38c438c8c9682d67a06f5"",""author"":{""name"":""Guillaume Lemaitre"",""email"":""e5e78d384e205244ed69377c80930de68a2732ec@gmail.com""},""message"":""FIX accept meta-estimator in SelfTrainingClassifier (#19126)\n\n\r\nCo-authored-by: Thomas J. Fan <thomasjpfan@gmail.com>\r\nCo-authored-by: Olivier Grisel <olivier.grisel@ensta.org>"",""distinct"":false,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/6d3d1b853e0edf014bd38c438c8c9682d67a06f5""},{""sha"":""22cd233e1932457947e9994285dc7fd4e93881e4"",""author"":{""name"":""Connor Tann"",""email"":""497220d763fa62739617111e8ce119ef151c1999@hotmail.com""},""message"":""DOC Fix typo in datasets.rst (#19136)\n\nFix typo in dataset loading docs"",""distinct"":false,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/22cd233e1932457947e9994285dc7fd4e93881e4""},{""sha"":""266a11b2e17cf86effefe7b498b61ca31217ad31"",""author"":{""name"":""Guillaume Lemaitre"",""email"":""e5e78d384e205244ed69377c80930de68a2732ec@gmail.com""},""message"":""DOC Update docs guideline regarding docstring formatting (#18243)\n\nCo-authored-by: Olivier Grisel <olivier.grisel@ensta.org>\r\nCo-authored-by: Jérémie du Boisberranger <34657725+jeremiedbb@users.noreply.github.com>"",""distinct"":false,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/266a11b2e17cf86effefe7b498b61ca31217ad31""},{""sha"":""1e46db669318fe20458d7cf135f6107e19e90970"",""author"":{""name"":""Kunj"",""email"":""d1069e5f4918b6a211d267b7e1780027953fbe78@gmail.com""},""message"":""DOC Update docs for StandardScaler.scale_ to include 0 variance (#19124)\n\nCo-authored-by: Thomas J. Fan <thomasjpfan@gmail.com>"",""distinct"":false,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/1e46db669318fe20458d7cf135f6107e19e90970""},{""sha"":""34de1b9b2122783601b245450a1885d18558ac81"",""author"":{""name"":""Zero"",""email"":""bff1e535f1c963efb66a29d49965659abc4e965e@gmail.com""},""message"":""ENH add fontname argument in export_graphviz for non-English characters  (#18959)"",""distinct"":false,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/34de1b9b2122783601b245450a1885d18558ac81""},{""sha"":""fe52d1e87af8729111155f821138e4baa618099c"",""author"":{""name"":""Olivier Grisel"",""email"":""2debdaedc015a28b6d296a878ea9501beb58cbd4@gmail.com""},""message"":""CI Use macos-10.13 compatible libomp when building the wheels (#19064)\n\nCo-authored-by: Jérémie du Boisberranger <34657725+jeremiedbb@users.noreply.github.com>"",""distinct"":false,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/fe52d1e87af8729111155f821138e4baa618099c""},{""sha"":""8ce2c2ba92005b62d962c763cea0d6f6d84e9cad"",""author"":{""name"":""Nicolas Hug"",""email"":""1a73af9e7ae00182733b2292511b814be66f065f@nicolas-hug.com""},""message"":""DOC minor broken links fix in parallelism docs (#19151)\n\nCo-authored-by: Thomas J. Fan <thomasjpfan@gmail.com>"",""distinct"":false,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/8ce2c2ba92005b62d962c763cea0d6f6d84e9cad""},{""sha"":""8df0aa6baec24147eb362a69cb7a57b913cc2f6c"",""author"":{""name"":""Thomas J. Fan"",""email"":""5e8796a332fafc9c261437cd1787ae2709a896a7@gmail.com""},""message"":""DOC Adds default to SpectralClustering (#19149)"",""distinct"":false,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/8df0aa6baec24147eb362a69cb7a57b913cc2f6c""},{""sha"":""158584a8cae1c7d895cf2b0f9a297d67571385d1"",""author"":{""name"":""Olivier Grisel"",""email"":""2debdaedc015a28b6d296a878ea9501beb58cbd4@gmail.com""},""message"":""DOC Update installation instructions for macos/arm64 (#19146)"",""distinct"":false,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/158584a8cae1c7d895cf2b0f9a297d67571385d1""},{""sha"":""aa1918cecff1161c36fcf06fa0fe4d1c69ece701"",""author"":{""name"":""Miao Cai"",""email"":""52d0707aa26825aba96a92212ad64ea64e0a6a15@gmail.com""},""message"":""DOC Mention to use a command prompt in Windows install (#19125)\n\nCo-authored-by: Guillaume Lemaitre <g.lemaitre58@gmail.com>"",""distinct"":false,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/aa1918cecff1161c36fcf06fa0fe4d1c69ece701""},{""sha"":""1bb0306a1309f9a57d8c652dec731a95cbd0052b"",""author"":{""name"":""ly648499246"",""email"":""15cbef074c8dc49bbf77ea7cbd6cb3b1cd0495d4@qq.com""},""message"":""FIX An overflow issue in HashingVectorizer (#19035)\n\nCo-authored-by: Jérémie du Boisberranger <34657725+jeremiedbb@users.noreply.github.com>\r\nCo-authored-by: amzliun <amzliun@amazon.com>"",""distinct"":false,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/1bb0306a1309f9a57d8c652dec731a95cbd0052b""},{""sha"":""4ecddb01d9380ea3889e894d8898f1d095301944"",""author"":{""name"":""Thomas J. Fan"",""email"":""5e8796a332fafc9c261437cd1787ae2709a896a7@gmail.com""},""message"":""DOC Uses float instead of real in cross_decomposition (#19156)"",""distinct"":false,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/4ecddb01d9380ea3889e894d8898f1d095301944""},{""sha"":""be4c1d1fee6ee3ec40935283f9e1ab22ebce27cf"",""author"":{""name"":""Juan Carlos Alfaro Jiménez"",""email"":""26ee155be2a94d28f82dfce99df9031a1a9dfe18@uclm.es""},""message"":""MNT Replace PDF build by ZIP of the HTML (#17564)"",""distinct"":false,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/be4c1d1fee6ee3ec40935283f9e1ab22ebce27cf""},{""sha"":""9f86a25a38a58bb45e00e9c3e2b26a1dc84161a8"",""author"":{""name"":""Sina Tootoonian"",""email"":""28c2d7c6e5684eea2b9b14fab3ffb60af705c8da@gmail.com""},""message"":""DOC Normalization of linear_model decision_function (#19142)"",""distinct"":false,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/9f86a25a38a58bb45e00e9c3e2b26a1dc84161a8""},{""sha"":""ea5342c1c9951327687a905639bbb67fd40bfd18"",""author"":{""name"":""Thomas J. Fan"",""email"":""5e8796a332fafc9c261437cd1787ae2709a896a7@gmail.com""},""message"":""CI Adds skipping to azure pipelines with commit message (#19134)"",""distinct"":false,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/ea5342c1c9951327687a905639bbb67fd40bfd18""}]",,,,,,,,,,
15438217754,DeleteEvent,true,2021-03-07 19:33:48.000000 UTC,1322974,anntzer,26951681,anntzer/scikit-learn,"""master""","""branch""","""user""",,,,,,,,,,,,,,
15438221485,PushEvent,true,2021-03-07 19:34:36.000000 UTC,1322974,anntzer,26951681,anntzer/scikit-learn,"""refs/heads/main""",,,6660608415,191,187,"[{""sha"":""e325bf760f55fb1095a66f1223af2cd396685b2f"",""author"":{""name"":""Guillaume Lemaitre"",""email"":""e5e78d384e205244ed69377c80930de68a2732ec@gmail.com""},""message"":""TST explicit convert array to float that will contains np.nan (#19101)"",""distinct"":false,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/e325bf760f55fb1095a66f1223af2cd396685b2f""},{""sha"":""ef4e95feebeda0929881cb9c0b3f00ef79bdbb93"",""author"":{""name"":""Thomas J. Fan"",""email"":""5e8796a332fafc9c261437cd1787ae2709a896a7@gmail.com""},""message"":""TST Adapts wminkowski for scipy 1.6.0 (#19096)"",""distinct"":false,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/ef4e95feebeda0929881cb9c0b3f00ef79bdbb93""},{""sha"":""2d95acfe95c28bd8e8a5793021a43ff71c5c6864"",""author"":{""name"":""Adam Midvidy"",""email"":""2d7069863fd4b139702261e4b5e1fcfb66531ac6@gmail.com""},""message"":""ENH/DOC Add additional validation for user-supplied gram matrixes (#19004)"",""distinct"":false,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/2d95acfe95c28bd8e8a5793021a43ff71c5c6864""},{""sha"":""dfc5e16066b3a3bbf34238cc0f67639d0965f1a8"",""author"":{""name"":""Shao Yang Hong"",""email"":""2adf0d0d6466a5e3b25619f435c4908824cd5314@gmail.com""},""message"":""DOC Add var_ attribute and deprecate sigma_ in GaussianNB (#18842)\n\nCo-authored-by: Jérémie du Boisberranger <34657725+jeremiedbb@users.noreply.github.com>\r\nCo-authored-by: Guillaume Lemaitre <g.lemaitre58@gmail.com>"",""distinct"":false,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/dfc5e16066b3a3bbf34238cc0f67639d0965f1a8""},{""sha"":""da395dde3804152562e461662e947c0edde4b5e3"",""author"":{""name"":""Paulo S. Costa"",""email"":""5a97a2af867251bc94826e710203a134ec5e5cad@gmail.com""},""message"":""DOC Fix cross-validation wording in RidgeCV (#19121)"",""distinct"":true,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/da395dde3804152562e461662e947c0edde4b5e3""},{""sha"":""d0ef86956317615204a78263f149f838c43c76a0"",""author"":{""name"":""Loïc Estève"",""email"":""b4f57ceb208f2c5eae4e1192d707c3466a564837@ymail.com""},""message"":""Add Github Discussions to issue template. (#19108)"",""distinct"":true,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/d0ef86956317615204a78263f149f838c43c76a0""},{""sha"":""6902b1014745cbf3b1a7a85eac60b7e8e882d715"",""author"":{""name"":""Thomas J. Fan"",""email"":""5e8796a332fafc9c261437cd1787ae2709a896a7@gmail.com""},""message"":""TST Skips test_compare_to_ELKI for arm (#19115)\n\n* TST Skips test for arm [cd build]\r\n\r\n* CI Skip for 32bit linux [cd build]"",""distinct"":true,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/6902b1014745cbf3b1a7a85eac60b7e8e882d715""},{""sha"":""cbfe0ede80beca86750ab8113f17c18c8c8042ce"",""author"":{""name"":""Olivier Grisel"",""email"":""2debdaedc015a28b6d296a878ea9501beb58cbd4@gmail.com""},""message"":""CI Reduce travis nightly load (#19113)\n\nCo-authored-by: Thomas J. Fan <thomasjpfan@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/cbfe0ede80beca86750ab8113f17c18c8c8042ce""},{""sha"":""c83125c04b5a3255802da933c6bbba1cafc703d6"",""author"":{""name"":""shinnar"",""email"":""c0c13bab09fc930d77b95982434fb9714d19c4aa@users.noreply.github.com""},""message"":""DOC Fix docstring of HalvingSearch estimators (#19133)"",""distinct"":true,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/c83125c04b5a3255802da933c6bbba1cafc703d6""},{""sha"":""6d3d1b853e0edf014bd38c438c8c9682d67a06f5"",""author"":{""name"":""Guillaume Lemaitre"",""email"":""e5e78d384e205244ed69377c80930de68a2732ec@gmail.com""},""message"":""FIX accept meta-estimator in SelfTrainingClassifier (#19126)\n\n\r\nCo-authored-by: Thomas J. Fan <thomasjpfan@gmail.com>\r\nCo-authored-by: Olivier Grisel <olivier.grisel@ensta.org>"",""distinct"":true,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/6d3d1b853e0edf014bd38c438c8c9682d67a06f5""},{""sha"":""22cd233e1932457947e9994285dc7fd4e93881e4"",""author"":{""name"":""Connor Tann"",""email"":""497220d763fa62739617111e8ce119ef151c1999@hotmail.com""},""message"":""DOC Fix typo in datasets.rst (#19136)\n\nFix typo in dataset loading docs"",""distinct"":true,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/22cd233e1932457947e9994285dc7fd4e93881e4""},{""sha"":""266a11b2e17cf86effefe7b498b61ca31217ad31"",""author"":{""name"":""Guillaume Lemaitre"",""email"":""e5e78d384e205244ed69377c80930de68a2732ec@gmail.com""},""message"":""DOC Update docs guideline regarding docstring formatting (#18243)\n\nCo-authored-by: Olivier Grisel <olivier.grisel@ensta.org>\r\nCo-authored-by: Jérémie du Boisberranger <34657725+jeremiedbb@users.noreply.github.com>"",""distinct"":true,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/266a11b2e17cf86effefe7b498b61ca31217ad31""},{""sha"":""1e46db669318fe20458d7cf135f6107e19e90970"",""author"":{""name"":""Kunj"",""email"":""d1069e5f4918b6a211d267b7e1780027953fbe78@gmail.com""},""message"":""DOC Update docs for StandardScaler.scale_ to include 0 variance (#19124)\n\nCo-authored-by: Thomas J. Fan <thomasjpfan@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/1e46db669318fe20458d7cf135f6107e19e90970""},{""sha"":""34de1b9b2122783601b245450a1885d18558ac81"",""author"":{""name"":""Zero"",""email"":""bff1e535f1c963efb66a29d49965659abc4e965e@gmail.com""},""message"":""ENH add fontname argument in export_graphviz for non-English characters  (#18959)"",""distinct"":true,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/34de1b9b2122783601b245450a1885d18558ac81""},{""sha"":""fe52d1e87af8729111155f821138e4baa618099c"",""author"":{""name"":""Olivier Grisel"",""email"":""2debdaedc015a28b6d296a878ea9501beb58cbd4@gmail.com""},""message"":""CI Use macos-10.13 compatible libomp when building the wheels (#19064)\n\nCo-authored-by: Jérémie du Boisberranger <34657725+jeremiedbb@users.noreply.github.com>"",""distinct"":true,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/fe52d1e87af8729111155f821138e4baa618099c""},{""sha"":""8ce2c2ba92005b62d962c763cea0d6f6d84e9cad"",""author"":{""name"":""Nicolas Hug"",""email"":""1a73af9e7ae00182733b2292511b814be66f065f@nicolas-hug.com""},""message"":""DOC minor broken links fix in parallelism docs (#19151)\n\nCo-authored-by: Thomas J. Fan <thomasjpfan@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/8ce2c2ba92005b62d962c763cea0d6f6d84e9cad""},{""sha"":""8df0aa6baec24147eb362a69cb7a57b913cc2f6c"",""author"":{""name"":""Thomas J. Fan"",""email"":""5e8796a332fafc9c261437cd1787ae2709a896a7@gmail.com""},""message"":""DOC Adds default to SpectralClustering (#19149)"",""distinct"":true,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/8df0aa6baec24147eb362a69cb7a57b913cc2f6c""},{""sha"":""158584a8cae1c7d895cf2b0f9a297d67571385d1"",""author"":{""name"":""Olivier Grisel"",""email"":""2debdaedc015a28b6d296a878ea9501beb58cbd4@gmail.com""},""message"":""DOC Update installation instructions for macos/arm64 (#19146)"",""distinct"":true,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/158584a8cae1c7d895cf2b0f9a297d67571385d1""},{""sha"":""aa1918cecff1161c36fcf06fa0fe4d1c69ece701"",""author"":{""name"":""Miao Cai"",""email"":""52d0707aa26825aba96a92212ad64ea64e0a6a15@gmail.com""},""message"":""DOC Mention to use a command prompt in Windows install (#19125)\n\nCo-authored-by: Guillaume Lemaitre <g.lemaitre58@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/aa1918cecff1161c36fcf06fa0fe4d1c69ece701""},{""sha"":""1bb0306a1309f9a57d8c652dec731a95cbd0052b"",""author"":{""name"":""ly648499246"",""email"":""15cbef074c8dc49bbf77ea7cbd6cb3b1cd0495d4@qq.com""},""message"":""FIX An overflow issue in HashingVectorizer (#19035)\n\nCo-authored-by: Jérémie du Boisberranger <34657725+jeremiedbb@users.noreply.github.com>\r\nCo-authored-by: amzliun <amzliun@amazon.com>"",""distinct"":true,""url"":""https://api.github.com/repos/anntzer/scikit-learn/commits/1bb0306a1309f9a57d8c652dec731a95cbd0052b""}]",,,,,,,,,,
15438217797,CreateEvent,true,2021-03-07 19:33:49.000000 UTC,1322974,anntzer,26951681,anntzer/scikit-learn,"""main""","""branch""","""user""",,,,,,,,,,,,,,
15438240152,CreateEvent,true,2021-03-07 19:38:37.000000 UTC,8557871,TheFirstAvenger,176971989,TheFirstAvenger/phoenix,"""mb-4237-separate-edit-back-in-generators""","""branch""","""user""",,,,,,,,,,,,,,
15438097292,PushEvent,true,2021-03-07 19:07:41.000000 UTC,8557871,TheFirstAvenger,176971989,TheFirstAvenger/phoenix,"""refs/heads/mb-2841-config-access-message-on-compilation""",,,6660531804,1,1,"[{""sha"":""9884d094b5166b8317f345cdc6709ad4141acbb2"",""author"":{""name"":""TheFirstAvenger"",""email"":""a17fed27eaa842282862ff7c1b9c8395a26ac320@mikebinns.net""},""message"":""Helpful error message when accessing endpoint config at compile time"",""distinct"":true,""url"":""https://api.github.com/repos/TheFirstAvenger/phoenix/commits/9884d094b5166b8317f345cdc6709ad4141acbb2""}]",,,,,,,,,,
15438080337,PushEvent,true,2021-03-07 19:03:55.000000 UTC,8557871,TheFirstAvenger,176971989,TheFirstAvenger/phoenix,"""refs/heads/mb-2841-config-access-message-on-compilation""",,,6660521284,1,1,"[{""sha"":""a512138527b0cc4a8286ecbecb088785a01413b6"",""author"":{""name"":""Mike Binns"",""email"":""ce5f3a6a3e3144b37f3dce61d8768e8f3f66adb3@users.noreply.github.com""},""message"":""Update lib/phoenix/config.ex\n\nCo-authored-by: José Valim <jose.valim@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/TheFirstAvenger/phoenix/commits/a512138527b0cc4a8286ecbecb088785a01413b6""}]",,,,,,,,,,
15438175123,CreateEvent,true,2021-03-07 19:24:51.000000 UTC,8557871,TheFirstAvenger,176971989,TheFirstAvenger/phoenix,"""mb-4080-no-warn-undefined-live-dashboard-path""","""branch""","""user""",,,,,,,,,,,,,,
15438329668,PushEvent,true,2021-03-07 19:58:57.000000 UTC,9133420,eksperimental,40702645,eksperimental/phoenix,"""refs/heads/singularize""",,,6660674841,1,1,"[{""sha"":""76c8aab725971cb1ed58491dda3498ad4546d2cb"",""author"":{""name"":""Eksperimental"",""email"":""f9231051ec6817d2d71487989ea7bb561d7f7c32@autistici.org""},""message"":""Remove Phoenix.Util"",""distinct"":true,""url"":""https://api.github.com/repos/eksperimental/phoenix/commits/76c8aab725971cb1ed58491dda3498ad4546d2cb""}]",,,,,,,,,,
15438236294,PushEvent,true,2021-03-07 19:37:44.000000 UTC,12224985,chaowenGUO,295334863,chaowenGUO/tensorflow,"""refs/heads/master""",,,6660617547,1,1,"[{""sha"":""da64a630eccd88922e7edd56728b673edc6306e7"",""author"":{""name"":""chaowen guo"",""email"":""1c5b642634d6b3db81fee0eb82faf85722c920e9@gmail.com""},""message"":""Update main.py"",""distinct"":true,""url"":""https://api.github.com/repos/chaowenGUO/tensorflow/commits/da64a630eccd88922e7edd56728b673edc6306e7""}]",,,,,,,,,,
15438118447,MemberEvent,true,2021-03-07 19:12:26.000000 UTC,20023558,shubhamdo,326727512,shubhamdo/scikit-learn,,,,,,,,"""added""",,,,,,56804129,"""vinayak-parab""","""User""",false
15438116097,MemberEvent,true,2021-03-07 19:11:53.000000 UTC,20023558,shubhamdo,326727512,shubhamdo/scikit-learn,,,,,,,,"""added""",,,,,,58422098,"""MaxKinner""","""User""",false
15438314587,DeleteEvent,true,2021-03-07 19:55:30.000000 UTC,22809044,velmuruganmani,293494782,velmuruganmani/react,"""typescriptdemo""","""branch""","""user""",,,,,,,,,,,,,,
15438131086,DeleteEvent,true,2021-03-07 19:15:19.000000 UTC,22809044,velmuruganmani,293494782,velmuruganmani/react,"""reacttypescript""","""branch""","""user""",,,,,,,,,,,,,,
15438310129,CreateEvent,true,2021-03-07 19:54:28.000000 UTC,22809044,velmuruganmani,293494782,velmuruganmani/react,"""typescriptdemo""","""branch""","""user""",,,,,,,,,,,,,,
15438327230,IssueCommentEvent,true,2021-03-07 19:58:23.000000 UTC,32347756,todo[bot],199682157,wadezhan/react,,,,,,,,"""created""",,,,,,,,,
15438226763,PullRequestEvent,true,2021-03-07 19:35:44.000000 UTC,39814207,pull[bot],163274816,kokizzu/tensorflow,,,,,,,,"""closed""",3477,,,,,,,,
15438263182,PullRequestEvent,true,2021-03-07 19:43:49.000000 UTC,39814207,pull[bot],95927693,akram/tensorflow,,,,,,,,"""opened""",4310,,,,,,,,
15438323518,PullRequestEvent,true,2021-03-07 19:57:31.000000 UTC,39814207,pull[bot],339262813,Jeffkeen7/tensorflow,,,,,,,,"""opened""",64,,,,,,,,
15438230840,PullRequestEvent,true,2021-03-07 19:36:37.000000 UTC,39814207,pull[bot],211283192,Alan-love/react,,,,,,,,"""closed""",346,,,,,,,,
15438243686,PullRequestEvent,true,2021-03-07 19:39:25.000000 UTC,39814207,pull[bot],181474594,suddenlyGiovanni/react,,,,,,,,"""opened""",517,,,,,,,,
15438327050,PullRequestEvent,true,2021-03-07 19:58:21.000000 UTC,39814207,pull[bot],199682157,wadezhan/react,,,,,,,,"""opened""",812,,,,,,,,
15438151362,PullRequestEvent,true,2021-03-07 19:19:48.000000 UTC,39814207,pull[bot],105981784,manojsdeveloper/react,,,,,,,,"""opened""",312,,,,,,,,
15438230817,PushEvent,true,2021-03-07 19:36:37.000000 UTC,39814207,pull[bot],211283192,Alan-love/react,"""refs/heads/master""",,,6660614137,1,1,"[{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/Alan-love/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""}]",,,,,,,,,,
15438302453,PullRequestEvent,true,2021-03-07 19:52:40.000000 UTC,39814207,pull[bot],65461415,PowerOlive/tensorflow,,,,,,,,"""opened""",170,,,,,,,,
15438105710,PushEvent,true,2021-03-07 19:09:36.000000 UTC,39814207,pull[bot],329235466,gouda1a1/react,"""refs/heads/master""",,,6660537099,1,1,"[{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/gouda1a1/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""}]",,,,,,,,,,
15438116689,PullRequestEvent,true,2021-03-07 19:12:01.000000 UTC,39814207,pull[bot],190277211,KabirKwatra/tensorflow,,,,,,,,"""opened""",5522,,,,,,,,
15438104644,PushEvent,true,2021-03-07 19:09:22.000000 UTC,39814207,pull[bot],130050312,Rachelmorrell/tensorflow,"""refs/heads/master""",,,6660536422,2,2,"[{""sha"":""6613bf0887142ae7f141bbc00d8cb3d791fdd1a4"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Fix stride mismatch propagation bug across convolutions\n\nPiperOrigin-RevId: 361429642\nChange-Id: I40e18cd9c2ce9750e1949b16f90e7182a682dd0f"",""distinct"":true,""url"":""https://api.github.com/repos/Rachelmorrell/tensorflow/commits/6613bf0887142ae7f141bbc00d8cb3d791fdd1a4""},{""sha"":""efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7"",""author"":{""name"":""Peter Hawkins"",""email"":""34b19541630131950b5f204f2c5f2c647a3a7475@google.com""},""message"":""[XLA:Python] Split DevicePut out of `jax_jit` and refactor it.\n\n* Creates a new py_values.cc/h file to contain device_put.\n* Moves some of the type helpers into the existing types module.\n* Change `PyClient::BufferFromPyval` to call DevicePut. There's no reason to have two similar but subtly different methods for copying a buffer-like object to a device.\n* Refactor and optimize some of the handler functions. In particular, avoid creating a number of unnecessary intermediate objects.\n\nPiperOrigin-RevId: 361430648\nChange-Id: I56b056eb8f0fde20b2f65170fcbf9530cd97d12b"",""distinct"":true,""url"":""https://api.github.com/repos/Rachelmorrell/tensorflow/commits/efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7""}]",,,,,,,,,,
15438151895,PullRequestEvent,true,2021-03-07 19:19:56.000000 UTC,39814207,pull[bot],340715557,KaycoinsInc/tensorflow,,,,,,,,"""opened""",39,,,,,,,,
15438329305,PullRequestEvent,true,2021-03-07 19:58:52.000000 UTC,39814207,pull[bot],295401342,apshada/react,,,,,,,,"""closed""",194,,,,,,,,
15438100354,PullRequestEvent,true,2021-03-07 19:08:23.000000 UTC,39814207,pull[bot],83310415,NeatNerdPrime/tensorflow,,,,,,,,"""closed""",4484,,,,,,,,
15438072992,PullRequestEvent,true,2021-03-07 19:02:18.000000 UTC,39814207,pull[bot],295401342,apshada/react,,,,,,,,"""opened""",194,,,,,,,,
15438093856,PushEvent,true,2021-03-07 19:06:56.000000 UTC,39814207,pull[bot],95080482,xiaoxiaopingzi/tensorflow,"""refs/heads/master""",,,6660529692,2,2,"[{""sha"":""6613bf0887142ae7f141bbc00d8cb3d791fdd1a4"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Fix stride mismatch propagation bug across convolutions\n\nPiperOrigin-RevId: 361429642\nChange-Id: I40e18cd9c2ce9750e1949b16f90e7182a682dd0f"",""distinct"":true,""url"":""https://api.github.com/repos/xiaoxiaopingzi/tensorflow/commits/6613bf0887142ae7f141bbc00d8cb3d791fdd1a4""},{""sha"":""efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7"",""author"":{""name"":""Peter Hawkins"",""email"":""34b19541630131950b5f204f2c5f2c647a3a7475@google.com""},""message"":""[XLA:Python] Split DevicePut out of `jax_jit` and refactor it.\n\n* Creates a new py_values.cc/h file to contain device_put.\n* Moves some of the type helpers into the existing types module.\n* Change `PyClient::BufferFromPyval` to call DevicePut. There's no reason to have two similar but subtly different methods for copying a buffer-like object to a device.\n* Refactor and optimize some of the handler functions. In particular, avoid creating a number of unnecessary intermediate objects.\n\nPiperOrigin-RevId: 361430648\nChange-Id: I56b056eb8f0fde20b2f65170fcbf9530cd97d12b"",""distinct"":true,""url"":""https://api.github.com/repos/xiaoxiaopingzi/tensorflow/commits/efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7""}]",,,,,,,,,,
15438128558,PullRequestEvent,true,2021-03-07 19:14:45.000000 UTC,39814207,pull[bot],66892771,JackEasons/react,,,,,,,,"""opened""",130,,,,,,,,
15438190653,PullRequestEvent,true,2021-03-07 19:28:18.000000 UTC,39814207,pull[bot],30268292,chojar/react,,,,,,,,"""opened""",1569,,,,,,,,
15438295120,PushEvent,true,2021-03-07 19:51:01.000000 UTC,39814207,pull[bot],107213661,Geolem/tensorflow,"""refs/heads/master""",,,6660653873,2,2,"[{""sha"":""6613bf0887142ae7f141bbc00d8cb3d791fdd1a4"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Fix stride mismatch propagation bug across convolutions\n\nPiperOrigin-RevId: 361429642\nChange-Id: I40e18cd9c2ce9750e1949b16f90e7182a682dd0f"",""distinct"":true,""url"":""https://api.github.com/repos/Geolem/tensorflow/commits/6613bf0887142ae7f141bbc00d8cb3d791fdd1a4""},{""sha"":""efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7"",""author"":{""name"":""Peter Hawkins"",""email"":""34b19541630131950b5f204f2c5f2c647a3a7475@google.com""},""message"":""[XLA:Python] Split DevicePut out of `jax_jit` and refactor it.\n\n* Creates a new py_values.cc/h file to contain device_put.\n* Moves some of the type helpers into the existing types module.\n* Change `PyClient::BufferFromPyval` to call DevicePut. There's no reason to have two similar but subtly different methods for copying a buffer-like object to a device.\n* Refactor and optimize some of the handler functions. In particular, avoid creating a number of unnecessary intermediate objects.\n\nPiperOrigin-RevId: 361430648\nChange-Id: I56b056eb8f0fde20b2f65170fcbf9530cd97d12b"",""distinct"":true,""url"":""https://api.github.com/repos/Geolem/tensorflow/commits/efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7""}]",,,,,,,,,,
15438310044,PullRequestEvent,true,2021-03-07 19:54:27.000000 UTC,39814207,pull[bot],117140827,testkevinbonz/tensorflow,,,,,,,,"""closed""",6918,,,,,,,,
15438137475,PullRequestEvent,true,2021-03-07 19:16:46.000000 UTC,39814207,pull[bot],281212457,rafsanulhasan/react,,,,,,,,"""closed""",272,,,,,,,,
15438329273,PushEvent,true,2021-03-07 19:58:51.000000 UTC,39814207,pull[bot],295401342,apshada/react,"""refs/heads/master""",,,6660674616,1,1,"[{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/apshada/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""}]",,,,,,,,,,
15438104673,PullRequestEvent,true,2021-03-07 19:09:22.000000 UTC,39814207,pull[bot],130050312,Rachelmorrell/tensorflow,,,,,,,,"""closed""",5252,,,,,,,,
15438257722,PushEvent,true,2021-03-07 19:42:34.000000 UTC,39814207,pull[bot],308687720,linbingquan/react,"""refs/heads/master""",,,6660630786,1,1,"[{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/linbingquan/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""}]",,,,,,,,,,
15438146280,PullRequestEvent,true,2021-03-07 19:18:43.000000 UTC,39814207,pull[bot],266801149,tbergq/react,,,,,,,,"""closed""",335,,,,,,,,
15438105765,PullRequestEvent,true,2021-03-07 19:09:37.000000 UTC,39814207,pull[bot],329235466,gouda1a1/react,,,,,,,,"""closed""",68,,,,,,,,
15438080515,PushEvent,true,2021-03-07 19:03:58.000000 UTC,39814207,pull[bot],209611938,Alan-love/tensorflow,"""refs/heads/master""",,,6660521412,2,2,"[{""sha"":""6613bf0887142ae7f141bbc00d8cb3d791fdd1a4"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Fix stride mismatch propagation bug across convolutions\n\nPiperOrigin-RevId: 361429642\nChange-Id: I40e18cd9c2ce9750e1949b16f90e7182a682dd0f"",""distinct"":true,""url"":""https://api.github.com/repos/Alan-love/tensorflow/commits/6613bf0887142ae7f141bbc00d8cb3d791fdd1a4""},{""sha"":""efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7"",""author"":{""name"":""Peter Hawkins"",""email"":""34b19541630131950b5f204f2c5f2c647a3a7475@google.com""},""message"":""[XLA:Python] Split DevicePut out of `jax_jit` and refactor it.\n\n* Creates a new py_values.cc/h file to contain device_put.\n* Moves some of the type helpers into the existing types module.\n* Change `PyClient::BufferFromPyval` to call DevicePut. There's no reason to have two similar but subtly different methods for copying a buffer-like object to a device.\n* Refactor and optimize some of the handler functions. In particular, avoid creating a number of unnecessary intermediate objects.\n\nPiperOrigin-RevId: 361430648\nChange-Id: I56b056eb8f0fde20b2f65170fcbf9530cd97d12b"",""distinct"":true,""url"":""https://api.github.com/repos/Alan-love/tensorflow/commits/efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7""}]",,,,,,,,,,
15438137441,PushEvent,true,2021-03-07 19:16:46.000000 UTC,39814207,pull[bot],281212457,rafsanulhasan/react,"""refs/heads/master""",,,6660557133,1,1,"[{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/rafsanulhasan/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""}]",,,,,,,,,,
15438295176,PullRequestEvent,true,2021-03-07 19:51:01.000000 UTC,39814207,pull[bot],107213661,Geolem/tensorflow,,,,,,,,"""closed""",26,,,,,,,,
15438226718,PushEvent,true,2021-03-07 19:35:44.000000 UTC,39814207,pull[bot],163274816,kokizzu/tensorflow,"""refs/heads/master""",,,6660611629,2,2,"[{""sha"":""6613bf0887142ae7f141bbc00d8cb3d791fdd1a4"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Fix stride mismatch propagation bug across convolutions\n\nPiperOrigin-RevId: 361429642\nChange-Id: I40e18cd9c2ce9750e1949b16f90e7182a682dd0f"",""distinct"":true,""url"":""https://api.github.com/repos/kokizzu/tensorflow/commits/6613bf0887142ae7f141bbc00d8cb3d791fdd1a4""},{""sha"":""efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7"",""author"":{""name"":""Peter Hawkins"",""email"":""34b19541630131950b5f204f2c5f2c647a3a7475@google.com""},""message"":""[XLA:Python] Split DevicePut out of `jax_jit` and refactor it.\n\n* Creates a new py_values.cc/h file to contain device_put.\n* Moves some of the type helpers into the existing types module.\n* Change `PyClient::BufferFromPyval` to call DevicePut. There's no reason to have two similar but subtly different methods for copying a buffer-like object to a device.\n* Refactor and optimize some of the handler functions. In particular, avoid creating a number of unnecessary intermediate objects.\n\nPiperOrigin-RevId: 361430648\nChange-Id: I56b056eb8f0fde20b2f65170fcbf9530cd97d12b"",""distinct"":true,""url"":""https://api.github.com/repos/kokizzu/tensorflow/commits/efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7""}]",,,,,,,,,,
15438080539,PullRequestEvent,true,2021-03-07 19:03:58.000000 UTC,39814207,pull[bot],209611938,Alan-love/tensorflow,,,,,,,,"""closed""",1437,,,,,,,,
15438310028,PushEvent,true,2021-03-07 19:54:27.000000 UTC,39814207,pull[bot],117140827,testkevinbonz/tensorflow,"""refs/heads/master""",,,6660662980,2,2,"[{""sha"":""6613bf0887142ae7f141bbc00d8cb3d791fdd1a4"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Fix stride mismatch propagation bug across convolutions\n\nPiperOrigin-RevId: 361429642\nChange-Id: I40e18cd9c2ce9750e1949b16f90e7182a682dd0f"",""distinct"":true,""url"":""https://api.github.com/repos/testkevinbonz/tensorflow/commits/6613bf0887142ae7f141bbc00d8cb3d791fdd1a4""},{""sha"":""efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7"",""author"":{""name"":""Peter Hawkins"",""email"":""34b19541630131950b5f204f2c5f2c647a3a7475@google.com""},""message"":""[XLA:Python] Split DevicePut out of `jax_jit` and refactor it.\n\n* Creates a new py_values.cc/h file to contain device_put.\n* Moves some of the type helpers into the existing types module.\n* Change `PyClient::BufferFromPyval` to call DevicePut. There's no reason to have two similar but subtly different methods for copying a buffer-like object to a device.\n* Refactor and optimize some of the handler functions. In particular, avoid creating a number of unnecessary intermediate objects.\n\nPiperOrigin-RevId: 361430648\nChange-Id: I56b056eb8f0fde20b2f65170fcbf9530cd97d12b"",""distinct"":true,""url"":""https://api.github.com/repos/testkevinbonz/tensorflow/commits/efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7""}]",,,,,,,,,,
15438093882,PullRequestEvent,true,2021-03-07 19:06:56.000000 UTC,39814207,pull[bot],95080482,xiaoxiaopingzi/tensorflow,,,,,,,,"""closed""",4492,,,,,,,,
15438100326,PushEvent,true,2021-03-07 19:08:22.000000 UTC,39814207,pull[bot],83310415,NeatNerdPrime/tensorflow,"""refs/heads/master""",,,6660533673,2,2,"[{""sha"":""6613bf0887142ae7f141bbc00d8cb3d791fdd1a4"",""author"":{""name"":""A. Unique TensorFlower"",""email"":""746aced590a184ef4169166e753f7c211e32e5fc@tensorflow.org""},""message"":""Fix stride mismatch propagation bug across convolutions\n\nPiperOrigin-RevId: 361429642\nChange-Id: I40e18cd9c2ce9750e1949b16f90e7182a682dd0f"",""distinct"":true,""url"":""https://api.github.com/repos/NeatNerdPrime/tensorflow/commits/6613bf0887142ae7f141bbc00d8cb3d791fdd1a4""},{""sha"":""efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7"",""author"":{""name"":""Peter Hawkins"",""email"":""34b19541630131950b5f204f2c5f2c647a3a7475@google.com""},""message"":""[XLA:Python] Split DevicePut out of `jax_jit` and refactor it.\n\n* Creates a new py_values.cc/h file to contain device_put.\n* Moves some of the type helpers into the existing types module.\n* Change `PyClient::BufferFromPyval` to call DevicePut. There's no reason to have two similar but subtly different methods for copying a buffer-like object to a device.\n* Refactor and optimize some of the handler functions. In particular, avoid creating a number of unnecessary intermediate objects.\n\nPiperOrigin-RevId: 361430648\nChange-Id: I56b056eb8f0fde20b2f65170fcbf9530cd97d12b"",""distinct"":true,""url"":""https://api.github.com/repos/NeatNerdPrime/tensorflow/commits/efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7""}]",,,,,,,,,,
15438146231,PushEvent,true,2021-03-07 19:18:43.000000 UTC,39814207,pull[bot],266801149,tbergq/react,"""refs/heads/master""",,,6660562543,1,1,"[{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/tbergq/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""}]",,,,,,,,,,
15438257750,PullRequestEvent,true,2021-03-07 19:42:35.000000 UTC,39814207,pull[bot],308687720,linbingquan/react,,,,,,,,"""closed""",137,,,,,,,,
15438246488,IssuesEvent,true,2021-03-07 19:40:05.000000 UTC,46760451,ObaidaSaleh,338179606,swarupsrini/scikit-learn,,,,,,,,"""opened""",,,,,,,,,
15438251145,CreateEvent,true,2021-03-07 19:41:04.000000 UTC,51521378,CyangXu,343300827,CyangXu/tensorflow,"""refactor""","""branch""","""user""",,,,,,,,,,,,,,
15438266947,CreateEvent,true,2021-03-07 19:44:41.000000 UTC,51521378,CyangXu,343300827,CyangXu/tensorflow,"""refactor""","""branch""","""user""",,,,,,,,,,,,,,
15438266535,DeleteEvent,true,2021-03-07 19:44:35.000000 UTC,51521378,CyangXu,343300827,CyangXu/tensorflow,"""refactor""","""branch""","""user""",,,,,,,,,,,,,,
15438067051,PushEvent,true,2021-03-07 19:01:01.000000 UTC,64424206,stumblefiend,345426997,stumblefiend/terraform,"""refs/heads/patch-1""",,,6660512971,1,1,"[{""sha"":""c053c86dd7ca2f1b7b8f8ba3b9d0b4ecb0814e8e"",""author"":{""name"":""Jeremy Pugh"",""email"":""9212ab3cf972c34f26075bbe0ff459e167237e5a@users.noreply.github.com""},""message"":""Update apply.go\n\nfixed grammar of error message"",""distinct"":true,""url"":""https://api.github.com/repos/stumblefiend/terraform/commits/c053c86dd7ca2f1b7b8f8ba3b9d0b4ecb0814e8e""}]",,,,,,,,,,
15438251686,WatchEvent,true,2021-03-07 19:41:12.000000 UTC,72406564,puneet-ludu-okcupid,123142610,ChWick/tensorflow,,,,,,,,"""started""",,,,,,,,,
15438242838,ForkEvent,true,2021-03-07 19:39:13.000000 UTC,341319,dharkness,10270250,facebook/react,,,,,,,,,,"""dharkness/react""",,,,,,,
15438216184,WatchEvent,true,2021-03-07 19:33:26.000000 UTC,7669608,liuxin85,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15438154669,IssuesEvent,true,2021-03-07 19:20:32.000000 UTC,23387365,adrian-kriegel,10270250,facebook/react,,,,,,,,"""opened""",,,,,,,,,
15438149892,WatchEvent,true,2021-03-07 19:19:29.000000 UTC,47824375,malikovss,10270250,facebook/react,,,,,,,,"""started""",,,,,,,,,
15438222760,IssueCommentEvent,true,2021-03-07 19:34:53.000000 UTC,134140,Joilnen,1093228,cocos2d/cocos2d-x,,,,,,,,"""created""",,,,,,,,,
15438210923,WatchEvent,true,2021-03-07 19:32:17.000000 UTC,25951433,k0nci,843222,scikit-learn/scikit-learn,,,,,,,,"""started""",,,,,,,,,
15438198111,WatchEvent,true,2021-03-07 19:29:58.000000 UTC,32029835,z4z5,843222,scikit-learn/scikit-learn,,,,,,,,"""started""",,,,,,,,,
15438228734,ForkEvent,true,2021-03-07 19:36:09.000000 UTC,41020539,johnmarkpittman,843222,scikit-learn/scikit-learn,,,,,,,,,,"""johnmarkpittman/scikit-learn""",,,,,,,
15438083452,PushEvent,true,2021-03-07 19:04:37.000000 UTC,15213161,pld-gitsync,5035239,pld-linux/opencv,"""refs/heads/master""",,,6660523206,1,1,"[{""sha"":""718761848dd3d842e170d655eec22db6190cfd06"",""author"":{""name"":""Jan Rękorajski"",""email"":""e6c8afe5cd121f1ebcd7153a1a24b1f5942bcaab@pld-linux.org""},""message"":""- fix c/c++ mixed header\n- rel 3"",""distinct"":true,""url"":""https://api.github.com/repos/pld-linux/opencv/commits/718761848dd3d842e170d655eec22db6190cfd06""}]",,,,,,,,,,
15438089802,CreateEvent,true,2021-03-07 19:06:02.000000 UTC,15213161,pld-gitsync,5035239,pld-linux/opencv,"""auto/th/opencv-4.5.1-3""","""tag""","""user""",,,,,,,,,,,,,,
15438249107,IssuesEvent,true,2021-03-07 19:40:38.000000 UTC,6265399,red8888,17728164,hashicorp/terraform,,,,,,,,"""opened""",,,,,,,,,
15438132045,IssueCommentEvent,true,2021-03-07 19:15:32.000000 UTC,13763987,frittentheke,17728164,hashicorp/terraform,,,,,,,,"""created""",,,,,,,,,
15438327758,WatchEvent,true,2021-03-07 19:58:31.000000 UTC,32434187,nabokihms,17728164,hashicorp/terraform,,,,,,,,"""started""",,,,,,,,,
15438090122,IssueCommentEvent,true,2021-03-07 19:06:06.000000 UTC,45953950,hashicorp-cla,17728164,hashicorp/terraform,,,,,,,,"""created""",,,,,,,,,
15438089938,PullRequestEvent,true,2021-03-07 19:06:04.000000 UTC,64424206,stumblefiend,17728164,hashicorp/terraform,,,,,,,,"""opened""",28007,,,,,,,,
15438278060,ForkEvent,true,2021-03-07 19:47:12.000000 UTC,76851428,pyj2001,5108051,opencv/opencv,,,,,,,,,,"""pyj2001/opencv""",,,,,,,
15438111353,PullRequestEvent,true,2021-03-07 19:10:48.000000 UTC,39814207,pull[bot],306008166,miqdigital/react,,,,,,,,"""closed""",148,,,,,,,,
15438111298,PushEvent,true,2021-03-07 19:10:47.000000 UTC,39814207,pull[bot],306008166,miqdigital/react,"""refs/heads/master""",,,6660540676,1,1,"[{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/miqdigital/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""}]",,,,,,,,,,
15438331702,PullRequestReviewCommentEvent,true,2021-03-07 19:59:25.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",4232,,,,,,,,
15438331701,PullRequestReviewEvent,true,2021-03-07 19:59:25.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",4232,,,"""commented""","""MEMBER""",,,,
15438303292,PullRequestReviewCommentEvent,true,2021-03-07 19:52:51.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",4224,,,,,,,,
15438274670,PullRequestEvent,true,2021-03-07 19:46:26.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""closed""",4242,,,,,,,,
15438277169,PullRequestReviewCommentEvent,true,2021-03-07 19:46:59.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",4239,,,,,,,,
15438324682,PushEvent,true,2021-03-07 19:57:47.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,"""refs/heads/master""",,,6660671816,1,1,"[{""sha"":""3d71737e7b26c35f590cfb28f3f530b2596c0a23"",""author"":{""name"":""Colin Smetz"",""email"":""e2e3531bcab6d34166400ba1faba6210bee4e17e@users.noreply.github.com""},""message"":""Explain how to choose an application name in the Gigalixir guide (#4235)"",""distinct"":true,""url"":""https://api.github.com/repos/phoenixframework/phoenix/commits/3d71737e7b26c35f590cfb28f3f530b2596c0a23""}]",,,,,,,,,,
15438303287,PullRequestReviewEvent,true,2021-03-07 19:52:51.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",4224,,,"""commented""","""MEMBER""",,,,
15438279599,IssueCommentEvent,true,2021-03-07 19:47:32.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",,,,,,,,,
15438314021,PushEvent,true,2021-03-07 19:55:23.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,"""refs/heads/master""",,,6660665371,1,1,"[{""sha"":""ef7446a32086266ff715df808c619794fe26b8af"",""author"":{""name"":""Eksperimental"",""email"":""f9231051ec6817d2d71487989ea7bb561d7f7c32@autistici.org""},""message"":""Copy edit - How-to's: Custom error pages (#4231)"",""distinct"":true,""url"":""https://api.github.com/repos/phoenixframework/phoenix/commits/ef7446a32086266ff715df808c619794fe26b8af""}]",,,,,,,,,,
15438279476,PushEvent,true,2021-03-07 19:47:31.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,"""refs/heads/master""",,,6660644257,1,1,"[{""sha"":""27c0bc5c8f6ccba42353e4403f7e2faa34042f71"",""author"":{""name"":""Mike Binns"",""email"":""ce5f3a6a3e3144b37f3dce61d8768e8f3f66adb3@users.noreply.github.com""},""message"":""Helpful error message when accessing endpoint config at compile time (#4240)"",""distinct"":true,""url"":""https://api.github.com/repos/phoenixframework/phoenix/commits/27c0bc5c8f6ccba42353e4403f7e2faa34042f71""}]",,,,,,,,,,
15438300994,PullRequestReviewEvent,true,2021-03-07 19:52:18.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",4224,,,"""commented""","""MEMBER""",,,,
15438311571,IssueCommentEvent,true,2021-03-07 19:54:49.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",,,,,,,,,
15438328026,PullRequestReviewEvent,true,2021-03-07 19:58:35.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",4232,,,"""commented""","""MEMBER""",,,,
15438333811,PullRequestReviewCommentEvent,true,2021-03-07 19:59:53.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",4232,,,,,,,,
15438287828,PushEvent,true,2021-03-07 19:49:22.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,"""refs/heads/master""",,,6660649313,1,1,"[{""sha"":""86de57394b2b8c819e32d4063fdb3c3c205faf0e"",""author"":{""name"":""4goodapp"",""email"":""6311e44244f6dad94be13b95f1e91592ad08bc10@gmail.com""},""message"":""Update ecto.md (#4218)\n\nChanged integer to bingint in Section *Using the schema and migration generator*"",""distinct"":true,""url"":""https://api.github.com/repos/phoenixframework/phoenix/commits/86de57394b2b8c819e32d4063fdb3c3c205faf0e""}]",,,,,,,,,,
15438322004,IssueCommentEvent,true,2021-03-07 19:57:11.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",,,,,,,,,
15438329229,PullRequestReviewEvent,true,2021-03-07 19:58:51.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",4232,,,"""commented""","""MEMBER""",,,,
15438279370,PullRequestEvent,true,2021-03-07 19:47:29.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""closed""",4240,,,,,,,,
15438309723,PullRequestEvent,true,2021-03-07 19:54:22.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""closed""",4207,,,,,,,,
15438274847,IssueCommentEvent,true,2021-03-07 19:46:29.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",,,,,,,,,
15438301008,PullRequestReviewCommentEvent,true,2021-03-07 19:52:18.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",4224,,,,,,,,
15438313944,PullRequestEvent,true,2021-03-07 19:55:22.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""closed""",4231,,,,,,,,
15438328032,PullRequestReviewCommentEvent,true,2021-03-07 19:58:34.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",4232,,,,,,,,
15438287724,PullRequestEvent,true,2021-03-07 19:49:21.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""closed""",4218,,,,,,,,
15438309776,PushEvent,true,2021-03-07 19:54:23.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,"""refs/heads/master""",,,6660662814,1,1,"[{""sha"":""7ce0ee23b4789bde3d8461448cf89e893f239b04"",""author"":{""name"":""Eksperimental"",""email"":""f9231051ec6817d2d71487989ea7bb561d7f7c32@autistici.org""},""message"":""Correct installation instructions & simplify release process (#4207)\n\nI have noticed the instructions were wrong because in some files the Phoenix version was not updated,\r\nso we can rely on `mix archive.install` to retrieve the latest version."",""distinct"":true,""url"":""https://api.github.com/repos/phoenixframework/phoenix/commits/7ce0ee23b4789bde3d8461448cf89e893f239b04""}]",,,,,,,,,,
15438310015,IssueCommentEvent,true,2021-03-07 19:54:26.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",,,,,,,,,
15438274659,IssuesEvent,true,2021-03-07 19:46:26.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""closed""",,,,,,,,,
15438277163,PullRequestReviewEvent,true,2021-03-07 19:47:00.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",4239,,,"""commented""","""MEMBER""",,,,
15438311396,PushEvent,true,2021-03-07 19:54:47.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,"""refs/heads/master""",,,6660663767,1,1,"[{""sha"":""620f7f13bb2f0ddf6a91d96035161633385c1d77"",""author"":{""name"":""Eksperimental"",""email"":""f9231051ec6817d2d71487989ea7bb561d7f7c32@autistici.org""},""message"":""Remove conditional based on opt_release (#4225)\n\nSince minimum supported version is Elixir v1.9 / OTP 20"",""distinct"":true,""url"":""https://api.github.com/repos/phoenixframework/phoenix/commits/620f7f13bb2f0ddf6a91d96035161633385c1d77""}]",,,,,,,,,,
15438324840,IssueCommentEvent,true,2021-03-07 19:57:49.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",,,,,,,,,
15438329233,PullRequestReviewCommentEvent,true,2021-03-07 19:58:50.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",4232,,,,,,,,
15438278399,PushEvent,true,2021-03-07 19:47:17.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,"""refs/heads/master""",,,6660643623,1,1,"[{""sha"":""0d855e5f1767b3590b7d8d9c64b0dc5cdb7bc64d"",""author"":{""name"":""Kyle Lawlor-Bagcal"",""email"":""73b1c583149d3d9efafa8df911d4ad91e4d4e296@users.noreply.github.com""},""message"":""Add info to plug docs about assign function (#4239)"",""distinct"":true,""url"":""https://api.github.com/repos/phoenixframework/phoenix/commits/0d855e5f1767b3590b7d8d9c64b0dc5cdb7bc64d""}]",,,,,,,,,,
15438286213,PullRequestReviewEvent,true,2021-03-07 19:49:00.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",4238,,,"""commented""","""MEMBER""",,,,
15438286220,PullRequestReviewCommentEvent,true,2021-03-07 19:48:59.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",4238,,,,,,,,
15438103034,IssueCommentEvent,true,2021-03-07 19:08:59.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",,,,,,,,,
15438287921,IssueCommentEvent,true,2021-03-07 19:49:23.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",,,,,,,,,
15438333806,PullRequestReviewEvent,true,2021-03-07 19:59:53.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",4232,,,"""commented""","""MEMBER""",,,,
15438324596,PullRequestEvent,true,2021-03-07 19:57:46.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""closed""",4235,,,,,,,,
15438279353,IssuesEvent,true,2021-03-07 19:47:29.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""closed""",,,,,,,,,
15438274812,PushEvent,true,2021-03-07 19:46:28.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,"""refs/heads/master""",,,6660641470,1,1,"[{""sha"":""e10e43a26a48e65b58c1766cc3b8926a9745b390"",""author"":{""name"":""Mike Binns"",""email"":""ce5f3a6a3e3144b37f3dce61d8768e8f3f66adb3@users.noreply.github.com""},""message"":""Add pipe separator between Edit and Back links on show template (#4242)"",""distinct"":true,""url"":""https://api.github.com/repos/phoenixframework/phoenix/commits/e10e43a26a48e65b58c1766cc3b8926a9745b390""}]",,,,,,,,,,
15438314130,IssueCommentEvent,true,2021-03-07 19:55:24.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",,,,,,,,,
15438278545,IssueCommentEvent,true,2021-03-07 19:47:18.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""created""",,,,,,,,,
15438278315,PullRequestEvent,true,2021-03-07 19:47:16.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""closed""",4239,,,,,,,,
15438311356,PullRequestEvent,true,2021-03-07 19:54:46.000000 UTC,9582,josevalim,16072585,phoenixframework/phoenix,,,,,,,,"""closed""",4225,,,,,,,,
15438176182,PullRequestEvent,true,2021-03-07 19:25:06.000000 UTC,8557871,TheFirstAvenger,16072585,phoenixframework/phoenix,,,,,,,,"""opened""",4241,,,,,,,,
15438241312,PullRequestEvent,true,2021-03-07 19:38:52.000000 UTC,8557871,TheFirstAvenger,16072585,phoenixframework/phoenix,,,,,,,,"""opened""",4242,,,,,,,,
15438113895,IssueCommentEvent,true,2021-03-07 19:11:24.000000 UTC,8557871,TheFirstAvenger,16072585,phoenixframework/phoenix,,,,,,,,"""created""",,,,,,,,,
15438178538,IssueCommentEvent,true,2021-03-07 19:25:38.000000 UTC,8557871,TheFirstAvenger,16072585,phoenixframework/phoenix,,,,,,,,"""created""",,,,,,,,,
15438252108,IssueCommentEvent,true,2021-03-07 19:41:17.000000 UTC,8557871,TheFirstAvenger,16072585,phoenixframework/phoenix,,,,,,,,"""created""",,,,,,,,,
15438331502,PullRequestReviewCommentEvent,true,2021-03-07 19:59:22.000000 UTC,9133420,eksperimental,16072585,phoenixframework/phoenix,,,,,,,,"""created""",4238,,,,,,,,
15438331487,PullRequestReviewEvent,true,2021-03-07 19:59:23.000000 UTC,9133420,eksperimental,16072585,phoenixframework/phoenix,,,,,,,,"""created""",4238,,,"""commented""","""CONTRIBUTOR""",,,,
15438282674,IssueCommentEvent,true,2021-03-07 19:48:12.000000 UTC,9133420,eksperimental,16072585,phoenixframework/phoenix,,,,,,,,"""created""",,,,,,,,,
15438211604,IssuesEvent,true,2021-03-07 19:32:26.000000 UTC,47647,chrisdavidmills,1352520,mdn/kuma,,,,,,,,"""closed""",,,,,,,,,
15438109900,IssuesEvent,true,2021-03-07 19:10:29.000000 UTC,66571264,blankscreengithub,192964514,ACINQ/phoenix,,,,,,,,"""opened""",,,,,,,,,
15438274710,IssueCommentEvent,true,2021-03-07 19:46:27.000000 UTC,11083536,fereydoonvafaei,45717250,tensorflow/tensorflow,,,,,,,,"""created""",,,,,,,,,
15438252410,PullRequestEvent,true,2021-03-07 19:41:22.000000 UTC,51521378,CyangXu,45717250,tensorflow/tensorflow,,,,,,,,"""closed""",47625,,,,,,,,
15438273262,PullRequestEvent,true,2021-03-07 19:46:07.000000 UTC,51521378,CyangXu,45717250,tensorflow/tensorflow,,,,,,,,"""opened""",47626,,,,,,,,
15438250613,PullRequestEvent,true,2021-03-07 19:40:57.000000 UTC,51521378,CyangXu,45717250,tensorflow/tensorflow,,,,,,,,"""opened""",47625,,,,,,,,
15438291217,WatchEvent,true,2021-03-07 19:50:07.000000 UTC,64878874,HuangPatrick16777216,45717250,tensorflow/tensorflow,,,,,,,,"""started""",,,,,,,,,
15438065026,PushEvent,true,2021-03-07 19:00:34.000000 UTC,19616653,ArmageddonKnight,204371788,UofT-EcoSystem/tensorflow,"""refs/heads/master""",,,6660511666,1,1,"[{""sha"":""efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7"",""author"":{""name"":""Peter Hawkins"",""email"":""34b19541630131950b5f204f2c5f2c647a3a7475@google.com""},""message"":""[XLA:Python] Split DevicePut out of `jax_jit` and refactor it.\n\n* Creates a new py_values.cc/h file to contain device_put.\n* Moves some of the type helpers into the existing types module.\n* Change `PyClient::BufferFromPyval` to call DevicePut. There's no reason to have two similar but subtly different methods for copying a buffer-like object to a device.\n* Refactor and optimize some of the handler functions. In particular, avoid creating a number of unnecessary intermediate objects.\n\nPiperOrigin-RevId: 361430648\nChange-Id: I56b056eb8f0fde20b2f65170fcbf9530cd97d12b"",""distinct"":true,""url"":""https://api.github.com/repos/UofT-EcoSystem/tensorflow/commits/efbc6851429bb5f2b28b2a21183b1a1cb7dd93a7""}]",,,,,,,,,,
15438212744,PullRequestEvent,true,2021-03-07 19:32:41.000000 UTC,39814207,pull[bot],256536409,zys-contrib/react,,,,,,,,"""closed""",184,,,,,,,,
15438212710,PushEvent,true,2021-03-07 19:32:41.000000 UTC,39814207,pull[bot],256536409,zys-contrib/react,"""refs/heads/master""",,,6660602882,1,1,"[{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/zys-contrib/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""}]",,,,,,,,,,
15438142479,WatchEvent,true,2021-03-07 19:17:54.000000 UTC,10061376,InamTaj,135786093,typescript-cheatsheets/react,,,,,,,,"""started""",,,,,,,,,
15438068705,PullRequestEvent,true,2021-03-07 19:01:22.000000 UTC,39814207,pull[bot],216880862,CrazyForks/react,,,,,,,,"""closed""",764,,,,,,,,
15438068672,PushEvent,true,2021-03-07 19:01:22.000000 UTC,39814207,pull[bot],216880862,CrazyForks/react,"""refs/heads/master""",,,6660514015,1,1,"[{""sha"":""f04bcb8139cfa341640ea875c2eae15523ae9cd9"",""author"":{""name"":""Andrew Clark"",""email"":""46f1a0bd5592a2f9244ca321b129902a06b53e03@andrewclark.io""},""message"":""[Bugfix] Reset `subtreeFlags` in `resetWorkInProgress` (#20948)\n\n* Add failing regression test\r\n\r\nBased on #20932\r\n\r\nCo-Authored-By: Dan Abramov <dan.abramov@gmail.com>\r\n\r\n* Reset `subtreeFlags` in `resetWorkInProgress`\r\n\r\nAlternate fix to #20942\r\n\r\nThere was already a TODO to make this change, but at the time I left it,\r\nI couldn't think of a way that it would actually cause a bug, and I was\r\nhesistant to change something without fully understanding the\r\nramifications. This was during a time when we were hunting down a\r\ndifferent bug, so we were especially risk averse.\r\n\r\nWhat I should have done in retrospect is put the change behind a flag\r\nand tried rolling it out once the other bug had been flushed out.\r\n\r\nOTOH, now we have a regression test, which wouldn't have otherwise, and\r\nthe bug it caused rarely fired in production.\r\n\r\nCo-authored-by: Dan Abramov <dan.abramov@gmail.com>"",""distinct"":true,""url"":""https://api.github.com/repos/CrazyForks/react/commits/f04bcb8139cfa341640ea875c2eae15523ae9cd9""}]",,,,,,,,,,
15438107118,PullRequestEvent,true,2021-03-07 19:09:55.000000 UTC,39814207,pull[bot],268754920,MLH-Fellowship/react,,,,,,,,"""opened""",228,,,,,,,,